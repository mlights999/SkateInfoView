
/Users/matthewpanizza/Library/CloudStorage/OneDrive-Personal/Particle/SkateInfoView/target/1.5.2/xenon/SkateInfoView.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000065a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da5c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000009c  2003e1e8  000da5c4  0001e1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000056c  2003e284  2003e284  0002e284  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da660  000da660  0002a660  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da688  000da688  0002a688  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f70ac  00000000  00000000  0002a68c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012c8c  00000000  00000000  00121738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000236b5  00000000  00000000  001343c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002d08  00000000  00000000  00157a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005430  00000000  00000000  0015a781  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036f1a  00000000  00000000  0015fbb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d05a  00000000  00000000  00196acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00109864  00000000  00000000  001c3b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e550  00000000  00000000  002cd38c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fcfa 	bl	d9a2a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fd1a 	bl	d9a76 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1e8 	.word	0x2003e1e8
   d404c:	000da5c4 	.word	0x000da5c4
   d4050:	2003e284 	.word	0x2003e284
   d4054:	2003e284 	.word	0x2003e284
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 fe21 	bl	d8ca4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000da5c0 	.word	0x000da5c0
   d4084:	000da588 	.word	0x000da588

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b936 	b.w	d42f8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fba3 	bl	d47d8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 bdc7 	b.w	d8c28 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 baf3 	b.w	d5684 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 baf9 	b.w	d5694 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 baf7 	b.w	d5694 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 fa24 	bl	d54fc <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d51ed 	.word	0x000d51ed

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_Z12calculateRPMv>:
    //if(!digitalRead(D4)) digitalWrite(D7,HIGH);
    //else digitalWrite(D7, LOW);
    delay(5);//250ms per loop
}

void calculateRPM(){
   d40d8:	b510      	push	{r4, lr}
    RPS = ((pulse_1S + (pulse_2S >> 1))/(NUM_WHEEL_MAG << 1));       //Take average of past 1 second and past 2 seconds
   d40da:	4a0a      	ldr	r2, [pc, #40]	; (d4104 <_Z12calculateRPMv+0x2c>)
   d40dc:	490a      	ldr	r1, [pc, #40]	; (d4108 <_Z12calculateRPMv+0x30>)
   d40de:	8810      	ldrh	r0, [r2, #0]
   d40e0:	880b      	ldrh	r3, [r1, #0]
    pulse_2S = pulse_1S;                             //Reset counters
   d40e2:	8008      	strh	r0, [r1, #0]
    pulse_1S = 0;
   d40e4:	2100      	movs	r1, #0
   d40e6:	8011      	strh	r1, [r2, #0]
    revCount += RPS;
   d40e8:	4a08      	ldr	r2, [pc, #32]	; (d410c <_Z12calculateRPMv+0x34>)
    //else digitalWrite(D7, LOW);
    delay(5);//250ms per loop
}

void calculateRPM(){
    RPS = ((pulse_1S + (pulse_2S >> 1))/(NUM_WHEEL_MAG << 1));       //Take average of past 1 second and past 2 seconds
   d40ea:	240c      	movs	r4, #12
    pulse_2S = pulse_1S;                             //Reset counters
    pulse_1S = 0;
    revCount += RPS;
   d40ec:	6811      	ldr	r1, [r2, #0]
    //else digitalWrite(D7, LOW);
    delay(5);//250ms per loop
}

void calculateRPM(){
    RPS = ((pulse_1S + (pulse_2S >> 1))/(NUM_WHEEL_MAG << 1));       //Take average of past 1 second and past 2 seconds
   d40ee:	eb00 0353 	add.w	r3, r0, r3, lsr #1
   d40f2:	fb93 f3f4 	sdiv	r3, r3, r4
   d40f6:	4c06      	ldr	r4, [pc, #24]	; (d4110 <_Z12calculateRPMv+0x38>)
   d40f8:	7023      	strb	r3, [r4, #0]
    pulse_2S = pulse_1S;                             //Reset counters
    pulse_1S = 0;
    revCount += RPS;
   d40fa:	fa51 f383 	uxtab	r3, r1, r3
   d40fe:	6013      	str	r3, [r2, #0]
   d4100:	bd10      	pop	{r4, pc}
   d4102:	bf00      	nop
   d4104:	2003e354 	.word	0x2003e354
   d4108:	2003e2f4 	.word	0x2003e2f4
   d410c:	2003e340 	.word	0x2003e340
   d4110:	2003e370 	.word	0x2003e370

000d4114 <_Z9hallPulsev>:
    Log.trace("Speed: %0.1f",(RPS*0.6322));*/
    
}

void hallPulse(){
    pulse_1S++;
   d4114:	4a04      	ldr	r2, [pc, #16]	; (d4128 <_Z9hallPulsev+0x14>)
   d4116:	8813      	ldrh	r3, [r2, #0]
   d4118:	3301      	adds	r3, #1
   d411a:	8013      	strh	r3, [r2, #0]
    pulse_2S++;
   d411c:	4a03      	ldr	r2, [pc, #12]	; (d412c <_Z9hallPulsev+0x18>)
   d411e:	8813      	ldrh	r3, [r2, #0]
   d4120:	3301      	adds	r3, #1
   d4122:	8013      	strh	r3, [r2, #0]
   d4124:	4770      	bx	lr
   d4126:	bf00      	nop
   d4128:	2003e354 	.word	0x2003e354
   d412c:	2003e2f4 	.word	0x2003e2f4

000d4130 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4130:	6803      	ldr	r3, [r0, #0]
   d4132:	4718      	bx	r3

000d4134 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4134:	2a01      	cmp	r2, #1
   d4136:	d002      	beq.n	d413e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d4138:	2a02      	cmp	r2, #2
   d413a:	d002      	beq.n	d4142 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d413c:	e004      	b.n	d4148 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d413e:	6001      	str	r1, [r0, #0]
	      break;
   d4140:	e002      	b.n	d4148 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4142:	680b      	ldr	r3, [r1, #0]
   d4144:	b100      	cbz	r0, d4148 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d4146:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4148:	2000      	movs	r0, #0
   d414a:	4770      	bx	lr

000d414c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d414c:	6943      	ldr	r3, [r0, #20]
   d414e:	b113      	cbz	r3, d4156 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4150:	6983      	ldr	r3, [r0, #24]
   d4152:	300c      	adds	r0, #12
   d4154:	4718      	bx	r3
   d4156:	4770      	bx	lr

000d4158 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4158:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d415a:	2100      	movs	r1, #0
   d415c:	4604      	mov	r4, r0
   d415e:	4608      	mov	r0, r1
   d4160:	f000 ffe4 	bl	d512c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4164:	a902      	add	r1, sp, #8
   d4166:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4168:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d416a:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d416e:	f000 fff5 	bl	d515c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4172:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4174:	b10c      	cbz	r4, d417a <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4176:	2301      	movs	r3, #1
   d4178:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d417a:	2100      	movs	r1, #0
   d417c:	2001      	movs	r0, #1
   d417e:	f000 ffd5 	bl	d512c <os_thread_scheduling>
            }
        }
        if (t) {
   d4182:	b12c      	cbz	r4, d4190 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4184:	6823      	ldr	r3, [r4, #0]
   d4186:	4620      	mov	r0, r4
   d4188:	689b      	ldr	r3, [r3, #8]
   d418a:	4798      	blx	r3
            t->running = false;
   d418c:	2300      	movs	r3, #0
   d418e:	7123      	strb	r3, [r4, #4]
        }
    }
   d4190:	b002      	add	sp, #8
   d4192:	bd10      	pop	{r4, pc}

000d4194 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4194:	b510      	push	{r4, lr}
   d4196:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4198:	6800      	ldr	r0, [r0, #0]
   d419a:	b108      	cbz	r0, d41a0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d419c:	f001 fa7a 	bl	d5694 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

//Handler for commands sent by app over BLE
static void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {

  // We're only looking for one byte
  if( len != 1 ) {
   d41a4:	2901      	cmp	r1, #1

    timer.start();
}

//Handler for commands sent by app over BLE
static void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d41a6:	b510      	push	{r4, lr}

  // We're only looking for one byte
  if( len != 1 ) {
   d41a8:	d130      	bne.n	d420c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68>
    return;
  }

  //get characteristics from "cloud" characteristic
    if ( context == cloudmode ) {
   d41aa:	4c19      	ldr	r4, [pc, #100]	; (d4210 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c>)
   d41ac:	6824      	ldr	r4, [r4, #0]
   d41ae:	42a3      	cmp	r3, r4
   d41b0:	d128      	bne.n	d4204 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
        switch (data[0])
   d41b2:	7803      	ldrb	r3, [r0, #0]
   d41b4:	2b03      	cmp	r3, #3
   d41b6:	d01a      	beq.n	d41ee <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a>
   d41b8:	d80a      	bhi.n	d41d0 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   d41ba:	2b01      	cmp	r3, #1
   d41bc:	d017      	beq.n	d41ee <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a>
   d41be:	2b02      	cmp	r3, #2
   d41c0:	d120      	bne.n	d4204 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
            RGB.control(false);         //Pass LED control back to system to see status of connection 
            //Cellular.on();              //Turn on cellular
            Particle.connect();         //Connect to device cloud
            break;
        case 2:
            RGB.control(false);
   d41c2:	2000      	movs	r0, #0
   d41c4:	f004 fad1 	bl	d876a <_ZN8RGBClass7controlEb>
            System.dfu();               //Put system in DFU mode
   d41c8:	2000      	movs	r0, #0
   d41ca:	f004 fbc9 	bl	d8960 <_ZN11SystemClass3dfuEb>
   d41ce:	e019      	b.n	d4204 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
    return;
  }

  //get characteristics from "cloud" characteristic
    if ( context == cloudmode ) {
        switch (data[0])
   d41d0:	2b04      	cmp	r3, #4
   d41d2:	d012      	beq.n	d41fa <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x56>
   d41d4:	3b32      	subs	r3, #50	; 0x32
   d41d6:	2b02      	cmp	r3, #2
   d41d8:	d814      	bhi.n	d4204 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
            digitalWrite(D7, HIGH);     //Turn on blue LED to indicate that test-mode is active
            break;
        case 50:
        case 51:
        case 52:
            HLMode = data[0]-50;        //Update Headlight Mode with user selected value
   d41da:	4c0e      	ldr	r4, [pc, #56]	; (d4214 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>)
   d41dc:	6023      	str	r3, [r4, #0]
            EEPROM.put(2,HLMode);       //Save to eeprom to retain the mode across power cycles
   d41de:	f004 fe05 	bl	d8dec <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d41e2:	2204      	movs	r2, #4
   d41e4:	4621      	mov	r1, r4
   d41e6:	2002      	movs	r0, #2
   d41e8:	f001 f828 	bl	d523c <HAL_EEPROM_Put>
   d41ec:	e00a      	b.n	d4204 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
        case 2:
            RGB.control(false);
            System.dfu();               //Put system in DFU mode
            break;
        case 3:
            RGB.control(false);
   d41ee:	2000      	movs	r0, #0
   d41f0:	f004 fabb 	bl	d876a <_ZN8RGBClass7controlEb>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d41f4:	f001 f9d6 	bl	d55a4 <spark_cloud_flag_connect>
   d41f8:	e004      	b.n	d4204 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
            Particle.connect();         //Connect to device cloud over mesh
            break;
        case 4:
            batteryTest = true;         //Enable battery testing 
   d41fa:	4b07      	ldr	r3, [pc, #28]	; (d4218 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
            digitalWrite(D7, HIGH);     //Turn on blue LED to indicate that test-mode is active
   d41fc:	2007      	movs	r0, #7
        case 3:
            RGB.control(false);
            Particle.connect();         //Connect to device cloud over mesh
            break;
        case 4:
            batteryTest = true;         //Enable battery testing 
   d41fe:	7019      	strb	r1, [r3, #0]
            digitalWrite(D7, HIGH);     //Turn on blue LED to indicate that test-mode is active
   d4200:	f004 fdc3 	bl	d8d8a <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4204:	f000 fffa 	bl	d51fc <HAL_Timer_Get_Milli_Seconds>
        default:
            break;
        }

    }
    lastLoopTime = millis();
   d4208:	4b04      	ldr	r3, [pc, #16]	; (d421c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   d420a:	6018      	str	r0, [r3, #0]
   d420c:	bd10      	pop	{r4, pc}
   d420e:	bf00      	nop
   d4210:	2003e208 	.word	0x2003e208
   d4214:	2003e2a8 	.word	0x2003e2a8
   d4218:	2003e320 	.word	0x2003e320
   d421c:	2003e2b8 	.word	0x2003e2b8

000d4220 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4220:	4b0a      	ldr	r3, [pc, #40]	; (d424c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4222:	b510      	push	{r4, lr}
   d4224:	4604      	mov	r4, r0
   d4226:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4228:	f003 fa28 	bl	d767c <_ZN5spark10LogManager8instanceEv>
   d422c:	4621      	mov	r1, r4
   d422e:	f003 fc15 	bl	d7a5c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4232:	f004 fcad 	bl	d8b90 <_Z16_fetch_usbserialv>
   d4236:	f004 fc9f 	bl	d8b78 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d423a:	4620      	mov	r0, r4
   d423c:	4b04      	ldr	r3, [pc, #16]	; (d4250 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d423e:	f840 3b04 	str.w	r3, [r0], #4
   d4242:	f003 fb11 	bl	d7868 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4246:	4620      	mov	r0, r4
   d4248:	bd10      	pop	{r4, pc}
   d424a:	bf00      	nop
   d424c:	000d9d34 	.word	0x000d9d34
   d4250:	000d9d1c 	.word	0x000d9d1c

000d4254 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4254:	b510      	push	{r4, lr}
   d4256:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4258:	f7ff ffe2 	bl	d4220 <_ZN5spark16SerialLogHandlerD1Ev>
   d425c:	4620      	mov	r0, r4
   d425e:	2124      	movs	r1, #36	; 0x24
   d4260:	f004 fe1d 	bl	d8e9e <_ZdlPvj>
   d4264:	4620      	mov	r0, r4
   d4266:	bd10      	pop	{r4, pc}

000d4268 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4268:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d426a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d426c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d426e:	b113      	cbz	r3, d4276 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4270:	2203      	movs	r2, #3
   d4272:	4601      	mov	r1, r0
   d4274:	4798      	blx	r3
    }
   d4276:	4620      	mov	r0, r4
   d4278:	bd10      	pop	{r4, pc}

000d427a <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d427a:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d427c:	6880      	ldr	r0, [r0, #8]
   d427e:	2300      	movs	r3, #0
   d4280:	b138      	cbz	r0, d4292 <_ZN5Timer5_stopEjb+0x18>
   d4282:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4286:	2102      	movs	r1, #2
   d4288:	f000 ff70 	bl	d516c <os_timer_change>
   d428c:	fab0 f080 	clz	r0, r0
   d4290:	0940      	lsrs	r0, r0, #5
    }
   d4292:	b003      	add	sp, #12
   d4294:	f85d fb04 	ldr.w	pc, [sp], #4

000d4298 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4298:	b538      	push	{r3, r4, r5, lr}
   d429a:	4b10      	ldr	r3, [pc, #64]	; (d42dc <_ZN5TimerD1Ev+0x44>)
   d429c:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d429e:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d42a0:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d42a2:	b1a3      	cbz	r3, d42ce <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d42a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d42a8:	2200      	movs	r2, #0
   d42aa:	f7ff ffe6 	bl	d427a <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d42ae:	2100      	movs	r1, #0
   d42b0:	68a0      	ldr	r0, [r4, #8]
   d42b2:	f000 ff83 	bl	d51bc <os_timer_set_id>
            while (running) {
   d42b6:	7923      	ldrb	r3, [r4, #4]
   d42b8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42bc:	b113      	cbz	r3, d42c4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d42be:	f000 ff1d 	bl	d50fc <os_thread_yield>
   d42c2:	e7f8      	b.n	d42b6 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d42c4:	4629      	mov	r1, r5
   d42c6:	68a0      	ldr	r0, [r4, #8]
   d42c8:	f000 ff40 	bl	d514c <os_timer_destroy>
            handle = nullptr;
   d42cc:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d42ce:	f104 000c 	add.w	r0, r4, #12
   d42d2:	f7ff ffc9 	bl	d4268 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d42d6:	4620      	mov	r0, r4
   d42d8:	bd38      	pop	{r3, r4, r5, pc}
   d42da:	bf00      	nop
   d42dc:	000d9d08 	.word	0x000d9d08

000d42e0 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d42e0:	b510      	push	{r4, lr}
   d42e2:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d42e4:	f7ff ffd8 	bl	d4298 <_ZN5TimerD1Ev>
   d42e8:	4620      	mov	r0, r4
   d42ea:	211c      	movs	r1, #28
   d42ec:	f004 fdd7 	bl	d8e9e <_ZdlPvj>
   d42f0:	4620      	mov	r0, r4
   d42f2:	bd10      	pop	{r4, pc}
   d42f4:	0000      	movs	r0, r0
	...

000d42f8 <setup>:

Timer timer(1000, calculateRPM);

void setup() {

    mAH_consumption = 0;                            //Initialize mAH consumption counter
   d42f8:	4ad1      	ldr	r2, [pc, #836]	; (d4640 <setup+0x348>)
   d42fa:	2300      	movs	r3, #0
BleCharacteristic odolvlCharacteristic  ("odolvl",     BleCharacteristicProperty::NOTIFY, odolvl, SkateInfoService);    
BleCharacteristic modeCharacteristic    ("cloudmode",  BleCharacteristicProperty::WRITE_WO_RSP, cloudmode, serviceUuid, onDataReceived, (void*)cloudmode);

Timer timer(1000, calculateRPM);

void setup() {
   d42fc:	b5f0      	push	{r4, r5, r6, r7, lr}

    mAH_consumption = 0;                            //Initialize mAH consumption counter
   d42fe:	6013      	str	r3, [r2, #0]
    mAH_TP = 0;                                     //Initialize mAH test-point counter
   d4300:	4ad0      	ldr	r2, [pc, #832]	; (d4644 <setup+0x34c>)
   d4302:	6013      	str	r3, [r2, #0]
    lastLoopTime = 0;                               //Initialize integration timer
   d4304:	4bd0      	ldr	r3, [pc, #832]	; (d4648 <setup+0x350>)
   d4306:	2500      	movs	r5, #0
   d4308:	601d      	str	r5, [r3, #0]
    
    pulse_1S = 0;                                   //Reset hall pulse sensors
   d430a:	4bd0      	ldr	r3, [pc, #832]	; (d464c <setup+0x354>)
   d430c:	801d      	strh	r5, [r3, #0]
    pulse_2S = 0;
   d430e:	4bd0      	ldr	r3, [pc, #832]	; (d4650 <setup+0x358>)
   d4310:	801d      	strh	r5, [r3, #0]
    RPS = 0;
   d4312:	4bd0      	ldr	r3, [pc, #832]	; (d4654 <setup+0x35c>)
   d4314:	701d      	strb	r5, [r3, #0]
    revCount = 0;
   d4316:	4bd0      	ldr	r3, [pc, #832]	; (d4658 <setup+0x360>)
BleCharacteristic odolvlCharacteristic  ("odolvl",     BleCharacteristicProperty::NOTIFY, odolvl, SkateInfoService);    
BleCharacteristic modeCharacteristic    ("cloudmode",  BleCharacteristicProperty::WRITE_WO_RSP, cloudmode, serviceUuid, onDataReceived, (void*)cloudmode);

Timer timer(1000, calculateRPM);

void setup() {
   d4318:	b099      	sub	sp, #100	; 0x64
    revCount = 0;

    BLE.selectAntenna(BleAntennaType::INTERNAL);    //Set to internal ceramic antenna
    BLE.setScanTimeout(100);                        //Timeout of 1 second

    EEPROM.put(1, 2);                               //Manually Set Battery Count
   d431a:	ac18      	add	r4, sp, #96	; 0x60
    lastLoopTime = 0;                               //Initialize integration timer
    
    pulse_1S = 0;                                   //Reset hall pulse sensors
    pulse_2S = 0;
    RPS = 0;
    revCount = 0;
   d431c:	601d      	str	r5, [r3, #0]

    BLE.selectAntenna(BleAntennaType::INTERNAL);    //Set to internal ceramic antenna
   d431e:	f001 fd21 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4322:	2101      	movs	r1, #1
   d4324:	f001 fd64 	bl	d5df0 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.setScanTimeout(100);                        //Timeout of 1 second

    EEPROM.put(1, 2);                               //Manually Set Battery Count
   d4328:	2602      	movs	r6, #2
    pulse_2S = 0;
    RPS = 0;
    revCount = 0;

    BLE.selectAntenna(BleAntennaType::INTERNAL);    //Set to internal ceramic antenna
    BLE.setScanTimeout(100);                        //Timeout of 1 second
   d432a:	f001 fd1b 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d432e:	2164      	movs	r1, #100	; 0x64
   d4330:	f001 fda6 	bl	d5e80 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>

    EEPROM.put(1, 2);                               //Manually Set Battery Count
   d4334:	f004 fd5a 	bl	d8dec <_Z21__fetch_global_EEPROMv>
   d4338:	f844 6d24 	str.w	r6, [r4, #-36]!
   d433c:	2204      	movs	r2, #4
   d433e:	4621      	mov	r1, r4
   d4340:	2001      	movs	r0, #1
   d4342:	f000 ff7b 	bl	d523c <HAL_EEPROM_Put>
    EEPROM.get(1, numBatts);
   d4346:	f004 fd51 	bl	d8dec <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d434a:	2204      	movs	r2, #4
   d434c:	49c3      	ldr	r1, [pc, #780]	; (d465c <setup+0x364>)
   d434e:	2001      	movs	r0, #1
   d4350:	f000 ff6c 	bl	d522c <HAL_EEPROM_Get>
    EEPROM.put(2, 0);                               //Manually Set Headlight Mode
   d4354:	f004 fd4a 	bl	d8dec <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4358:	2204      	movs	r2, #4
   d435a:	4621      	mov	r1, r4
   d435c:	4630      	mov	r0, r6
   d435e:	950f      	str	r5, [sp, #60]	; 0x3c
   d4360:	f000 ff6c 	bl	d523c <HAL_EEPROM_Put>
    EEPROM.get(2, HLMode);                          //Retrieve last-set headlight mode
   d4364:	f004 fd42 	bl	d8dec <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4368:	2204      	movs	r2, #4
   d436a:	49bd      	ldr	r1, [pc, #756]	; (d4660 <setup+0x368>)
   d436c:	4630      	mov	r0, r6
   d436e:	f000 ff5d 	bl	d522c <HAL_EEPROM_Get>

    uint8_t od0,od1,od2,od3;
    odoSaveTime = 0;
   d4372:	4bbc      	ldr	r3, [pc, #752]	; (d4664 <setup+0x36c>)
   d4374:	601d      	str	r5, [r3, #0]

    EEPROM.get(ODO_EEPROM, od3);
   d4376:	f004 fd39 	bl	d8dec <_Z21__fetch_global_EEPROMv>
   d437a:	2201      	movs	r2, #1
   d437c:	f10d 0111 	add.w	r1, sp, #17
   d4380:	2028      	movs	r0, #40	; 0x28
   d4382:	f000 ff53 	bl	d522c <HAL_EEPROM_Get>
    EEPROM.get(ODO_EEPROM+1, od2);
   d4386:	f004 fd31 	bl	d8dec <_Z21__fetch_global_EEPROMv>
   d438a:	2201      	movs	r2, #1
   d438c:	a904      	add	r1, sp, #16
   d438e:	2029      	movs	r0, #41	; 0x29
   d4390:	f000 ff4c 	bl	d522c <HAL_EEPROM_Get>
    EEPROM.get(ODO_EEPROM+2, od1);
   d4394:	f004 fd2a 	bl	d8dec <_Z21__fetch_global_EEPROMv>
   d4398:	2201      	movs	r2, #1
   d439a:	f10d 010f 	add.w	r1, sp, #15
   d439e:	202a      	movs	r0, #42	; 0x2a
   d43a0:	f000 ff44 	bl	d522c <HAL_EEPROM_Get>
    EEPROM.get(ODO_EEPROM+3, od0);
   d43a4:	f004 fd22 	bl	d8dec <_Z21__fetch_global_EEPROMv>
   d43a8:	f10d 010e 	add.w	r1, sp, #14
   d43ac:	2201      	movs	r2, #1
   d43ae:	202b      	movs	r0, #43	; 0x2b
   d43b0:	f000 ff3c 	bl	d522c <HAL_EEPROM_Get>
    odoMile = (od3 << 24) + (od2 << 16) + (od1 << 8) + od0;
   d43b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d43b8:	f89d 2011 	ldrb.w	r2, [sp, #17]
   d43bc:	041b      	lsls	r3, r3, #16
   d43be:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d43c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d43c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43ca:	f89d 200e 	ldrb.w	r2, [sp, #14]
   d43ce:	4413      	add	r3, r2
   d43d0:	4aa5      	ldr	r2, [pc, #660]	; (d4668 <setup+0x370>)

    RGB.control(true);                              //Enable control of built-in RGB LED
   d43d2:	2001      	movs	r0, #1

    EEPROM.get(ODO_EEPROM, od3);
    EEPROM.get(ODO_EEPROM+1, od2);
    EEPROM.get(ODO_EEPROM+2, od1);
    EEPROM.get(ODO_EEPROM+3, od0);
    odoMile = (od3 << 24) + (od2 << 16) + (od1 << 8) + od0;
   d43d4:	6013      	str	r3, [r2, #0]

    RGB.control(true);                              //Enable control of built-in RGB LED
   d43d6:	f004 f9c8 	bl	d876a <_ZN8RGBClass7controlEb>
    RGB.color(100, 0, 0);                           //Set to Red initially
   d43da:	462a      	mov	r2, r5
   d43dc:	4629      	mov	r1, r5
   d43de:	2064      	movs	r0, #100	; 0x64
   d43e0:	f004 f9d3 	bl	d878a <_ZN8RGBClass5colorEiii>
                          
    pinMode(D4, INPUT_PULLUP);
   d43e4:	4631      	mov	r1, r6
   d43e6:	2004      	movs	r0, #4
   d43e8:	f004 fcbe 	bl	d8d68 <pinMode>
    pinMode(D6, OUTPUT);                            //Configure pin for thermistor power
   d43ec:	2101      	movs	r1, #1
   d43ee:	2006      	movs	r0, #6
   d43f0:	f004 fcba 	bl	d8d68 <pinMode>
    pinMode(D7, OUTPUT);                            //Configure pin for blue indicator LED
   d43f4:	2101      	movs	r1, #1
   d43f6:	2007      	movs	r0, #7
   d43f8:	f004 fcb6 	bl	d8d68 <pinMode>
    delay(100);
   d43fc:	2064      	movs	r0, #100	; 0x64
   d43fe:	f001 f971 	bl	d56e4 <delay>

    digitalWrite(D6,HIGH);                          //Turn on thermistor sensor power
   d4402:	2101      	movs	r1, #1
   d4404:	2006      	movs	r0, #6
   d4406:	f004 fcc0 	bl	d8d8a <digitalWrite>

    attachInterrupt(D4, hallPulse, FALLING);         //Configure interrupt for hall RPM sensor
   d440a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d440e:	4632      	mov	r2, r6
   d4410:	4996      	ldr	r1, [pc, #600]	; (d466c <setup+0x374>)
   d4412:	9500      	str	r5, [sp, #0]
   d4414:	2004      	movs	r0, #4
   d4416:	f002 fd97 	bl	d6f48 <_Z15attachInterrupttPFvvE13InterruptModeah>

    // Add the characteristics
    BLE.addCharacteristic(modeCharacteristic);
   d441a:	f001 fca3 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d441e:	4a94      	ldr	r2, [pc, #592]	; (d4670 <setup+0x378>)
   d4420:	4601      	mov	r1, r0
   d4422:	4620      	mov	r0, r4
   d4424:	f002 f920 	bl	d6668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4428:	4620      	mov	r0, r4
   d442a:	f001 fd79 	bl	d5f20 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(bttlvlCharacteristic);   
   d442e:	f001 fc99 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4432:	4a90      	ldr	r2, [pc, #576]	; (d4674 <setup+0x37c>)
   d4434:	4601      	mov	r1, r0
   d4436:	4620      	mov	r0, r4
   d4438:	f002 f916 	bl	d6668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d443c:	4620      	mov	r0, r4
   d443e:	f001 fd6f 	bl	d5f20 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(currlvlCharacteristic);
   d4442:	f001 fc8f 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4446:	4a8c      	ldr	r2, [pc, #560]	; (d4678 <setup+0x380>)
   d4448:	4601      	mov	r1, r0
   d444a:	4620      	mov	r0, r4
   d444c:	f002 f90c 	bl	d6668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4450:	4620      	mov	r0, r4
   d4452:	f001 fd65 	bl	d5f20 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(estpctCharacteristic);
   d4456:	f001 fc85 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d445a:	4a88      	ldr	r2, [pc, #544]	; (d467c <setup+0x384>)
   d445c:	4601      	mov	r1, r0
   d445e:	4620      	mov	r0, r4
   d4460:	f002 f902 	bl	d6668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4464:	4620      	mov	r0, r4
   d4466:	f001 fd5b 	bl	d5f20 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(enconsCharacteristic);
   d446a:	f001 fc7b 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d446e:	4a84      	ldr	r2, [pc, #528]	; (d4680 <setup+0x388>)
   d4470:	4601      	mov	r1, r0
   d4472:	4620      	mov	r0, r4
   d4474:	f002 f8f8 	bl	d6668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4478:	4620      	mov	r0, r4
   d447a:	f001 fd51 	bl	d5f20 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(templvlCharacteristic);
   d447e:	f001 fc71 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4482:	4a80      	ldr	r2, [pc, #512]	; (d4684 <setup+0x38c>)
   d4484:	4601      	mov	r1, r0
   d4486:	4620      	mov	r0, r4
   d4488:	f002 f8ee 	bl	d6668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d448c:	4620      	mov	r0, r4
   d448e:	f001 fd47 	bl	d5f20 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rpmlvlCharacteristic);
   d4492:	f001 fc67 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4496:	4a7c      	ldr	r2, [pc, #496]	; (d4688 <setup+0x390>)
   d4498:	4601      	mov	r1, r0
   d449a:	4620      	mov	r0, r4
   d449c:	f002 f8e4 	bl	d6668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44a0:	4620      	mov	r0, r4
   d44a2:	f001 fd3d 	bl	d5f20 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(trplvlCharacteristic);
   d44a6:	f001 fc5d 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44aa:	4a78      	ldr	r2, [pc, #480]	; (d468c <setup+0x394>)
   d44ac:	4601      	mov	r1, r0
   d44ae:	4620      	mov	r0, r4
   d44b0:	f002 f8da 	bl	d6668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44b4:	4620      	mov	r0, r4
   d44b6:	f001 fd33 	bl	d5f20 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(odolvlCharacteristic);
   d44ba:	f001 fc53 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44be:	4a74      	ldr	r2, [pc, #464]	; (d4690 <setup+0x398>)
   d44c0:	4601      	mov	r1, r0
   d44c2:	4620      	mov	r0, r4
   d44c4:	f002 f8d0 	bl	d6668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44c8:	4620      	mov	r0, r4
   d44ca:	f001 fd29 	bl	d5f20 <_ZN8particle17BleCharacteristicD1Ev>

    BleAdvertisingData advData;                     //Advertising data
   d44ce:	4620      	mov	r0, r4
   d44d0:	f001 fb1c 	bl	d5b0c <_ZN8particle18BleAdvertisingDataC1Ev>
    
    advData.appendServiceUUID(SkateInfoService);    // Add the app service
   d44d4:	496f      	ldr	r1, [pc, #444]	; (d4694 <setup+0x39c>)
   d44d6:	a805      	add	r0, sp, #20
   d44d8:	f001 f9b0 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d44dc:	a905      	add	r1, sp, #20
   d44de:	a80a      	add	r0, sp, #40	; 0x28
   d44e0:	f001 f9ac 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d44e4:	a80a      	add	r0, sp, #40	; 0x28
   d44e6:	f001 f9f3 	bl	d58d0 <_ZNK8particle7BleUuid4typeEv>
   d44ea:	4607      	mov	r7, r0
            uint16_t uuid16 = tempUUID.shorted();
   d44ec:	a80a      	add	r0, sp, #40	; 0x28
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d44ee:	b947      	cbnz	r7, d4502 <setup+0x20a>
            uint16_t uuid16 = tempUUID.shorted();
   d44f0:	f001 fa0c 	bl	d590c <_ZNK8particle7BleUuid7shortedEv>
   d44f4:	aa18      	add	r2, sp, #96	; 0x60
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d44f6:	4633      	mov	r3, r6

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d44f8:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d44fc:	2103      	movs	r1, #3
   d44fe:	9700      	str	r7, [sp, #0]
   d4500:	e005      	b.n	d450e <setup+0x216>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4502:	f001 fa08 	bl	d5916 <_ZNK8particle7BleUuid8rawBytesEv>
   d4506:	9500      	str	r5, [sp, #0]
   d4508:	2310      	movs	r3, #16
   d450a:	4602      	mov	r2, r0
   d450c:	2107      	movs	r1, #7
   d450e:	4620      	mov	r0, r4
   d4510:	f001 fab5 	bl	d5a7e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendLocalName("SK01");                //Local advertising name
   d4514:	4960      	ldr	r1, [pc, #384]	; (d4698 <setup+0x3a0>)
   d4516:	4620      	mov	r0, r4
   d4518:	f001 fb12 	bl	d5b40 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    BLE.advertise(&advData);                        //Start advertising the characteristics
   d451c:	f001 fc22 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4520:	4621      	mov	r1, r4
   d4522:	2200      	movs	r2, #0
   d4524:	4c5d      	ldr	r4, [pc, #372]	; (d469c <setup+0x3a4>)
   d4526:	f001 fc8e 	bl	d5e46 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>

    while(!BLE.connected() && analogRead(A0) < 200){//Loop to blink the RGB LED until a device has connected
        for(i = 0; i <= 100; i+=5){
   d452a:	4627      	mov	r7, r4
    
    advData.appendServiceUUID(SkateInfoService);    // Add the app service
    advData.appendLocalName("SK01");                //Local advertising name
    BLE.advertise(&advData);                        //Start advertising the characteristics

    while(!BLE.connected() && analogRead(A0) < 200){//Loop to blink the RGB LED until a device has connected
   d452c:	f001 fc1a 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4530:	f001 fcc4 	bl	d5ebc <_ZNK8particle14BleLocalDevice9connectedEv>
   d4534:	4d59      	ldr	r5, [pc, #356]	; (d469c <setup+0x3a4>)
   d4536:	4606      	mov	r6, r0
   d4538:	bb50      	cbnz	r0, d4590 <setup+0x298>
   d453a:	2013      	movs	r0, #19
   d453c:	f004 fc3e 	bl	d8dbc <analogRead>
   d4540:	28c7      	cmp	r0, #199	; 0xc7
   d4542:	dc25      	bgt.n	d4590 <setup+0x298>
        for(i = 0; i <= 100; i+=5){
   d4544:	6026      	str	r6, [r4, #0]
   d4546:	6820      	ldr	r0, [r4, #0]
   d4548:	2864      	cmp	r0, #100	; 0x64
   d454a:	dc0a      	bgt.n	d4562 <setup+0x26a>
            RGB.color(i, 0, 0);
   d454c:	2200      	movs	r2, #0
   d454e:	4611      	mov	r1, r2
   d4550:	f004 f91b 	bl	d878a <_ZN8RGBClass5colorEiii>
            delay(20);
   d4554:	2014      	movs	r0, #20
   d4556:	f001 f8c5 	bl	d56e4 <delay>
    advData.appendServiceUUID(SkateInfoService);    // Add the app service
    advData.appendLocalName("SK01");                //Local advertising name
    BLE.advertise(&advData);                        //Start advertising the characteristics

    while(!BLE.connected() && analogRead(A0) < 200){//Loop to blink the RGB LED until a device has connected
        for(i = 0; i <= 100; i+=5){
   d455a:	6823      	ldr	r3, [r4, #0]
   d455c:	3305      	adds	r3, #5
   d455e:	6023      	str	r3, [r4, #0]
   d4560:	e7f1      	b.n	d4546 <setup+0x24e>
            RGB.color(i, 0, 0);
            delay(20);
        }
        delay(75);
   d4562:	204b      	movs	r0, #75	; 0x4b
   d4564:	f001 f8be 	bl	d56e4 <delay>
        for(i = 100; i>= 0; i-=5){
   d4568:	2364      	movs	r3, #100	; 0x64
   d456a:	603b      	str	r3, [r7, #0]
   d456c:	6820      	ldr	r0, [r4, #0]
   d456e:	2800      	cmp	r0, #0
   d4570:	db0a      	blt.n	d4588 <setup+0x290>
            RGB.color(i, 0, 0);
   d4572:	2200      	movs	r2, #0
   d4574:	4611      	mov	r1, r2
   d4576:	f004 f908 	bl	d878a <_ZN8RGBClass5colorEiii>
            delay(20);
   d457a:	2014      	movs	r0, #20
   d457c:	f001 f8b2 	bl	d56e4 <delay>
        for(i = 0; i <= 100; i+=5){
            RGB.color(i, 0, 0);
            delay(20);
        }
        delay(75);
        for(i = 100; i>= 0; i-=5){
   d4580:	6823      	ldr	r3, [r4, #0]
   d4582:	3b05      	subs	r3, #5
   d4584:	6023      	str	r3, [r4, #0]
   d4586:	e7f1      	b.n	d456c <setup+0x274>
            RGB.color(i, 0, 0);
            delay(20);
        }
        delay(75);
   d4588:	204b      	movs	r0, #75	; 0x4b
   d458a:	f001 f8ab 	bl	d56e4 <delay>
    
    advData.appendServiceUUID(SkateInfoService);    // Add the app service
    advData.appendLocalName("SK01");                //Local advertising name
    BLE.advertise(&advData);                        //Start advertising the characteristics

    while(!BLE.connected() && analogRead(A0) < 200){//Loop to blink the RGB LED until a device has connected
   d458e:	e7cd      	b.n	d452c <setup+0x234>
        }
        delay(75);
    }

    //Initial battery percentage calculation
    battPercent = (((analogRead(A1)+45)*1000/93.89)-34000)/70;
   d4590:	2012      	movs	r0, #18
   d4592:	f004 fc13 	bl	d8dbc <analogRead>
   d4596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d459a:	302d      	adds	r0, #45	; 0x2d
   d459c:	4358      	muls	r0, r3
   d459e:	f004 ff37 	bl	d9410 <__aeabi_i2d>
   d45a2:	a323      	add	r3, pc, #140	; (adr r3, d4630 <setup+0x338>)
   d45a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45a8:	f005 f8c2 	bl	d9730 <__aeabi_ddiv>
   d45ac:	a322      	add	r3, pc, #136	; (adr r3, d4638 <setup+0x340>)
   d45ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45b2:	f004 fddf 	bl	d9174 <__aeabi_dsub>
   d45b6:	4b3a      	ldr	r3, [pc, #232]	; (d46a0 <setup+0x3a8>)
   d45b8:	4c3a      	ldr	r4, [pc, #232]	; (d46a4 <setup+0x3ac>)
    
    //Fade into new LED percentage approximation
    for(i = 0; i< 100; i+=5){
   d45ba:	4f38      	ldr	r7, [pc, #224]	; (d469c <setup+0x3a4>)
        }
        delay(75);
    }

    //Initial battery percentage calculation
    battPercent = (((analogRead(A1)+45)*1000/93.89)-34000)/70;
   d45bc:	2200      	movs	r2, #0
   d45be:	f005 f8b7 	bl	d9730 <__aeabi_ddiv>
   d45c2:	f005 f99d 	bl	d9900 <__aeabi_d2iz>
    
    //Fade into new LED percentage approximation
    for(i = 0; i< 100; i+=5){
   d45c6:	2300      	movs	r3, #0
        }
        delay(75);
    }

    //Initial battery percentage calculation
    battPercent = (((analogRead(A1)+45)*1000/93.89)-34000)/70;
   d45c8:	6020      	str	r0, [r4, #0]
    
    //Fade into new LED percentage approximation
    for(i = 0; i< 100; i+=5){
   d45ca:	602b      	str	r3, [r5, #0]
        RGB.color(i*(100-battPercent)/100, i*battPercent/100, 0);
   d45cc:	2664      	movs	r6, #100	; 0x64

    //Initial battery percentage calculation
    battPercent = (((analogRead(A1)+45)*1000/93.89)-34000)/70;
    
    //Fade into new LED percentage approximation
    for(i = 0; i< 100; i+=5){
   d45ce:	682b      	ldr	r3, [r5, #0]
   d45d0:	2b63      	cmp	r3, #99	; 0x63
   d45d2:	dc13      	bgt.n	d45fc <setup+0x304>
        RGB.color(i*(100-battPercent)/100, i*battPercent/100, 0);
   d45d4:	6820      	ldr	r0, [r4, #0]
   d45d6:	fb00 f103 	mul.w	r1, r0, r3
   d45da:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
   d45de:	4358      	muls	r0, r3
   d45e0:	2200      	movs	r2, #0
   d45e2:	fb91 f1f6 	sdiv	r1, r1, r6
   d45e6:	fb90 f0f6 	sdiv	r0, r0, r6
   d45ea:	f004 f8ce 	bl	d878a <_ZN8RGBClass5colorEiii>
        delay(20);
   d45ee:	2014      	movs	r0, #20
   d45f0:	f001 f878 	bl	d56e4 <delay>

    //Initial battery percentage calculation
    battPercent = (((analogRead(A1)+45)*1000/93.89)-34000)/70;
    
    //Fade into new LED percentage approximation
    for(i = 0; i< 100; i+=5){
   d45f4:	683b      	ldr	r3, [r7, #0]
   d45f6:	3305      	adds	r3, #5
   d45f8:	603b      	str	r3, [r7, #0]
   d45fa:	e7e8      	b.n	d45ce <setup+0x2d6>
   d45fc:	f000 fdfe 	bl	d51fc <HAL_Timer_Get_Milli_Seconds>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4600:	4c29      	ldr	r4, [pc, #164]	; (d46a8 <setup+0x3b0>)
        RGB.color(i*(100-battPercent)/100, i*battPercent/100, 0);
        delay(20);
    }
    nextPollTime = millis();
   d4602:	4b2a      	ldr	r3, [pc, #168]	; (d46ac <setup+0x3b4>)
   d4604:	2200      	movs	r2, #0
   d4606:	6018      	str	r0, [r3, #0]
   d4608:	4611      	mov	r1, r2
   d460a:	4620      	mov	r0, r4
   d460c:	f7ff fe35 	bl	d427a <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4610:	68a0      	ldr	r0, [r4, #8]
   d4612:	b140      	cbz	r0, d4626 <setup+0x32e>
   d4614:	2300      	movs	r3, #0
   d4616:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d461a:	e88d 000c 	stmia.w	sp, {r2, r3}
   d461e:	4619      	mov	r1, r3
   d4620:	461a      	mov	r2, r3
   d4622:	f000 fda3 	bl	d516c <os_timer_change>
    //hallPollTime = millis();

    timer.start();
}
   d4626:	b019      	add	sp, #100	; 0x64
   d4628:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d462a:	bf00      	nop
   d462c:	f3af 8000 	nop.w
   d4630:	c28f5c29 	.word	0xc28f5c29
   d4634:	405778f5 	.word	0x405778f5
   d4638:	00000000 	.word	0x00000000
   d463c:	40e09a00 	.word	0x40e09a00
   d4640:	2003e360 	.word	0x2003e360
   d4644:	2003e358 	.word	0x2003e358
   d4648:	2003e2b8 	.word	0x2003e2b8
   d464c:	2003e354 	.word	0x2003e354
   d4650:	2003e2f4 	.word	0x2003e2f4
   d4654:	2003e370 	.word	0x2003e370
   d4658:	2003e340 	.word	0x2003e340
   d465c:	2003e31c 	.word	0x2003e31c
   d4660:	2003e2a8 	.word	0x2003e2a8
   d4664:	2003e318 	.word	0x2003e318
   d4668:	2003e2c0 	.word	0x2003e2c0
   d466c:	000d4115 	.word	0x000d4115
   d4670:	2003e34c 	.word	0x2003e34c
   d4674:	2003e368 	.word	0x2003e368
   d4678:	2003e378 	.word	0x2003e378
   d467c:	2003e2ec 	.word	0x2003e2ec
   d4680:	2003e344 	.word	0x2003e344
   d4684:	2003e338 	.word	0x2003e338
   d4688:	2003e384 	.word	0x2003e384
   d468c:	2003e2ac 	.word	0x2003e2ac
   d4690:	2003e2a0 	.word	0x2003e2a0
   d4694:	2003e28c 	.word	0x2003e28c
   d4698:	000d9d44 	.word	0x000d9d44
   d469c:	2003e334 	.word	0x2003e334
   d46a0:	40518000 	.word	0x40518000
   d46a4:	2003e314 	.word	0x2003e314
   d46a8:	2003e2f8 	.word	0x2003e2f8
   d46ac:	2003e374 	.word	0x2003e374

000d46b0 <_Z11publishTesti>:
void hallPulse(){
    pulse_1S++;
    pulse_2S++;
}

void publishTest(int dataValue) {
   d46b0:	b510      	push	{r4, lr}
   d46b2:	b088      	sub	sp, #32
    Particle.publish("sheetTest1",String::format("%d", dataValue),PRIVATE);
   d46b4:	4602      	mov	r2, r0
   d46b6:	4912      	ldr	r1, [pc, #72]	; (d4700 <_Z11publishTesti+0x50>)
   d46b8:	a804      	add	r0, sp, #16
   d46ba:	f004 f929 	bl	d8910 <_ZN6String6formatEPKcz>
   d46be:	4b11      	ldr	r3, [pc, #68]	; (d4704 <_Z11publishTesti+0x54>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d46c0:	9a04      	ldr	r2, [sp, #16]
   d46c2:	781b      	ldrb	r3, [r3, #0]
   d46c4:	f88d 3000 	strb.w	r3, [sp]
   d46c8:	490f      	ldr	r1, [pc, #60]	; (d4708 <_Z11publishTesti+0x58>)
   d46ca:	233c      	movs	r3, #60	; 0x3c
   d46cc:	a802      	add	r0, sp, #8
   d46ce:	f002 fa37 	bl	d6b40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d46d2:	9c03      	ldr	r4, [sp, #12]
   d46d4:	b17c      	cbz	r4, d46f6 <_Z11publishTesti+0x46>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d46d6:	6863      	ldr	r3, [r4, #4]
   d46d8:	3b01      	subs	r3, #1
   d46da:	6063      	str	r3, [r4, #4]
   d46dc:	b95b      	cbnz	r3, d46f6 <_Z11publishTesti+0x46>
        {
          _M_dispose();
   d46de:	6823      	ldr	r3, [r4, #0]
   d46e0:	4620      	mov	r0, r4
   d46e2:	689b      	ldr	r3, [r3, #8]
   d46e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46e6:	68a3      	ldr	r3, [r4, #8]
   d46e8:	3b01      	subs	r3, #1
   d46ea:	60a3      	str	r3, [r4, #8]
   d46ec:	b91b      	cbnz	r3, d46f6 <_Z11publishTesti+0x46>
            _M_destroy();
   d46ee:	6823      	ldr	r3, [r4, #0]
   d46f0:	4620      	mov	r0, r4
   d46f2:	68db      	ldr	r3, [r3, #12]
   d46f4:	4798      	blx	r3
   d46f6:	a804      	add	r0, sp, #16
   d46f8:	f004 f885 	bl	d8806 <_ZN6StringD1Ev>
}  
   d46fc:	b008      	add	sp, #32
   d46fe:	bd10      	pop	{r4, pc}
   d4700:	000d9d49 	.word	0x000d9d49
   d4704:	2003e2e8 	.word	0x2003e2e8
   d4708:	000d9d4c 	.word	0x000d9d4c

000d470c <_Z8writeOdov>:

void writeOdo(){
   d470c:	b510      	push	{r4, lr}
    odoSave = odoMile;
   d470e:	4c12      	ldr	r4, [pc, #72]	; (d4758 <_Z8writeOdov+0x4c>)
   d4710:	4b12      	ldr	r3, [pc, #72]	; (d475c <_Z8writeOdov+0x50>)
   d4712:	6822      	ldr	r2, [r4, #0]
   d4714:	601a      	str	r2, [r3, #0]
   d4716:	f000 fd71 	bl	d51fc <HAL_Timer_Get_Milli_Seconds>
    odoSaveTime = millis();
   d471a:	4b11      	ldr	r3, [pc, #68]	; (d4760 <_Z8writeOdov+0x54>)
    uint8_t od0, od1, od2, od3;
    od3 = odoMile >> 24;
   d471c:	6824      	ldr	r4, [r4, #0]
    Particle.publish("sheetTest1",String::format("%d", dataValue),PRIVATE);
}  

void writeOdo(){
    odoSave = odoMile;
    odoSaveTime = millis();
   d471e:	6018      	str	r0, [r3, #0]
    uint8_t od0, od1, od2, od3;
    od3 = odoMile >> 24;
    od2 = (odoMile >> 16) & 255;
    od1 = (odoMile >> 8) & 255;
    od0 = odoMile & 255;
    EEPROM.write(ODO_EEPROM, od3);
   d4720:	f004 fb64 	bl	d8dec <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4724:	0e21      	lsrs	r1, r4, #24
   d4726:	2028      	movs	r0, #40	; 0x28
   d4728:	f000 fd78 	bl	d521c <HAL_EEPROM_Write>
    EEPROM.write(ODO_EEPROM + 1, od2);
   d472c:	f004 fb5e 	bl	d8dec <_Z21__fetch_global_EEPROMv>
   d4730:	f3c4 4107 	ubfx	r1, r4, #16, #8
   d4734:	2029      	movs	r0, #41	; 0x29
   d4736:	f000 fd71 	bl	d521c <HAL_EEPROM_Write>
    EEPROM.write(ODO_EEPROM + 2, od1);
   d473a:	f004 fb57 	bl	d8dec <_Z21__fetch_global_EEPROMv>
   d473e:	f3c4 2107 	ubfx	r1, r4, #8, #8
   d4742:	202a      	movs	r0, #42	; 0x2a
   d4744:	f000 fd6a 	bl	d521c <HAL_EEPROM_Write>
    EEPROM.write(ODO_EEPROM + 3, od0);
   d4748:	f004 fb50 	bl	d8dec <_Z21__fetch_global_EEPROMv>
   d474c:	b2e1      	uxtb	r1, r4
   d474e:	202b      	movs	r0, #43	; 0x2b
}
   d4750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4754:	f000 bd62 	b.w	d521c <HAL_EEPROM_Write>
   d4758:	2003e2c0 	.word	0x2003e2c0
   d475c:	2003e380 	.word	0x2003e380
   d4760:	2003e318 	.word	0x2003e318

000d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4764:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4766:	6804      	ldr	r4, [r0, #0]
   d4768:	6843      	ldr	r3, [r0, #4]
   d476a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d476c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d476e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4772:	42a6      	cmp	r6, r4
   d4774:	d004      	beq.n	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4776:	4620      	mov	r0, r4
   d4778:	f004 f845 	bl	d8806 <_ZN6StringD1Ev>
   d477c:	3414      	adds	r4, #20
   d477e:	e7f8      	b.n	d4772 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4780:	6828      	ldr	r0, [r5, #0]
   d4782:	f000 ff87 	bl	d5694 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4786:	4628      	mov	r0, r5
   d4788:	bd70      	pop	{r4, r5, r6, pc}

000d478a <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d478a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d478c:	460e      	mov	r6, r1
   d478e:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4790:	2100      	movs	r1, #0
   d4792:	4604      	mov	r4, r0
   d4794:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4796:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4798:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d479a:	4619      	mov	r1, r3
   d479c:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d479e:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d47a0:	f001 f94a 	bl	d5a38 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d47a4:	9916      	ldr	r1, [sp, #88]	; 0x58
   d47a6:	4628      	mov	r0, r5
   d47a8:	f001 f848 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d47ac:	aa10      	add	r2, sp, #64	; 0x40
   d47ae:	783b      	ldrb	r3, [r7, #0]
   d47b0:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d47b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d47b6:	9302      	str	r3, [sp, #8]
   d47b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d47ba:	9301      	str	r3, [sp, #4]
   d47bc:	4620      	mov	r0, r4
   d47be:	9500      	str	r5, [sp, #0]
   d47c0:	ab06      	add	r3, sp, #24
   d47c2:	4631      	mov	r1, r6
   d47c4:	f001 fe9c 	bl	d6500 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d47c8:	4620      	mov	r0, r4
   d47ca:	b011      	add	sp, #68	; 0x44
   d47cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d47ce <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>:
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d47ce:	4613      	mov	r3, r2
   d47d0:	2204      	movs	r2, #4
   d47d2:	f001 ba15 	b.w	d5c00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000d47d8 <loop>:

    }
    lastLoopTime = millis();
}

void loop() {
   d47d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47dc:	ed2d 8b02 	vpush	{d8}
    ///////////////////////////////
    ////Check for Remote Signal////
    ///////////////////////////////    
    if(millis() > nextPollTime){                                            //Function that executes aprroximately every 250ms
   d47e0:	4ca9      	ldr	r4, [pc, #676]	; (d4a88 <loop+0x2b0>)
   d47e2:	f8df 831c 	ldr.w	r8, [pc, #796]	; d4b00 <loop+0x328>

    }
    lastLoopTime = millis();
}

void loop() {
   d47e6:	b085      	sub	sp, #20
   d47e8:	f000 fd08 	bl	d51fc <HAL_Timer_Get_Milli_Seconds>
    ///////////////////////////////
    ////Check for Remote Signal////
    ///////////////////////////////    
    if(millis() > nextPollTime){                                            //Function that executes aprroximately every 250ms
   d47ec:	6823      	ldr	r3, [r4, #0]
   d47ee:	4283      	cmp	r3, r0
   d47f0:	f080 810f 	bcs.w	d4a12 <loop+0x23a>
        battTemp = 100.0*((analogRead(A4))/28.0);                           //Reports temperature in F
   d47f4:	200f      	movs	r0, #15
   d47f6:	f004 fae1 	bl	d8dbc <analogRead>
   d47fa:	f004 fe09 	bl	d9410 <__aeabi_i2d>
   d47fe:	2200      	movs	r2, #0
   d4800:	4ba2      	ldr	r3, [pc, #648]	; (d4a8c <loop+0x2b4>)
   d4802:	4da3      	ldr	r5, [pc, #652]	; (d4a90 <loop+0x2b8>)
        battCurrent = analogRead(A0)-analogRead(A2)+4096;                   //Reports current * 100 * 1.25
   d4804:	4ea3      	ldr	r6, [pc, #652]	; (d4a94 <loop+0x2bc>)
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
   d4806:	f8df 92fc 	ldr.w	r9, [pc, #764]	; d4b04 <loop+0x32c>
void loop() {
    ///////////////////////////////
    ////Check for Remote Signal////
    ///////////////////////////////    
    if(millis() > nextPollTime){                                            //Function that executes aprroximately every 250ms
        battTemp = 100.0*((analogRead(A4))/28.0);                           //Reports temperature in F
   d480a:	f004 ff91 	bl	d9730 <__aeabi_ddiv>
   d480e:	2200      	movs	r2, #0
   d4810:	4ba1      	ldr	r3, [pc, #644]	; (d4a98 <loop+0x2c0>)
   d4812:	f004 fe63 	bl	d94dc <__aeabi_dmul>
   d4816:	f005 f89b 	bl	d9950 <__aeabi_d2f>
   d481a:	6028      	str	r0, [r5, #0]
        battCurrent = analogRead(A0)-analogRead(A2)+4096;                   //Reports current * 100 * 1.25
   d481c:	2013      	movs	r0, #19
   d481e:	f004 facd 	bl	d8dbc <analogRead>
   d4822:	4607      	mov	r7, r0
   d4824:	2011      	movs	r0, #17
   d4826:	f004 fac9 	bl	d8dbc <analogRead>
   d482a:	1a38      	subs	r0, r7, r0
   d482c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
   d4830:	ee07 0a90 	vmov	s15, r0
   d4834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
   d4838:	2013      	movs	r0, #19
    ///////////////////////////////
    ////Check for Remote Signal////
    ///////////////////////////////    
    if(millis() > nextPollTime){                                            //Function that executes aprroximately every 250ms
        battTemp = 100.0*((analogRead(A4))/28.0);                           //Reports temperature in F
        battCurrent = analogRead(A0)-analogRead(A2)+4096;                   //Reports current * 100 * 1.25
   d483a:	edc6 7a00 	vstr	s15, [r6]
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
   d483e:	f004 fabd 	bl	d8dbc <analogRead>
   d4842:	4607      	mov	r7, r0
   d4844:	2011      	movs	r0, #17
   d4846:	f004 fab9 	bl	d8dbc <analogRead>
   d484a:	1a38      	subs	r0, r7, r0
   d484c:	00c0      	lsls	r0, r0, #3
   d484e:	ee07 0a90 	vmov	s15, r0
   d4852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        battVoltage = analogRead(A1)+VCAL;                                    //Gets raw ADC reading from voltage divider
   d4856:	2012      	movs	r0, #18
    ////Check for Remote Signal////
    ///////////////////////////////    
    if(millis() > nextPollTime){                                            //Function that executes aprroximately every 250ms
        battTemp = 100.0*((analogRead(A4))/28.0);                           //Reports temperature in F
        battCurrent = analogRead(A0)-analogRead(A2)+4096;                   //Reports current * 100 * 1.25
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
   d4858:	edc9 7a00 	vstr	s15, [r9]
        battVoltage = analogRead(A1)+VCAL;                                    //Gets raw ADC reading from voltage divider
   d485c:	f004 faae 	bl	d8dbc <analogRead>
   d4860:	ee07 0a90 	vmov	s15, r0
   d4864:	4f8d      	ldr	r7, [pc, #564]	; (d4a9c <loop+0x2c4>)
   d4866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        battVoltageCorr = ((analogRead(A1)+VCAL)*1000/79.125) + APPRX_BATT_RESISTANCE*1000*(analogRead(A0)/125.0); //mV
   d486a:	2012      	movs	r0, #18
    ///////////////////////////////    
    if(millis() > nextPollTime){                                            //Function that executes aprroximately every 250ms
        battTemp = 100.0*((analogRead(A4))/28.0);                           //Reports temperature in F
        battCurrent = analogRead(A0)-analogRead(A2)+4096;                   //Reports current * 100 * 1.25
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
        battVoltage = analogRead(A1)+VCAL;                                    //Gets raw ADC reading from voltage divider
   d486c:	edc7 7a00 	vstr	s15, [r7]
        battVoltageCorr = ((analogRead(A1)+VCAL)*1000/79.125) + APPRX_BATT_RESISTANCE*1000*(analogRead(A0)/125.0); //mV
   d4870:	f004 faa4 	bl	d8dbc <analogRead>
   d4874:	4683      	mov	fp, r0
   d4876:	2013      	movs	r0, #19
   d4878:	f004 faa0 	bl	d8dbc <analogRead>
   d487c:	4682      	mov	sl, r0
   d487e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4882:	fb00 f00b 	mul.w	r0, r0, fp
   d4886:	f004 fdc3 	bl	d9410 <__aeabi_i2d>
   d488a:	a37d      	add	r3, pc, #500	; (adr r3, d4a80 <loop+0x2a8>)
   d488c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4890:	f004 ff4e 	bl	d9730 <__aeabi_ddiv>
   d4894:	e9cd 0100 	strd	r0, r1, [sp]
   d4898:	4650      	mov	r0, sl
   d489a:	f004 fdb9 	bl	d9410 <__aeabi_i2d>
   d489e:	2200      	movs	r2, #0
   d48a0:	4b7f      	ldr	r3, [pc, #508]	; (d4aa0 <loop+0x2c8>)
        battPercent = (battVoltageCorr-34000)/62;                           //Linear comparison of voltage to 34000mV
   d48a2:	f8df a264 	ldr.w	sl, [pc, #612]	; d4b08 <loop+0x330>

        hMile = (revCount/57);
   d48a6:	f8df b264 	ldr.w	fp, [pc, #612]	; d4b0c <loop+0x334>
    if(millis() > nextPollTime){                                            //Function that executes aprroximately every 250ms
        battTemp = 100.0*((analogRead(A4))/28.0);                           //Reports temperature in F
        battCurrent = analogRead(A0)-analogRead(A2)+4096;                   //Reports current * 100 * 1.25
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
        battVoltage = analogRead(A1)+VCAL;                                    //Gets raw ADC reading from voltage divider
        battVoltageCorr = ((analogRead(A1)+VCAL)*1000/79.125) + APPRX_BATT_RESISTANCE*1000*(analogRead(A0)/125.0); //mV
   d48aa:	f004 ff41 	bl	d9730 <__aeabi_ddiv>
   d48ae:	2200      	movs	r2, #0
   d48b0:	4b7c      	ldr	r3, [pc, #496]	; (d4aa4 <loop+0x2cc>)
   d48b2:	f004 fe13 	bl	d94dc <__aeabi_dmul>
   d48b6:	4602      	mov	r2, r0
   d48b8:	460b      	mov	r3, r1
   d48ba:	e9dd 0100 	ldrd	r0, r1, [sp]
   d48be:	f004 fc5b 	bl	d9178 <__adddf3>
   d48c2:	f005 f845 	bl	d9950 <__aeabi_d2f>
        battPercent = (battVoltageCorr-34000)/62;                           //Linear comparison of voltage to 34000mV
   d48c6:	ed9f 7a78 	vldr	s14, [pc, #480]	; d4aa8 <loop+0x2d0>
   d48ca:	eddf 6a78 	vldr	s13, [pc, #480]	; d4aac <loop+0x2d4>
    if(millis() > nextPollTime){                                            //Function that executes aprroximately every 250ms
        battTemp = 100.0*((analogRead(A4))/28.0);                           //Reports temperature in F
        battCurrent = analogRead(A0)-analogRead(A2)+4096;                   //Reports current * 100 * 1.25
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
        battVoltage = analogRead(A1)+VCAL;                                    //Gets raw ADC reading from voltage divider
        battVoltageCorr = ((analogRead(A1)+VCAL)*1000/79.125) + APPRX_BATT_RESISTANCE*1000*(analogRead(A0)/125.0); //mV
   d48ce:	4b78      	ldr	r3, [pc, #480]	; (d4ab0 <loop+0x2d8>)
        battPercent = (battVoltageCorr-34000)/62;                           //Linear comparison of voltage to 34000mV

        hMile = (revCount/57);

        //Current integration for energy calculation
        mAH_consumption += (battCurrentmA)*((float)(millis()-lastLoopTime)/(float)3600000);
   d48d0:	ed99 8a00 	vldr	s16, [r9]
    if(millis() > nextPollTime){                                            //Function that executes aprroximately every 250ms
        battTemp = 100.0*((analogRead(A4))/28.0);                           //Reports temperature in F
        battCurrent = analogRead(A0)-analogRead(A2)+4096;                   //Reports current * 100 * 1.25
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
        battVoltage = analogRead(A1)+VCAL;                                    //Gets raw ADC reading from voltage divider
        battVoltageCorr = ((analogRead(A1)+VCAL)*1000/79.125) + APPRX_BATT_RESISTANCE*1000*(analogRead(A0)/125.0); //mV
   d48d4:	6018      	str	r0, [r3, #0]
   d48d6:	ee07 0a90 	vmov	s15, r0
        battPercent = (battVoltageCorr-34000)/62;                           //Linear comparison of voltage to 34000mV
   d48da:	ee77 7ac7 	vsub.f32	s15, s15, s14

        hMile = (revCount/57);
   d48de:	4b75      	ldr	r3, [pc, #468]	; (d4ab4 <loop+0x2dc>)

        //Current integration for energy calculation
        mAH_consumption += (battCurrentmA)*((float)(millis()-lastLoopTime)/(float)3600000);
   d48e0:	f8df 9210 	ldr.w	r9, [pc, #528]	; d4af4 <loop+0x31c>
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
        battVoltage = analogRead(A1)+VCAL;                                    //Gets raw ADC reading from voltage divider
        battVoltageCorr = ((analogRead(A1)+VCAL)*1000/79.125) + APPRX_BATT_RESISTANCE*1000*(analogRead(A0)/125.0); //mV
        battPercent = (battVoltageCorr-34000)/62;                           //Linear comparison of voltage to 34000mV

        hMile = (revCount/57);
   d48e4:	681b      	ldr	r3, [r3, #0]
        battTemp = 100.0*((analogRead(A4))/28.0);                           //Reports temperature in F
        battCurrent = analogRead(A0)-analogRead(A2)+4096;                   //Reports current * 100 * 1.25
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
        battVoltage = analogRead(A1)+VCAL;                                    //Gets raw ADC reading from voltage divider
        battVoltageCorr = ((analogRead(A1)+VCAL)*1000/79.125) + APPRX_BATT_RESISTANCE*1000*(analogRead(A0)/125.0); //mV
        battPercent = (battVoltageCorr-34000)/62;                           //Linear comparison of voltage to 34000mV
   d48e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13

        hMile = (revCount/57);
   d48ea:	2239      	movs	r2, #57	; 0x39
   d48ec:	fbb3 f3f2 	udiv	r3, r3, r2
   d48f0:	f8cb 3000 	str.w	r3, [fp]
        battTemp = 100.0*((analogRead(A4))/28.0);                           //Reports temperature in F
        battCurrent = analogRead(A0)-analogRead(A2)+4096;                   //Reports current * 100 * 1.25
        battCurrentmA = (analogRead(A0)-analogRead(A2))*1000/125;           //Gets net current in mA
        battVoltage = analogRead(A1)+VCAL;                                    //Gets raw ADC reading from voltage divider
        battVoltageCorr = ((analogRead(A1)+VCAL)*1000/79.125) + APPRX_BATT_RESISTANCE*1000*(analogRead(A0)/125.0); //mV
        battPercent = (battVoltageCorr-34000)/62;                           //Linear comparison of voltage to 34000mV
   d48f4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   d48f8:	ed8a 7a00 	vstr	s14, [sl]
   d48fc:	f000 fc7e 	bl	d51fc <HAL_Timer_Get_Milli_Seconds>

        hMile = (revCount/57);

        //Current integration for energy calculation
        mAH_consumption += (battCurrentmA)*((float)(millis()-lastLoopTime)/(float)3600000);
   d4900:	4a6d      	ldr	r2, [pc, #436]	; (d4ab8 <loop+0x2e0>)
   d4902:	eddf 6a6e 	vldr	s13, [pc, #440]	; d4abc <loop+0x2e4>
   d4906:	6813      	ldr	r3, [r2, #0]
   d4908:	9200      	str	r2, [sp, #0]
   d490a:	1ac0      	subs	r0, r0, r3
   d490c:	ee07 0a90 	vmov	s15, r0
   d4910:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4914:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4918:	edd9 7a00 	vldr	s15, [r9]
   d491c:	eee8 7a07 	vfma.f32	s15, s16, s14
   d4920:	edc9 7a00 	vstr	s15, [r9]
   d4924:	f000 fc6a 	bl	d51fc <HAL_Timer_Get_Milli_Seconds>
        lastLoopTime = millis();                                            //Reset integration counter

        //Percentage range-tweaking - ensures the percentage is between 0 and 100
        int x = (int)battPercent;
   d4928:	f8da 3000 	ldr.w	r3, [sl]

        hMile = (revCount/57);

        //Current integration for energy calculation
        mAH_consumption += (battCurrentmA)*((float)(millis()-lastLoopTime)/(float)3600000);
        lastLoopTime = millis();                                            //Reset integration counter
   d492c:	9a00      	ldr	r2, [sp, #0]

        //Percentage range-tweaking - ensures the percentage is between 0 and 100
        int x = (int)battPercent;
        if(x >= 0 && x <= 100){
   d492e:	2b64      	cmp	r3, #100	; 0x64

        hMile = (revCount/57);

        //Current integration for energy calculation
        mAH_consumption += (battCurrentmA)*((float)(millis()-lastLoopTime)/(float)3600000);
        lastLoopTime = millis();                                            //Reset integration counter
   d4930:	6010      	str	r0, [r2, #0]
   d4932:	4863      	ldr	r0, [pc, #396]	; (d4ac0 <loop+0x2e8>)

        //Percentage range-tweaking - ensures the percentage is between 0 and 100
        int x = (int)battPercent;
        if(x >= 0 && x <= 100){
   d4934:	d80b      	bhi.n	d494e <loop+0x176>
            RGB.color(i*(100-battPercent)/100, i*battPercent/100, 0);
   d4936:	6802      	ldr	r2, [r0, #0]
   d4938:	2064      	movs	r0, #100	; 0x64
   d493a:	fb02 f103 	mul.w	r1, r2, r3
   d493e:	1ac3      	subs	r3, r0, r3
   d4940:	4353      	muls	r3, r2
   d4942:	fb91 f1f0 	sdiv	r1, r1, r0
   d4946:	2200      	movs	r2, #0
   d4948:	fb93 f0f0 	sdiv	r0, r3, r0
   d494c:	e00c      	b.n	d4968 <loop+0x190>
        }
        else if(x > 100){
   d494e:	dd06      	ble.n	d495e <loop+0x186>
            battPercent = 100;
   d4950:	2364      	movs	r3, #100	; 0x64
            RGB.color(i*(100-battPercent)/100, i*battPercent/100, 0);
   d4952:	2200      	movs	r2, #0
   d4954:	6801      	ldr	r1, [r0, #0]
        int x = (int)battPercent;
        if(x >= 0 && x <= 100){
            RGB.color(i*(100-battPercent)/100, i*battPercent/100, 0);
        }
        else if(x > 100){
            battPercent = 100;
   d4956:	f8ca 3000 	str.w	r3, [sl]
            RGB.color(i*(100-battPercent)/100, i*battPercent/100, 0);
   d495a:	4610      	mov	r0, r2
   d495c:	e004      	b.n	d4968 <loop+0x190>
        }
        else{
            battPercent = 0;
   d495e:	2200      	movs	r2, #0
            RGB.color(i*(100-battPercent)/100, i*battPercent/100, 0);
   d4960:	6800      	ldr	r0, [r0, #0]
        else if(x > 100){
            battPercent = 100;
            RGB.color(i*(100-battPercent)/100, i*battPercent/100, 0);
        }
        else{
            battPercent = 0;
   d4962:	f8ca 2000 	str.w	r2, [sl]
            RGB.color(i*(100-battPercent)/100, i*battPercent/100, 0);
   d4966:	4611      	mov	r1, r2
   d4968:	f003 ff0f 	bl	d878a <_ZN8RGBClass5colorEiii>
        }

        

        //Transmit each of the characteristics over BLE
        bttlvlCharacteristic.setValue((int)battVoltage);
   d496c:	edd7 7a00 	vldr	s15, [r7]
   d4970:	4854      	ldr	r0, [pc, #336]	; (d4ac4 <loop+0x2ec>)
   d4972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4976:	af04      	add	r7, sp, #16
   d4978:	ed67 7a01 	vstmdb	r7!, {s15}
   d497c:	2200      	movs	r2, #0
   d497e:	4639      	mov	r1, r7
   d4980:	f7ff ff25 	bl	d47ce <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>
        currlvlCharacteristic.setValue((int)battCurrent);
   d4984:	edd6 7a00 	vldr	s15, [r6]
   d4988:	484f      	ldr	r0, [pc, #316]	; (d4ac8 <loop+0x2f0>)
   d498a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d498e:	2200      	movs	r2, #0
   d4990:	4639      	mov	r1, r7
   d4992:	edcd 7a03 	vstr	s15, [sp, #12]
   d4996:	f7ff ff1a 	bl	d47ce <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>
        estpctCharacteristic.setValue((uint8_t)battPercent);
   d499a:	f8da 3000 	ldr.w	r3, [sl]
   d499e:	f88d 300c 	strb.w	r3, [sp, #12]
   d49a2:	2201      	movs	r2, #1
   d49a4:	2300      	movs	r3, #0
   d49a6:	4639      	mov	r1, r7
   d49a8:	4848      	ldr	r0, [pc, #288]	; (d4acc <loop+0x2f4>)
   d49aa:	f001 f929 	bl	d5c00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        enconsCharacteristic.setValue((int)mAH_consumption);
   d49ae:	edd9 7a00 	vldr	s15, [r9]
   d49b2:	4847      	ldr	r0, [pc, #284]	; (d4ad0 <loop+0x2f8>)
   d49b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d49b8:	2200      	movs	r2, #0
   d49ba:	4639      	mov	r1, r7
   d49bc:	edcd 7a03 	vstr	s15, [sp, #12]
   d49c0:	f7ff ff05 	bl	d47ce <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>
        templvlCharacteristic.setValue((int)battTemp);
   d49c4:	edd5 7a00 	vldr	s15, [r5]
   d49c8:	4842      	ldr	r0, [pc, #264]	; (d4ad4 <loop+0x2fc>)
   d49ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d49ce:	2200      	movs	r2, #0
   d49d0:	4639      	mov	r1, r7
   d49d2:	edcd 7a03 	vstr	s15, [sp, #12]
   d49d6:	f7ff fefa 	bl	d47ce <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>
        rpmlvlCharacteristic.setValue((int)RPS);
   d49da:	4b3f      	ldr	r3, [pc, #252]	; (d4ad8 <loop+0x300>)
   d49dc:	483f      	ldr	r0, [pc, #252]	; (d4adc <loop+0x304>)
   d49de:	781b      	ldrb	r3, [r3, #0]
   d49e0:	9303      	str	r3, [sp, #12]
   d49e2:	2200      	movs	r2, #0
   d49e4:	4639      	mov	r1, r7
   d49e6:	f7ff fef2 	bl	d47ce <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>
        trplvlCharacteristic.setValue((int)hMile);
   d49ea:	f8db 3000 	ldr.w	r3, [fp]
   d49ee:	483c      	ldr	r0, [pc, #240]	; (d4ae0 <loop+0x308>)
   d49f0:	9303      	str	r3, [sp, #12]
   d49f2:	2200      	movs	r2, #0
   d49f4:	4639      	mov	r1, r7
   d49f6:	f7ff feea 	bl	d47ce <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>
        odolvlCharacteristic.setValue((int)odoMile);
   d49fa:	f8d8 3000 	ldr.w	r3, [r8]
   d49fe:	4839      	ldr	r0, [pc, #228]	; (d4ae4 <loop+0x30c>)
   d4a00:	9303      	str	r3, [sp, #12]
   d4a02:	2200      	movs	r2, #0
   d4a04:	4639      	mov	r1, r7
   d4a06:	f7ff fee2 	bl	d47ce <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>

        //Log.trace("RPM: %d",RPS*60);
        //Log.trace("Speed: %0.1f",(RPS*0.6322));

        nextPollTime += 300;
   d4a0a:	6823      	ldr	r3, [r4, #0]
   d4a0c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
   d4a10:	6023      	str	r3, [r4, #0]
    //Log.trace("\nBattery Temperature: %f F", battTemp);
    //Log.trace("Battery Voltage: %f", battVoltage);
    //Log.trace("Energy Consumption: %f mAH", mAH_consumption);

    //Battery test function - logs battery voltage for each interval of MAH_TP_INT
    if(batteryTest){
   d4a12:	4b35      	ldr	r3, [pc, #212]	; (d4ae8 <loop+0x310>)
   d4a14:	781b      	ldrb	r3, [r3, #0]
   d4a16:	b1cb      	cbz	r3, d4a4c <loop+0x274>
        if(mAH_consumption > mAH_TP + MAH_TP_INT){      //Check if the next interval has been reached
   d4a18:	4c34      	ldr	r4, [pc, #208]	; (d4aec <loop+0x314>)
   d4a1a:	ed9f 7a35 	vldr	s14, [pc, #212]	; d4af0 <loop+0x318>
   d4a1e:	edd4 7a00 	vldr	s15, [r4]
   d4a22:	4d34      	ldr	r5, [pc, #208]	; (d4af4 <loop+0x31c>)
   d4a24:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4a28:	ed95 7a00 	vldr	s14, [r5]
   d4a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a34:	d50a      	bpl.n	d4a4c <loop+0x274>
            publishTest((int)battVoltageCorr);          //Publish the current-corrected battery voltage to the cloud
   d4a36:	4b1e      	ldr	r3, [pc, #120]	; (d4ab0 <loop+0x2d8>)
   d4a38:	edd3 7a00 	vldr	s15, [r3]
   d4a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4a40:	ee17 0a90 	vmov	r0, s15
   d4a44:	f7ff fe34 	bl	d46b0 <_Z11publishTesti>
            mAH_TP = mAH_consumption;                   //Set test-point to current mAH value
   d4a48:	682b      	ldr	r3, [r5, #0]
   d4a4a:	6023      	str	r3, [r4, #0]
        }
    }

    if(odoMile != odoSave && millis()-odoSaveTime > 25000) writeOdo();
   d4a4c:	4b2a      	ldr	r3, [pc, #168]	; (d4af8 <loop+0x320>)
   d4a4e:	f8d8 2000 	ldr.w	r2, [r8]
   d4a52:	681b      	ldr	r3, [r3, #0]
   d4a54:	429a      	cmp	r2, r3
   d4a56:	d008      	beq.n	d4a6a <loop+0x292>
   d4a58:	f000 fbd0 	bl	d51fc <HAL_Timer_Get_Milli_Seconds>
   d4a5c:	4b27      	ldr	r3, [pc, #156]	; (d4afc <loop+0x324>)
   d4a5e:	681b      	ldr	r3, [r3, #0]
   d4a60:	1ac0      	subs	r0, r0, r3
   d4a62:	f246 13a8 	movw	r3, #25000	; 0x61a8
   d4a66:	4298      	cmp	r0, r3
   d4a68:	d807      	bhi.n	d4a7a <loop+0x2a2>
    
    //if(!digitalRead(D4)) digitalWrite(D7,HIGH);
    //else digitalWrite(D7, LOW);
    delay(5);//250ms per loop
   d4a6a:	2005      	movs	r0, #5
   d4a6c:	f000 fe3a 	bl	d56e4 <delay>
}
   d4a70:	b005      	add	sp, #20
   d4a72:	ecbd 8b02 	vpop	{d8}
   d4a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            publishTest((int)battVoltageCorr);          //Publish the current-corrected battery voltage to the cloud
            mAH_TP = mAH_consumption;                   //Set test-point to current mAH value
        }
    }

    if(odoMile != odoSave && millis()-odoSaveTime > 25000) writeOdo();
   d4a7a:	f7ff fe47 	bl	d470c <_Z8writeOdov>
   d4a7e:	e7f4      	b.n	d4a6a <loop+0x292>
   d4a80:	00000000 	.word	0x00000000
   d4a84:	4053c800 	.word	0x4053c800
   d4a88:	2003e374 	.word	0x2003e374
   d4a8c:	403c0000 	.word	0x403c0000
   d4a90:	2003e364 	.word	0x2003e364
   d4a94:	2003e324 	.word	0x2003e324
   d4a98:	40590000 	.word	0x40590000
   d4a9c:	2003e2b4 	.word	0x2003e2b4
   d4aa0:	405f4000 	.word	0x405f4000
   d4aa4:	40690000 	.word	0x40690000
   d4aa8:	4704d000 	.word	0x4704d000
   d4aac:	42780000 	.word	0x42780000
   d4ab0:	2003e2bc 	.word	0x2003e2bc
   d4ab4:	2003e340 	.word	0x2003e340
   d4ab8:	2003e2b8 	.word	0x2003e2b8
   d4abc:	4a5bba00 	.word	0x4a5bba00
   d4ac0:	2003e334 	.word	0x2003e334
   d4ac4:	2003e368 	.word	0x2003e368
   d4ac8:	2003e378 	.word	0x2003e378
   d4acc:	2003e2ec 	.word	0x2003e2ec
   d4ad0:	2003e344 	.word	0x2003e344
   d4ad4:	2003e338 	.word	0x2003e338
   d4ad8:	2003e370 	.word	0x2003e370
   d4adc:	2003e384 	.word	0x2003e384
   d4ae0:	2003e2ac 	.word	0x2003e2ac
   d4ae4:	2003e2a0 	.word	0x2003e2a0
   d4ae8:	2003e320 	.word	0x2003e320
   d4aec:	2003e358 	.word	0x2003e358
   d4af0:	42c80000 	.word	0x42c80000
   d4af4:	2003e360 	.word	0x2003e360
   d4af8:	2003e380 	.word	0x2003e380
   d4afc:	2003e318 	.word	0x2003e318
   d4b00:	2003e2c0 	.word	0x2003e2c0
   d4b04:	2003e35c 	.word	0x2003e35c
   d4b08:	2003e314 	.word	0x2003e314
   d4b0c:	2003e288 	.word	0x2003e288

000d4b10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4b10:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b14:	4606      	mov	r6, r0
   d4b16:	460c      	mov	r4, r1
   d4b18:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4b1a:	d916      	bls.n	d4b4a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4b1c:	4290      	cmp	r0, r2
   d4b1e:	d215      	bcs.n	d4b4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4b20:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4b24:	1a6c      	subs	r4, r5, r1
   d4b26:	f1a1 0714 	sub.w	r7, r1, #20
   d4b2a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4b2c:	42af      	cmp	r7, r5
   d4b2e:	d01c      	beq.n	d4b6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4b30:	b12c      	cbz	r4, d4b3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4b32:	4629      	mov	r1, r5
   d4b34:	4620      	mov	r0, r4
   d4b36:	f003 fe56 	bl	d87e6 <_ZN6StringC1EOS_>
   d4b3a:	7c2b      	ldrb	r3, [r5, #16]
   d4b3c:	7423      	strb	r3, [r4, #16]
   d4b3e:	4628      	mov	r0, r5
   d4b40:	f003 fe61 	bl	d8806 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4b44:	3d14      	subs	r5, #20
   d4b46:	3c14      	subs	r4, #20
   d4b48:	e7f0      	b.n	d4b2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4b4a:	d00e      	beq.n	d4b6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4b4c:	42ac      	cmp	r4, r5
   d4b4e:	d00c      	beq.n	d4b6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4b50:	b12e      	cbz	r6, d4b5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4b52:	4621      	mov	r1, r4
   d4b54:	4630      	mov	r0, r6
   d4b56:	f003 fe46 	bl	d87e6 <_ZN6StringC1EOS_>
   d4b5a:	7c23      	ldrb	r3, [r4, #16]
   d4b5c:	7433      	strb	r3, [r6, #16]
   d4b5e:	4620      	mov	r0, r4
   d4b60:	f003 fe51 	bl	d8806 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4b64:	3414      	adds	r4, #20
   d4b66:	3614      	adds	r6, #20
   d4b68:	e7f0      	b.n	d4b4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4b70:	2300      	movs	r3, #0
   d4b72:	6003      	str	r3, [r0, #0]
   d4b74:	6043      	str	r3, [r0, #4]
   d4b76:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4b78:	684e      	ldr	r6, [r1, #4]
   d4b7a:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4b7c:	4604      	mov	r4, r0
   d4b7e:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4b80:	dd24      	ble.n	d4bcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4b82:	f04f 0814 	mov.w	r8, #20
   d4b86:	fb08 f006 	mul.w	r0, r8, r6
   d4b8a:	f000 fd7b 	bl	d5684 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4b8e:	4605      	mov	r5, r0
   d4b90:	b1e0      	cbz	r0, d4bcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4b92:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4b96:	fb08 1202 	mla	r2, r8, r2, r1
   d4b9a:	f7ff ffb9 	bl	d4b10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4b9e:	6820      	ldr	r0, [r4, #0]
   d4ba0:	f000 fd78 	bl	d5694 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4ba4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4ba6:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4ba8:	683e      	ldr	r6, [r7, #0]
   d4baa:	687b      	ldr	r3, [r7, #4]
   d4bac:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4bb0:	4546      	cmp	r6, r8
   d4bb2:	d009      	beq.n	d4bc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4bb4:	b12d      	cbz	r5, d4bc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4bb6:	4631      	mov	r1, r6
   d4bb8:	4628      	mov	r0, r5
   d4bba:	f003 fe8d 	bl	d88d8 <_ZN6StringC1ERKS_>
   d4bbe:	7c33      	ldrb	r3, [r6, #16]
   d4bc0:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4bc2:	3614      	adds	r6, #20
   d4bc4:	3514      	adds	r5, #20
   d4bc6:	e7f3      	b.n	d4bb0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4bc8:	687b      	ldr	r3, [r7, #4]
   d4bca:	6063      	str	r3, [r4, #4]
    }
}
   d4bcc:	4620      	mov	r0, r4
   d4bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4bd4 <_GLOBAL__sub_I_SystemMode>:
    od0 = odoMile & 255;
    EEPROM.write(ODO_EEPROM, od3);
    EEPROM.write(ODO_EEPROM + 1, od2);
    EEPROM.write(ODO_EEPROM + 2, od1);
    EEPROM.write(ODO_EEPROM + 3, od0);
}
   d4bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4bd8:	4bc7      	ldr	r3, [pc, #796]	; (d4ef8 <_GLOBAL__sub_I_SystemMode+0x324>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4bda:	4dc8      	ldr	r5, [pc, #800]	; (d4efc <_GLOBAL__sub_I_SystemMode+0x328>)
/*          SkateInfoView            */
/*    Created by Matthew Panizza     */
/*          October 2020             */
/*************************************/

SYSTEM_MODE(SEMI_AUTOMATIC);                                          //Start with Bluetooth LE only
   d4bdc:	4fc8      	ldr	r7, [pc, #800]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x32c>)
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4bde:	f8df 83a0 	ldr.w	r8, [pc, #928]	; d4f80 <_GLOBAL__sub_I_SystemMode+0x3ac>
    od0 = odoMile & 255;
    EEPROM.write(ODO_EEPROM, od3);
    EEPROM.write(ODO_EEPROM + 1, od2);
    EEPROM.write(ODO_EEPROM + 2, od1);
    EEPROM.write(ODO_EEPROM + 3, od0);
}
   d4be2:	b097      	sub	sp, #92	; 0x5c
   d4be4:	f04f 0a01 	mov.w	sl, #1
   d4be8:	2400      	movs	r4, #0
   d4bea:	f883 a000 	strb.w	sl, [r3]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4bee:	f000 fb2d 	bl	d524c <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4bf6:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4bf8:	602c      	str	r4, [r5, #0]
   d4bfa:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4bfc:	71ac      	strb	r4, [r5, #6]
   d4bfe:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c00:	2002      	movs	r0, #2
   d4c02:	f000 fc9b 	bl	d553c <set_system_mode>
/*          SkateInfoView            */
/*    Created by Matthew Panizza     */
/*          October 2020             */
/*************************************/

SYSTEM_MODE(SEMI_AUTOMATIC);                                          //Start with Bluetooth LE only
   d4c06:	463a      	mov	r2, r7
   d4c08:	49be      	ldr	r1, [pc, #760]	; (d4f04 <_GLOBAL__sub_I_SystemMode+0x330>)
   d4c0a:	4628      	mov	r0, r5
   d4c0c:	f004 f942 	bl	d8e94 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4c10:	9406      	str	r4, [sp, #24]
   d4c12:	9407      	str	r4, [sp, #28]
   d4c14:	9408      	str	r4, [sp, #32]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4c16:	f003 ffbb 	bl	d8b90 <_Z16_fetch_usbserialv>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4c1a:	ae0c      	add	r6, sp, #48	; 0x30
   d4c1c:	4683      	mov	fp, r0
   d4c1e:	a906      	add	r1, sp, #24
   d4c20:	a809      	add	r0, sp, #36	; 0x24
   d4c22:	f7ff ffa3 	bl	d4b6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4c26:	46c1      	mov	r9, r8
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4c28:	a909      	add	r1, sp, #36	; 0x24
   d4c2a:	4630      	mov	r0, r6
   d4c2c:	f7ff ff9e 	bl	d4b6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4c30:	4bb5      	ldr	r3, [pc, #724]	; (d4f08 <_GLOBAL__sub_I_SystemMode+0x334>)
   d4c32:	f849 3b04 	str.w	r3, [r9], #4
   d4c36:	ad11      	add	r5, sp, #68	; 0x44
   d4c38:	4631      	mov	r1, r6
   d4c3a:	4628      	mov	r0, r5
   d4c3c:	f7ff ff96 	bl	d4b6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4c40:	462a      	mov	r2, r5
   d4c42:	4651      	mov	r1, sl
   d4c44:	4648      	mov	r0, r9
   d4c46:	f003 f870 	bl	d7d2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4c4a:	4628      	mov	r0, r5
   d4c4c:	f7ff fd8a 	bl	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4c50:	4630      	mov	r0, r6
   d4c52:	f7ff fd87 	bl	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4c56:	4bad      	ldr	r3, [pc, #692]	; (d4f0c <_GLOBAL__sub_I_SystemMode+0x338>)
   d4c58:	f8c8 3000 	str.w	r3, [r8]
   d4c5c:	f8c8 b020 	str.w	fp, [r8, #32]
   d4c60:	a809      	add	r0, sp, #36	; 0x24
   d4c62:	f7ff fd7f 	bl	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4c66:	4baa      	ldr	r3, [pc, #680]	; (d4f10 <_GLOBAL__sub_I_SystemMode+0x33c>)
   d4c68:	f8c8 3000 	str.w	r3, [r8]
        Serial.begin();
   d4c6c:	f003 ff90 	bl	d8b90 <_Z16_fetch_usbserialv>
   d4c70:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4c74:	f003 ff7c 	bl	d8b70 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4c78:	f002 fd00 	bl	d767c <_ZN5spark10LogManager8instanceEv>
   d4c7c:	4641      	mov	r1, r8
   d4c7e:	f002 ffe7 	bl	d7c50 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_TRACE);                         //Log Configuration
   d4c82:	a806      	add	r0, sp, #24
   d4c84:	f7ff fd6e 	bl	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4c88:	463a      	mov	r2, r7
   d4c8a:	49a2      	ldr	r1, [pc, #648]	; (d4f14 <_GLOBAL__sub_I_SystemMode+0x340>)
uint32_t odoSave;                   //Counter for when odo was saved to EEPROM last
uint32_t odoSaveTime;
size_t name1;

// Bluetooth LE Characteristics and Services
BleUuid SkateInfoService(serviceUuid);
   d4c8c:	f8df 92f4 	ldr.w	r9, [pc, #756]	; d4f84 <_GLOBAL__sub_I_SystemMode+0x3b0>
BleCharacteristic bttlvlCharacteristic  ("bttlvl",     BleCharacteristicProperty::NOTIFY, bttlvl, SkateInfoService);   
   d4c90:	f8df b2f4 	ldr.w	fp, [pc, #756]	; d4f88 <_GLOBAL__sub_I_SystemMode+0x3b4>
/*          October 2020             */
/*************************************/

SYSTEM_MODE(SEMI_AUTOMATIC);                                          //Start with Bluetooth LE only

SerialLogHandler logHandler(LOG_LEVEL_TRACE);                         //Log Configuration
   d4c94:	4640      	mov	r0, r8
   d4c96:	f004 f8fd 	bl	d8e94 <__aeabi_atexit>
uint32_t odoSave;                   //Counter for when odo was saved to EEPROM last
uint32_t odoSaveTime;
size_t name1;

// Bluetooth LE Characteristics and Services
BleUuid SkateInfoService(serviceUuid);
   d4c9a:	4b9f      	ldr	r3, [pc, #636]	; (d4f18 <_GLOBAL__sub_I_SystemMode+0x344>)
   d4c9c:	4648      	mov	r0, r9
   d4c9e:	6819      	ldr	r1, [r3, #0]
   d4ca0:	f000 feca 	bl	d5a38 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic bttlvlCharacteristic  ("bttlvl",     BleCharacteristicProperty::NOTIFY, bttlvl, SkateInfoService);   
   d4ca4:	4b9d      	ldr	r3, [pc, #628]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x348>)
   d4ca6:	f8d3 8000 	ldr.w	r8, [r3]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d4caa:	f04f 0a10 	mov.w	sl, #16
   d4cae:	4649      	mov	r1, r9
   d4cb0:	4628      	mov	r0, r5
   d4cb2:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
   d4cb6:	f000 fdc1 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
   d4cba:	4643      	mov	r3, r8
   d4cbc:	f8df 82cc 	ldr.w	r8, [pc, #716]	; d4f8c <_GLOBAL__sub_I_SystemMode+0x3b8>
   d4cc0:	9402      	str	r4, [sp, #8]
   d4cc2:	4632      	mov	r2, r6
   d4cc4:	9401      	str	r4, [sp, #4]
   d4cc6:	9500      	str	r5, [sp, #0]
   d4cc8:	4995      	ldr	r1, [pc, #596]	; (d4f20 <_GLOBAL__sub_I_SystemMode+0x34c>)
   d4cca:	4658      	mov	r0, fp
   d4ccc:	f7ff fd5d 	bl	d478a <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4cd0:	463a      	mov	r2, r7
   d4cd2:	4641      	mov	r1, r8
   d4cd4:	4658      	mov	r0, fp
   d4cd6:	f004 f8dd 	bl	d8e94 <__aeabi_atexit>
BleCharacteristic currlvlCharacteristic ("currlvl",    BleCharacteristicProperty::NOTIFY, currlvl, SkateInfoService);
   d4cda:	4b92      	ldr	r3, [pc, #584]	; (d4f24 <_GLOBAL__sub_I_SystemMode+0x350>)
   d4cdc:	f8df b2b0 	ldr.w	fp, [pc, #688]	; d4f90 <_GLOBAL__sub_I_SystemMode+0x3bc>
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
   d4ce6:	4649      	mov	r1, r9
   d4ce8:	4628      	mov	r0, r5
   d4cea:	9305      	str	r3, [sp, #20]
   d4cec:	f000 fda6 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
   d4cf0:	9b05      	ldr	r3, [sp, #20]
   d4cf2:	9402      	str	r4, [sp, #8]
   d4cf4:	4632      	mov	r2, r6
   d4cf6:	9401      	str	r4, [sp, #4]
   d4cf8:	9500      	str	r5, [sp, #0]
   d4cfa:	498b      	ldr	r1, [pc, #556]	; (d4f28 <_GLOBAL__sub_I_SystemMode+0x354>)
   d4cfc:	4658      	mov	r0, fp
   d4cfe:	f7ff fd44 	bl	d478a <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4d02:	463a      	mov	r2, r7
   d4d04:	4641      	mov	r1, r8
   d4d06:	4658      	mov	r0, fp
   d4d08:	f004 f8c4 	bl	d8e94 <__aeabi_atexit>
BleCharacteristic estpctCharacteristic  ("estpercent", BleCharacteristicProperty::NOTIFY, estpercent, SkateInfoService);
   d4d0c:	4b87      	ldr	r3, [pc, #540]	; (d4f2c <_GLOBAL__sub_I_SystemMode+0x358>)
   d4d0e:	f8df b284 	ldr.w	fp, [pc, #644]	; d4f94 <_GLOBAL__sub_I_SystemMode+0x3c0>
   d4d12:	681b      	ldr	r3, [r3, #0]
   d4d14:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
   d4d18:	4649      	mov	r1, r9
   d4d1a:	4628      	mov	r0, r5
   d4d1c:	9305      	str	r3, [sp, #20]
   d4d1e:	f000 fd8d 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
   d4d22:	9b05      	ldr	r3, [sp, #20]
   d4d24:	9402      	str	r4, [sp, #8]
   d4d26:	4632      	mov	r2, r6
   d4d28:	9401      	str	r4, [sp, #4]
   d4d2a:	9500      	str	r5, [sp, #0]
   d4d2c:	4980      	ldr	r1, [pc, #512]	; (d4f30 <_GLOBAL__sub_I_SystemMode+0x35c>)
   d4d2e:	4658      	mov	r0, fp
   d4d30:	f7ff fd2b 	bl	d478a <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4d34:	463a      	mov	r2, r7
   d4d36:	4641      	mov	r1, r8
   d4d38:	4658      	mov	r0, fp
   d4d3a:	f004 f8ab 	bl	d8e94 <__aeabi_atexit>
BleCharacteristic enconsCharacteristic  ("encons",     BleCharacteristicProperty::NOTIFY, encons, SkateInfoService);  
   d4d3e:	4b7d      	ldr	r3, [pc, #500]	; (d4f34 <_GLOBAL__sub_I_SystemMode+0x360>)
   d4d40:	f8df b254 	ldr.w	fp, [pc, #596]	; d4f98 <_GLOBAL__sub_I_SystemMode+0x3c4>
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
   d4d4a:	4649      	mov	r1, r9
   d4d4c:	4628      	mov	r0, r5
   d4d4e:	9305      	str	r3, [sp, #20]
   d4d50:	f000 fd74 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
   d4d54:	9b05      	ldr	r3, [sp, #20]
   d4d56:	9402      	str	r4, [sp, #8]
   d4d58:	4632      	mov	r2, r6
   d4d5a:	9401      	str	r4, [sp, #4]
   d4d5c:	9500      	str	r5, [sp, #0]
   d4d5e:	4976      	ldr	r1, [pc, #472]	; (d4f38 <_GLOBAL__sub_I_SystemMode+0x364>)
   d4d60:	4658      	mov	r0, fp
   d4d62:	f7ff fd12 	bl	d478a <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4d66:	463a      	mov	r2, r7
   d4d68:	4641      	mov	r1, r8
   d4d6a:	4658      	mov	r0, fp
   d4d6c:	f004 f892 	bl	d8e94 <__aeabi_atexit>
BleCharacteristic templvlCharacteristic ("templvl",    BleCharacteristicProperty::NOTIFY, templvl, SkateInfoService);
   d4d70:	4b72      	ldr	r3, [pc, #456]	; (d4f3c <_GLOBAL__sub_I_SystemMode+0x368>)
   d4d72:	f8df b228 	ldr.w	fp, [pc, #552]	; d4f9c <_GLOBAL__sub_I_SystemMode+0x3c8>
   d4d76:	681b      	ldr	r3, [r3, #0]
   d4d78:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
   d4d7c:	4649      	mov	r1, r9
   d4d7e:	4628      	mov	r0, r5
   d4d80:	9305      	str	r3, [sp, #20]
   d4d82:	f000 fd5b 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
   d4d86:	9b05      	ldr	r3, [sp, #20]
   d4d88:	9402      	str	r4, [sp, #8]
   d4d8a:	4632      	mov	r2, r6
   d4d8c:	9401      	str	r4, [sp, #4]
   d4d8e:	9500      	str	r5, [sp, #0]
   d4d90:	496b      	ldr	r1, [pc, #428]	; (d4f40 <_GLOBAL__sub_I_SystemMode+0x36c>)
   d4d92:	4658      	mov	r0, fp
   d4d94:	f7ff fcf9 	bl	d478a <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4d98:	463a      	mov	r2, r7
   d4d9a:	4641      	mov	r1, r8
   d4d9c:	4658      	mov	r0, fp
   d4d9e:	f004 f879 	bl	d8e94 <__aeabi_atexit>
BleCharacteristic rpmlvlCharacteristic  ("rpmlvl",     BleCharacteristicProperty::NOTIFY, rpmlvl, SkateInfoService);
   d4da2:	4b68      	ldr	r3, [pc, #416]	; (d4f44 <_GLOBAL__sub_I_SystemMode+0x370>)
   d4da4:	f8df b1f8 	ldr.w	fp, [pc, #504]	; d4fa0 <_GLOBAL__sub_I_SystemMode+0x3cc>
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
   d4dae:	4649      	mov	r1, r9
   d4db0:	4628      	mov	r0, r5
   d4db2:	9305      	str	r3, [sp, #20]
   d4db4:	f000 fd42 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
   d4db8:	9b05      	ldr	r3, [sp, #20]
   d4dba:	9402      	str	r4, [sp, #8]
   d4dbc:	4632      	mov	r2, r6
   d4dbe:	9401      	str	r4, [sp, #4]
   d4dc0:	9500      	str	r5, [sp, #0]
   d4dc2:	4961      	ldr	r1, [pc, #388]	; (d4f48 <_GLOBAL__sub_I_SystemMode+0x374>)
   d4dc4:	4658      	mov	r0, fp
   d4dc6:	f7ff fce0 	bl	d478a <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4dca:	463a      	mov	r2, r7
   d4dcc:	4641      	mov	r1, r8
   d4dce:	4658      	mov	r0, fp
   d4dd0:	f004 f860 	bl	d8e94 <__aeabi_atexit>
BleCharacteristic trplvlCharacteristic  ("triplvl",     BleCharacteristicProperty::NOTIFY, triplvl, SkateInfoService);    
   d4dd4:	4b5d      	ldr	r3, [pc, #372]	; (d4f4c <_GLOBAL__sub_I_SystemMode+0x378>)
   d4dd6:	f8df b1cc 	ldr.w	fp, [pc, #460]	; d4fa4 <_GLOBAL__sub_I_SystemMode+0x3d0>
   d4dda:	681b      	ldr	r3, [r3, #0]
   d4ddc:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
   d4de0:	4649      	mov	r1, r9
   d4de2:	4628      	mov	r0, r5
   d4de4:	9305      	str	r3, [sp, #20]
   d4de6:	f000 fd29 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
   d4dea:	9b05      	ldr	r3, [sp, #20]
   d4dec:	9402      	str	r4, [sp, #8]
   d4dee:	4632      	mov	r2, r6
   d4df0:	9401      	str	r4, [sp, #4]
   d4df2:	9500      	str	r5, [sp, #0]
   d4df4:	4956      	ldr	r1, [pc, #344]	; (d4f50 <_GLOBAL__sub_I_SystemMode+0x37c>)
   d4df6:	4658      	mov	r0, fp
   d4df8:	f7ff fcc7 	bl	d478a <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4dfc:	463a      	mov	r2, r7
   d4dfe:	4641      	mov	r1, r8
   d4e00:	4658      	mov	r0, fp
   d4e02:	f004 f847 	bl	d8e94 <__aeabi_atexit>
BleCharacteristic odolvlCharacteristic  ("odolvl",     BleCharacteristicProperty::NOTIFY, odolvl, SkateInfoService);    
   d4e06:	4b53      	ldr	r3, [pc, #332]	; (d4f54 <_GLOBAL__sub_I_SystemMode+0x380>)
   d4e08:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
   d4e0c:	4649      	mov	r1, r9
   d4e0e:	f8d3 a000 	ldr.w	sl, [r3]
   d4e12:	f8df 9194 	ldr.w	r9, [pc, #404]	; d4fa8 <_GLOBAL__sub_I_SystemMode+0x3d4>
   d4e16:	4628      	mov	r0, r5
   d4e18:	f000 fd10 	bl	d583c <_ZN8particle7BleUuidC1ERKS0_>
   d4e1c:	4653      	mov	r3, sl
   d4e1e:	4632      	mov	r2, r6
   d4e20:	9402      	str	r4, [sp, #8]
   d4e22:	9401      	str	r4, [sp, #4]
   d4e24:	9500      	str	r5, [sp, #0]
   d4e26:	494c      	ldr	r1, [pc, #304]	; (d4f58 <_GLOBAL__sub_I_SystemMode+0x384>)
   d4e28:	4648      	mov	r0, r9
   d4e2a:	f7ff fcae 	bl	d478a <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4e2e:	463a      	mov	r2, r7
   d4e30:	4641      	mov	r1, r8
   d4e32:	4648      	mov	r0, r9
   d4e34:	f004 f82e 	bl	d8e94 <__aeabi_atexit>
BleCharacteristic modeCharacteristic    ("cloudmode",  BleCharacteristicProperty::WRITE_WO_RSP, cloudmode, serviceUuid, onDataReceived, (void*)cloudmode);
   d4e38:	4b37      	ldr	r3, [pc, #220]	; (d4f18 <_GLOBAL__sub_I_SystemMode+0x344>)

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4e3a:	f8df 9170 	ldr.w	r9, [pc, #368]	; d4fac <_GLOBAL__sub_I_SystemMode+0x3d8>
   d4e3e:	f8d3 b000 	ldr.w	fp, [r3]
   d4e42:	4b46      	ldr	r3, [pc, #280]	; (d4f5c <_GLOBAL__sub_I_SystemMode+0x388>)
   d4e44:	f8c9 4000 	str.w	r4, [r9]
   d4e48:	f8d3 a000 	ldr.w	sl, [r3]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4e4c:	f8c9 4004 	str.w	r4, [r9, #4]
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4e50:	4651      	mov	r1, sl
   d4e52:	4630      	mov	r0, r6
   d4e54:	f000 fdf0 	bl	d5a38 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4e58:	4659      	mov	r1, fp
   d4e5a:	4628      	mov	r0, r5
   d4e5c:	f000 fdec 	bl	d5a38 <_ZN8particle7BleUuidC1EPKc>
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4e60:	2304      	movs	r3, #4
   d4e62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4e66:	4b3e      	ldr	r3, [pc, #248]	; (d4f60 <_GLOBAL__sub_I_SystemMode+0x38c>)
   d4e68:	9301      	str	r3, [sp, #4]
   d4e6a:	aa09      	add	r2, sp, #36	; 0x24
   d4e6c:	4633      	mov	r3, r6
   d4e6e:	4648      	mov	r0, r9
   d4e70:	f8cd a008 	str.w	sl, [sp, #8]
   d4e74:	9500      	str	r5, [sp, #0]
   d4e76:	493b      	ldr	r1, [pc, #236]	; (d4f64 <_GLOBAL__sub_I_SystemMode+0x390>)
   d4e78:	f001 fb42 	bl	d6500 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d4e7c:	463a      	mov	r2, r7
   d4e7e:	4641      	mov	r1, r8
   d4e80:	4648      	mov	r0, r9
   d4e82:	f004 f807 	bl	d8e94 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4e86:	4b38      	ldr	r3, [pc, #224]	; (d4f68 <_GLOBAL__sub_I_SystemMode+0x394>)
   d4e88:	9311      	str	r3, [sp, #68]	; 0x44
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4e8a:	f8df 8124 	ldr.w	r8, [pc, #292]	; d4fb0 <_GLOBAL__sub_I_SystemMode+0x3dc>
   d4e8e:	4b37      	ldr	r3, [pc, #220]	; (d4f6c <_GLOBAL__sub_I_SystemMode+0x398>)
   d4e90:	f8c8 3000 	str.w	r3, [r8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e94:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4e98:	f108 030c 	add.w	r3, r8, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e9c:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4ea0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4ea4:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ea8:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4eac:	e883 0003 	stmia.w	r3, {r0, r1}
   d4eb0:	4b2f      	ldr	r3, [pc, #188]	; (d4f70 <_GLOBAL__sub_I_SystemMode+0x39c>)
   d4eb2:	f8c8 3014 	str.w	r3, [r8, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4eb6:	f8d8 3018 	ldr.w	r3, [r8, #24]
   d4eba:	9314      	str	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d4ebc:	4b2d      	ldr	r3, [pc, #180]	; (d4f74 <_GLOBAL__sub_I_SystemMode+0x3a0>)
   d4ebe:	f8c8 3018 	str.w	r3, [r8, #24]
   d4ec2:	f888 4004 	strb.w	r4, [r8, #4]
   d4ec6:	f8c8 4008 	str.w	r4, [r8, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4eca:	4643      	mov	r3, r8
   d4ecc:	4a2a      	ldr	r2, [pc, #168]	; (d4f78 <_GLOBAL__sub_I_SystemMode+0x3a4>)
   d4ece:	9401      	str	r4, [sp, #4]
   d4ed0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4ed4:	9400      	str	r4, [sp, #0]
   d4ed6:	f108 0008 	add.w	r0, r8, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4eda:	9413      	str	r4, [sp, #76]	; 0x4c
   d4edc:	f000 f92e 	bl	d513c <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ee0:	4628      	mov	r0, r5
   d4ee2:	f7ff f9c1 	bl	d4268 <_ZNSt14_Function_baseD1Ev>

Timer timer(1000, calculateRPM);
   d4ee6:	463a      	mov	r2, r7
   d4ee8:	4924      	ldr	r1, [pc, #144]	; (d4f7c <_GLOBAL__sub_I_SystemMode+0x3a8>)
   d4eea:	4640      	mov	r0, r8
   d4eec:	f003 ffd2 	bl	d8e94 <__aeabi_atexit>
    od0 = odoMile & 255;
    EEPROM.write(ODO_EEPROM, od3);
    EEPROM.write(ODO_EEPROM + 1, od2);
    EEPROM.write(ODO_EEPROM + 2, od1);
    EEPROM.write(ODO_EEPROM + 3, od0);
}
   d4ef0:	b017      	add	sp, #92	; 0x5c
   d4ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ef6:	bf00      	nop
   d4ef8:	2003e2e8 	.word	0x2003e2e8
   d4efc:	2003e328 	.word	0x2003e328
   d4f00:	2003e284 	.word	0x2003e284
   d4f04:	000d4195 	.word	0x000d4195
   d4f08:	000d9d1c 	.word	0x000d9d1c
   d4f0c:	000da2ec 	.word	0x000da2ec
   d4f10:	000d9d34 	.word	0x000d9d34
   d4f14:	000d4221 	.word	0x000d4221
   d4f18:	2003e1f8 	.word	0x2003e1f8
   d4f1c:	2003e1f4 	.word	0x2003e1f4
   d4f20:	000d9d57 	.word	0x000d9d57
   d4f24:	2003e1f0 	.word	0x2003e1f0
   d4f28:	000d9d5e 	.word	0x000d9d5e
   d4f2c:	2003e204 	.word	0x2003e204
   d4f30:	000d9d66 	.word	0x000d9d66
   d4f34:	2003e1e8 	.word	0x2003e1e8
   d4f38:	000d9d71 	.word	0x000d9d71
   d4f3c:	2003e200 	.word	0x2003e200
   d4f40:	000d9d78 	.word	0x000d9d78
   d4f44:	2003e1ec 	.word	0x2003e1ec
   d4f48:	000d9d80 	.word	0x000d9d80
   d4f4c:	2003e20c 	.word	0x2003e20c
   d4f50:	000d9d87 	.word	0x000d9d87
   d4f54:	2003e1fc 	.word	0x2003e1fc
   d4f58:	000d9d8f 	.word	0x000d9d8f
   d4f5c:	2003e208 	.word	0x2003e208
   d4f60:	000d41a5 	.word	0x000d41a5
   d4f64:	000d9d96 	.word	0x000d9d96
   d4f68:	000d40d9 	.word	0x000d40d9
   d4f6c:	000d9d08 	.word	0x000d9d08
   d4f70:	000d4135 	.word	0x000d4135
   d4f74:	000d4131 	.word	0x000d4131
   d4f78:	000d4159 	.word	0x000d4159
   d4f7c:	000d4299 	.word	0x000d4299
   d4f80:	2003e2c4 	.word	0x2003e2c4
   d4f84:	2003e28c 	.word	0x2003e28c
   d4f88:	2003e368 	.word	0x2003e368
   d4f8c:	000d5f21 	.word	0x000d5f21
   d4f90:	2003e378 	.word	0x2003e378
   d4f94:	2003e2ec 	.word	0x2003e2ec
   d4f98:	2003e344 	.word	0x2003e344
   d4f9c:	2003e338 	.word	0x2003e338
   d4fa0:	2003e384 	.word	0x2003e384
   d4fa4:	2003e2ac 	.word	0x2003e2ac
   d4fa8:	2003e2a0 	.word	0x2003e2a0
   d4fac:	2003e34c 	.word	0x2003e34c
   d4fb0:	2003e2f8 	.word	0x2003e2f8

000d4fb4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	f000 f949 	bl	d524c <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4fba:	f000 f947 	bl	d524c <HAL_Pin_Map>
   d4fbe:	4b01      	ldr	r3, [pc, #4]	; (d4fc4 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4fc0:	6018      	str	r0, [r3, #0]
   d4fc2:	bd08      	pop	{r3, pc}
   d4fc4:	2003e38c 	.word	0x2003e38c

000d4fc8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4fc8:	b508      	push	{r3, lr}
   d4fca:	4b02      	ldr	r3, [pc, #8]	; (d4fd4 <hal_ble_stack_init+0xc>)
   d4fcc:	681b      	ldr	r3, [r3, #0]
   d4fce:	689b      	ldr	r3, [r3, #8]
   d4fd0:	9301      	str	r3, [sp, #4]
   d4fd2:	bd08      	pop	{r3, pc}
   d4fd4:	00030274 	.word	0x00030274

000d4fd8 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   d4fd8:	b508      	push	{r3, lr}
   d4fda:	4b02      	ldr	r3, [pc, #8]	; (d4fe4 <hal_ble_select_antenna+0xc>)
   d4fdc:	681b      	ldr	r3, [r3, #0]
   d4fde:	691b      	ldr	r3, [r3, #16]
   d4fe0:	9301      	str	r3, [sp, #4]
   d4fe2:	bd08      	pop	{r3, pc}
   d4fe4:	00030274 	.word	0x00030274

000d4fe8 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4fe8:	b508      	push	{r3, lr}
   d4fea:	4b02      	ldr	r3, [pc, #8]	; (d4ff4 <hal_ble_gap_set_advertising_data+0xc>)
   d4fec:	681b      	ldr	r3, [r3, #0]
   d4fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4ff0:	9301      	str	r3, [sp, #4]
   d4ff2:	bd08      	pop	{r3, pc}
   d4ff4:	00030274 	.word	0x00030274

000d4ff8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4ff8:	b508      	push	{r3, lr}
   d4ffa:	4b02      	ldr	r3, [pc, #8]	; (d5004 <hal_ble_gap_set_scan_response_data+0xc>)
   d4ffc:	681b      	ldr	r3, [r3, #0]
   d4ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5000:	9301      	str	r3, [sp, #4]
   d5002:	bd08      	pop	{r3, pc}
   d5004:	00030274 	.word	0x00030274

000d5008 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5008:	b508      	push	{r3, lr}
   d500a:	4b02      	ldr	r3, [pc, #8]	; (d5014 <hal_ble_gap_start_advertising+0xc>)
   d500c:	681b      	ldr	r3, [r3, #0]
   d500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5010:	9301      	str	r3, [sp, #4]
   d5012:	bd08      	pop	{r3, pc}
   d5014:	00030274 	.word	0x00030274

000d5018 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   d5018:	b508      	push	{r3, lr}
   d501a:	4b02      	ldr	r3, [pc, #8]	; (d5024 <hal_ble_gap_set_scan_parameters+0xc>)
   d501c:	681b      	ldr	r3, [r3, #0]
   d501e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d5020:	9301      	str	r3, [sp, #4]
   d5022:	bd08      	pop	{r3, pc}
   d5024:	00030274 	.word	0x00030274

000d5028 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   d5028:	b508      	push	{r3, lr}
   d502a:	4b02      	ldr	r3, [pc, #8]	; (d5034 <hal_ble_gap_get_scan_parameters+0xc>)
   d502c:	681b      	ldr	r3, [r3, #0]
   d502e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5030:	9301      	str	r3, [sp, #4]
   d5032:	bd08      	pop	{r3, pc}
   d5034:	00030274 	.word	0x00030274

000d5038 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5038:	b508      	push	{r3, lr}
   d503a:	4b03      	ldr	r3, [pc, #12]	; (d5048 <hal_ble_gap_disconnect+0x10>)
   d503c:	681b      	ldr	r3, [r3, #0]
   d503e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5042:	9301      	str	r3, [sp, #4]
   d5044:	bd08      	pop	{r3, pc}
   d5046:	0000      	.short	0x0000
   d5048:	00030274 	.word	0x00030274

000d504c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b03      	ldr	r3, [pc, #12]	; (d505c <hal_ble_gatt_server_add_service+0x10>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5056:	9301      	str	r3, [sp, #4]
   d5058:	bd08      	pop	{r3, pc}
   d505a:	0000      	.short	0x0000
   d505c:	00030274 	.word	0x00030274

000d5060 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b03      	ldr	r3, [pc, #12]	; (d5070 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d506a:	9301      	str	r3, [sp, #4]
   d506c:	bd08      	pop	{r3, pc}
   d506e:	0000      	.short	0x0000
   d5070:	00030274 	.word	0x00030274

000d5074 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b03      	ldr	r3, [pc, #12]	; (d5084 <hal_ble_gatt_client_write_with_response+0x10>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d507e:	9301      	str	r3, [sp, #4]
   d5080:	bd08      	pop	{r3, pc}
   d5082:	0000      	.short	0x0000
   d5084:	00030274 	.word	0x00030274

000d5088 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5088:	b508      	push	{r3, lr}
   d508a:	4b03      	ldr	r3, [pc, #12]	; (d5098 <hal_ble_gatt_client_write_without_response+0x10>)
   d508c:	681b      	ldr	r3, [r3, #0]
   d508e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5092:	9301      	str	r3, [sp, #4]
   d5094:	bd08      	pop	{r3, pc}
   d5096:	0000      	.short	0x0000
   d5098:	00030274 	.word	0x00030274

000d509c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b03      	ldr	r3, [pc, #12]	; (d50ac <hal_ble_gatt_server_add_characteristic+0x10>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d50a6:	9301      	str	r3, [sp, #4]
   d50a8:	bd08      	pop	{r3, pc}
   d50aa:	0000      	.short	0x0000
   d50ac:	00030274 	.word	0x00030274

000d50b0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b03      	ldr	r3, [pc, #12]	; (d50c0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d50ba:	9301      	str	r3, [sp, #4]
   d50bc:	bd08      	pop	{r3, pc}
   d50be:	0000      	.short	0x0000
   d50c0:	00030274 	.word	0x00030274

000d50c4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b03      	ldr	r3, [pc, #12]	; (d50d4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d50ce:	9301      	str	r3, [sp, #4]
   d50d0:	bd08      	pop	{r3, pc}
   d50d2:	0000      	.short	0x0000
   d50d4:	00030274 	.word	0x00030274

000d50d8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b03      	ldr	r3, [pc, #12]	; (d50e8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d50e2:	9301      	str	r3, [sp, #4]
   d50e4:	bd08      	pop	{r3, pc}
   d50e6:	0000      	.short	0x0000
   d50e8:	00030274 	.word	0x00030274

000d50ec <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <os_thread_is_current+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	689b      	ldr	r3, [r3, #8]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030248 	.word	0x00030248

000d50fc <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <os_thread_yield+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	68db      	ldr	r3, [r3, #12]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030248 	.word	0x00030248

000d510c <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <os_thread_join+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	691b      	ldr	r3, [r3, #16]
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030248 	.word	0x00030248

000d511c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <os_thread_cleanup+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	695b      	ldr	r3, [r3, #20]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030248 	.word	0x00030248

000d512c <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <os_thread_scheduling+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	69db      	ldr	r3, [r3, #28]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	00030248 	.word	0x00030248

000d513c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <os_timer_create+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	6a1b      	ldr	r3, [r3, #32]
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	00030248 	.word	0x00030248

000d514c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <os_timer_destroy+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	00030248 	.word	0x00030248

000d515c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <os_timer_get_id+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	00030248 	.word	0x00030248

000d516c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <os_timer_change+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030248 	.word	0x00030248

000d517c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <os_mutex_recursive_create+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030248 	.word	0x00030248

000d518c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <os_mutex_recursive_destroy+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030248 	.word	0x00030248

000d519c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <os_mutex_recursive_lock+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030248 	.word	0x00030248

000d51ac <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <os_mutex_recursive_unlock+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030248 	.word	0x00030248

000d51bc <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <os_timer_set_id+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030248 	.word	0x00030248

000d51cc <HAL_Core_Enter_Bootloader>:
DYNALIB_FN(2, hal_core, HAL_Core_Config, void(void))
DYNALIB_FN(3, hal_core, HAL_Core_Mode_Button_Pressed, bool(uint16_t))
DYNALIB_FN(4, hal_core, HAL_Core_Mode_Button_Reset, void(uint16_t))
DYNALIB_FN(5, hal_core, HAL_Core_System_Reset, void(void))
DYNALIB_FN(6, hal_core, HAL_Core_Factory_Reset, void(void))
DYNALIB_FN(7, hal_core, HAL_Core_Enter_Bootloader, void(bool))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <HAL_Core_Enter_Bootloader+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	69db      	ldr	r3, [r3, #28]
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030234 	.word	0x00030234

000d51dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <HAL_RNG_GetRandomNumber+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	685b      	ldr	r3, [r3, #4]
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030218 	.word	0x00030218

000d51ec <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <HAL_Delay_Microseconds+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	68db      	ldr	r3, [r3, #12]
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030218 	.word	0x00030218

000d51fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	695b      	ldr	r3, [r3, #20]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	00030218 	.word	0x00030218

000d520c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <HAL_EEPROM_Init+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	00030218 	.word	0x00030218

000d521c <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <HAL_EEPROM_Write+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	00030218 	.word	0x00030218

000d522c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <HAL_EEPROM_Get+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030218 	.word	0x00030218

000d523c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <HAL_EEPROM_Put+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030218 	.word	0x00030218

000d524c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <HAL_Pin_Map+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	681b      	ldr	r3, [r3, #0]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	0003022c 	.word	0x0003022c

000d525c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <HAL_Validate_Pin_Function+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	685b      	ldr	r3, [r3, #4]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	0003022c 	.word	0x0003022c

000d526c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <HAL_Pin_Mode+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	689b      	ldr	r3, [r3, #8]
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	0003022c 	.word	0x0003022c

000d527c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <HAL_Get_Pin_Mode+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	68db      	ldr	r3, [r3, #12]
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	0003022c 	.word	0x0003022c

000d528c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <HAL_GPIO_Write+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	691b      	ldr	r3, [r3, #16]
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	0003022c 	.word	0x0003022c

000d529c <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <HAL_Interrupts_Attach+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	699b      	ldr	r3, [r3, #24]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	0003022c 	.word	0x0003022c

000d52ac <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <HAL_Interrupts_Detach+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	69db      	ldr	r3, [r3, #28]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	0003022c 	.word	0x0003022c

000d52bc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <HAL_ADC_Read+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	0003022c 	.word	0x0003022c

000d52cc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <HAL_I2C_Write_Data+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	6a1b      	ldr	r3, [r3, #32]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030228 	.word	0x00030228

000d52dc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <HAL_I2C_Available_Data+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030228 	.word	0x00030228

000d52ec <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <HAL_I2C_Read_Data+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030228 	.word	0x00030228

000d52fc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <HAL_I2C_Peek_Data+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030228 	.word	0x00030228

000d530c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <HAL_I2C_Flush_Data+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030228 	.word	0x00030228

000d531c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <HAL_I2C_Is_Enabled+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030228 	.word	0x00030228

000d532c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <HAL_I2C_Init+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030228 	.word	0x00030228

000d533c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <inet_inet_ntop+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	695b      	ldr	r3, [r3, #20]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030264 	.word	0x00030264

000d534c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <netdb_freeaddrinfo+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	689b      	ldr	r3, [r3, #8]
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030268 	.word	0x00030268

000d535c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <netdb_getaddrinfo+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	68db      	ldr	r3, [r3, #12]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030268 	.word	0x00030268

000d536c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <HAL_SPI_Init+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	69db      	ldr	r3, [r3, #28]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	00030230 	.word	0x00030230

000d537c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <HAL_SPI_Is_Enabled+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	6a1b      	ldr	r3, [r3, #32]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030230 	.word	0x00030230

000d538c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <HAL_USART_Init+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	681b      	ldr	r3, [r3, #0]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	0003023c 	.word	0x0003023c

000d539c <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <HAL_USART_End+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	689b      	ldr	r3, [r3, #8]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	0003023c 	.word	0x0003023c

000d53ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <HAL_USART_Write_Data+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	68db      	ldr	r3, [r3, #12]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	0003023c 	.word	0x0003023c

000d53bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <HAL_USART_Available_Data+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	691b      	ldr	r3, [r3, #16]
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	0003023c 	.word	0x0003023c

000d53cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <HAL_USART_Read_Data+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	695b      	ldr	r3, [r3, #20]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	0003023c 	.word	0x0003023c

000d53dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <HAL_USART_Peek_Data+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	699b      	ldr	r3, [r3, #24]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	0003023c 	.word	0x0003023c

000d53ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <HAL_USART_Flush_Data+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	69db      	ldr	r3, [r3, #28]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	0003023c 	.word	0x0003023c

000d53fc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <HAL_USART_Is_Enabled+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	6a1b      	ldr	r3, [r3, #32]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	0003023c 	.word	0x0003023c

000d540c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <HAL_USART_Available_Data_For_Write+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	0003023c 	.word	0x0003023c

000d541c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <HAL_USART_BeginConfig+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	0003023c 	.word	0x0003023c

000d542c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <HAL_USB_USART_Init+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	681b      	ldr	r3, [r3, #0]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	0003024c 	.word	0x0003024c

000d543c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <HAL_USB_USART_Begin+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	685b      	ldr	r3, [r3, #4]
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	0003024c 	.word	0x0003024c

000d544c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <HAL_USB_USART_End+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	689b      	ldr	r3, [r3, #8]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	0003024c 	.word	0x0003024c

000d545c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <HAL_USB_USART_Available_Data+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	691b      	ldr	r3, [r3, #16]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	0003024c 	.word	0x0003024c

000d546c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	695b      	ldr	r3, [r3, #20]
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	0003024c 	.word	0x0003024c

000d547c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <HAL_USB_USART_Receive_Data+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	699b      	ldr	r3, [r3, #24]
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	0003024c 	.word	0x0003024c

000d548c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <HAL_USB_USART_Send_Data+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	69db      	ldr	r3, [r3, #28]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	0003024c 	.word	0x0003024c

000d549c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <HAL_USB_USART_Flush_Data+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6a1b      	ldr	r3, [r3, #32]
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	0003024c 	.word	0x0003024c

000d54ac <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <LED_SetSignalingColor+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	685b      	ldr	r3, [r3, #4]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	00030260 	.word	0x00030260

000d54bc <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <LED_Signaling_Start+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	689b      	ldr	r3, [r3, #8]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	00030260 	.word	0x00030260

000d54cc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <LED_Signaling_Stop+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	68db      	ldr	r3, [r3, #12]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	00030260 	.word	0x00030260

000d54dc <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <LED_RGB_IsOverRidden+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	699b      	ldr	r3, [r3, #24]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	00030260 	.word	0x00030260

000d54ec <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <LED_On+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	69db      	ldr	r3, [r3, #28]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	00030260 	.word	0x00030260

000d54fc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <panic_+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	00030260 	.word	0x00030260

000d550c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <log_message+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	00030260 	.word	0x00030260

000d551c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <log_level_name+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	00030260 	.word	0x00030260

000d552c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <log_set_callbacks+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	00030260 	.word	0x00030260

000d553c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <set_system_mode+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	685b      	ldr	r3, [r3, #4]
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	00030220 	.word	0x00030220

000d554c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <system_delay_ms+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	695b      	ldr	r3, [r3, #20]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030220 	.word	0x00030220

000d555c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <application_thread_current+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030220 	.word	0x00030220

000d556c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <application_thread_invoke+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030220 	.word	0x00030220

000d557c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b03      	ldr	r3, [pc, #12]	; (d558c <system_ctrl_set_app_request_handler+0x10>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5586:	9301      	str	r3, [sp, #4]
   d5588:	bd08      	pop	{r3, pc}
   d558a:	0000      	.short	0x0000
   d558c:	00030220 	.word	0x00030220

000d5590 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b03      	ldr	r3, [pc, #12]	; (d55a0 <system_ctrl_set_result+0x10>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d559a:	9301      	str	r3, [sp, #4]
   d559c:	bd08      	pop	{r3, pc}
   d559e:	0000      	.short	0x0000
   d55a0:	00030220 	.word	0x00030220

000d55a4 <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <spark_cloud_flag_connect+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	68db      	ldr	r3, [r3, #12]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	00030244 	.word	0x00030244

000d55b4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <spark_cloud_flag_connected+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	695b      	ldr	r3, [r3, #20]
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030244 	.word	0x00030244

000d55c4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <spark_send_event+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	6a1b      	ldr	r3, [r3, #32]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030244 	.word	0x00030244

000d55d4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030244 	.word	0x00030244

000d55e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <network_connect+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	685b      	ldr	r3, [r3, #4]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030240 	.word	0x00030240

000d55f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <network_connecting+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	689b      	ldr	r3, [r3, #8]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030240 	.word	0x00030240

000d5604 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <network_disconnect+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	68db      	ldr	r3, [r3, #12]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030240 	.word	0x00030240

000d5614 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <network_ready+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	691b      	ldr	r3, [r3, #16]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030240 	.word	0x00030240

000d5624 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <network_on+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	695b      	ldr	r3, [r3, #20]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030240 	.word	0x00030240

000d5634 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <network_off+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	699b      	ldr	r3, [r3, #24]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030240 	.word	0x00030240

000d5644 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <network_listen+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	69db      	ldr	r3, [r3, #28]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030240 	.word	0x00030240

000d5654 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <network_listening+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	6a1b      	ldr	r3, [r3, #32]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030240 	.word	0x00030240

000d5664 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <network_set_listen_timeout+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030240 	.word	0x00030240

000d5674 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <network_get_listen_timeout+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030240 	.word	0x00030240

000d5684 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <malloc+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	681b      	ldr	r3, [r3, #0]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	0003021c 	.word	0x0003021c

000d5694 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <free+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	685b      	ldr	r3, [r3, #4]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	0003021c 	.word	0x0003021c

000d56a4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <realloc+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	689b      	ldr	r3, [r3, #8]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	0003021c 	.word	0x0003021c

000d56b4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <vsnprintf+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	0003021c 	.word	0x0003021c

000d56c4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <abort+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	0003021c 	.word	0x0003021c

000d56d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <_malloc_r+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	0003021c 	.word	0x0003021c

000d56e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d56e4:	2100      	movs	r1, #0
   d56e6:	f7ff bf31 	b.w	d554c <system_delay_ms>

000d56ea <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d56ea:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56ec:	6883      	ldr	r3, [r0, #8]
   d56ee:	4604      	mov	r4, r0
   d56f0:	b90b      	cbnz	r3, d56f6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d56f2:	f003 fbf0 	bl	d8ed6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56f6:	68c3      	ldr	r3, [r0, #12]
   d56f8:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d56fa:	68a3      	ldr	r3, [r4, #8]
   d56fc:	b11b      	cbz	r3, d5706 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56fe:	2203      	movs	r2, #3
   d5700:	4621      	mov	r1, r4
   d5702:	4620      	mov	r0, r4
   d5704:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5706:	4620      	mov	r0, r4
   d5708:	2110      	movs	r1, #16
}
   d570a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d570e:	f003 bbc6 	b.w	d8e9e <_ZdlPvj>

000d5712 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5712:	4770      	bx	lr

000d5714 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5714:	2000      	movs	r0, #0
   d5716:	4770      	bx	lr

000d5718 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5718:	4770      	bx	lr

000d571a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d571a:	2000      	movs	r0, #0
   d571c:	4770      	bx	lr

000d571e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d571e:	4770      	bx	lr

000d5720 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5720:	2000      	movs	r0, #0
   d5722:	4770      	bx	lr

000d5724 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5724:	b510      	push	{r4, lr}
   d5726:	2114      	movs	r1, #20
   d5728:	4604      	mov	r4, r0
   d572a:	f003 fbb8 	bl	d8e9e <_ZdlPvj>
   d572e:	4620      	mov	r0, r4
   d5730:	bd10      	pop	{r4, pc}

000d5732 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5732:	b510      	push	{r4, lr}
   d5734:	2114      	movs	r1, #20
   d5736:	4604      	mov	r4, r0
   d5738:	f003 fbb1 	bl	d8e9e <_ZdlPvj>
   d573c:	4620      	mov	r0, r4
   d573e:	bd10      	pop	{r4, pc}

000d5740 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5740:	b510      	push	{r4, lr}
   d5742:	2114      	movs	r1, #20
   d5744:	4604      	mov	r4, r0
   d5746:	f003 fbaa 	bl	d8e9e <_ZdlPvj>
   d574a:	4620      	mov	r0, r4
   d574c:	bd10      	pop	{r4, pc}

000d574e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d574e:	f7fe bca6 	b.w	d409e <_ZdlPv>

000d5752 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5752:	f7fe bca4 	b.w	d409e <_ZdlPv>

000d5756 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5756:	f7fe bca2 	b.w	d409e <_ZdlPv>

000d575a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d575a:	b510      	push	{r4, lr}
   d575c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d575e:	6800      	ldr	r0, [r0, #0]
   d5760:	b108      	cbz	r0, d5766 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5762:	f7ff fd13 	bl	d518c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5766:	4620      	mov	r0, r4
   d5768:	bd10      	pop	{r4, pc}
	...

000d576c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d576c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d576e:	200a      	movs	r0, #10
   d5770:	4a02      	ldr	r2, [pc, #8]	; (d577c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d5772:	2100      	movs	r1, #0
   d5774:	f7ff fec2 	bl	d54fc <panic_>
    }
}
   d5778:	bd08      	pop	{r3, pc}
   d577a:	bf00      	nop
   d577c:	000d51ed 	.word	0x000d51ed

000d5780 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5780:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5782:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5784:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5786:	689b      	ldr	r3, [r3, #8]
   d5788:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d578a:	68a3      	ldr	r3, [r4, #8]
   d578c:	3b01      	subs	r3, #1
   d578e:	60a3      	str	r3, [r4, #8]
   d5790:	b92b      	cbnz	r3, d579e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5792:	6823      	ldr	r3, [r4, #0]
   d5794:	4620      	mov	r0, r4
   d5796:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d579c:	4718      	bx	r3
   d579e:	bd10      	pop	{r4, pc}

000d57a0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d57a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d57a4:	b2da      	uxtb	r2, r3
   d57a6:	2a09      	cmp	r2, #9
   d57a8:	d801      	bhi.n	d57ae <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d57aa:	4618      	mov	r0, r3
   d57ac:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d57ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d57b2:	2b05      	cmp	r3, #5
   d57b4:	d801      	bhi.n	d57ba <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d57b6:	3857      	subs	r0, #87	; 0x57
   d57b8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d57ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d57be:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d57c0:	bf94      	ite	ls
   d57c2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d57c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d57c8:	4770      	bx	lr
	...

000d57cc <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d57cc:	b510      	push	{r4, lr}
            locked_(false) {
   d57ce:	2300      	movs	r3, #0
   d57d0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d57d2:	4b04      	ldr	r3, [pc, #16]	; (d57e4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d57d4:	4604      	mov	r4, r0
   d57d6:	6818      	ldr	r0, [r3, #0]
   d57d8:	f7ff fce0 	bl	d519c <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d57dc:	2301      	movs	r3, #1
   d57de:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d57e0:	4620      	mov	r0, r4
   d57e2:	bd10      	pop	{r4, pc}
   d57e4:	2003e39c 	.word	0x2003e39c

000d57e8 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d57e8:	b510      	push	{r4, lr}
        if (locked_) {
   d57ea:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d57ec:	4604      	mov	r4, r0
        if (locked_) {
   d57ee:	b11b      	cbz	r3, d57f8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d57f0:	4b02      	ldr	r3, [pc, #8]	; (d57fc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d57f2:	6818      	ldr	r0, [r3, #0]
   d57f4:	f7ff fcda 	bl	d51ac <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d57f8:	4620      	mov	r0, r4
   d57fa:	bd10      	pop	{r4, pc}
   d57fc:	2003e39c 	.word	0x2003e39c

000d5800 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5800:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5802:	7982      	ldrb	r2, [r0, #6]
   d5804:	798b      	ldrb	r3, [r1, #6]
   d5806:	429a      	cmp	r2, r3
   d5808:	d106      	bne.n	d5818 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d580a:	2206      	movs	r2, #6
   d580c:	f004 f8fe 	bl	d9a0c <memcmp>
   d5810:	fab0 f080 	clz	r0, r0
   d5814:	0940      	lsrs	r0, r0, #5
   d5816:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5818:	2000      	movs	r0, #0
}
   d581a:	bd08      	pop	{r3, pc}

000d581c <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d581c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d581e:	2301      	movs	r3, #1
   d5820:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5822:	4b05      	ldr	r3, [pc, #20]	; (d5838 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d5824:	4602      	mov	r2, r0
   d5826:	f103 0110 	add.w	r1, r3, #16
   d582a:	f853 4b04 	ldr.w	r4, [r3], #4
   d582e:	f842 4b04 	str.w	r4, [r2], #4
   d5832:	428b      	cmp	r3, r1
   d5834:	d1f9      	bne.n	d582a <_ZN8particle7BleUuidC1Ev+0xe>
}
   d5836:	bd10      	pop	{r4, pc}
   d5838:	000da118 	.word	0x000da118

000d583c <_ZN8particle7BleUuidC1ERKS0_>:
        type_ = BleUuidType::LONG;
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuid::BleUuid(const BleUuid& uuid)
   d583c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d583e:	690b      	ldr	r3, [r1, #16]
   d5840:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5842:	f101 0210 	add.w	r2, r1, #16
   d5846:	4603      	mov	r3, r0
   d5848:	f851 4b04 	ldr.w	r4, [r1], #4
   d584c:	f843 4b04 	str.w	r4, [r3], #4
   d5850:	4291      	cmp	r1, r2
   d5852:	d1f9      	bne.n	d5848 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d5854:	bd10      	pop	{r4, pc}

000d5856 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5856:	b510      	push	{r4, lr}
    if (uuid128) {
   d5858:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d585a:	4604      	mov	r4, r0
    if (uuid128) {
   d585c:	b1b9      	cbz	r1, d588e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d585e:	2a01      	cmp	r2, #1
   d5860:	d109      	bne.n	d5876 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5862:	4603      	mov	r3, r0
   d5864:	f101 0210 	add.w	r2, r1, #16
   d5868:	f851 0b04 	ldr.w	r0, [r1], #4
   d586c:	f843 0b04 	str.w	r0, [r3], #4
   d5870:	4291      	cmp	r1, r2
   d5872:	d1f9      	bne.n	d5868 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d5874:	e008      	b.n	d5888 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d5876:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d5878:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d587a:	5c98      	ldrb	r0, [r3, r2]
   d587c:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5880:	3a01      	subs	r2, #1
   d5882:	b2d2      	uxtb	r2, r2
   d5884:	2aff      	cmp	r2, #255	; 0xff
   d5886:	d1f8      	bne.n	d587a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d5888:	2301      	movs	r3, #1
   d588a:	6123      	str	r3, [r4, #16]
   d588c:	e002      	b.n	d5894 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d588e:	2210      	movs	r2, #16
   d5890:	f004 f8f1 	bl	d9a76 <memset>
    }
}
   d5894:	4620      	mov	r0, r4
   d5896:	bd10      	pop	{r4, pc}

000d5898 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d5898:	b538      	push	{r3, r4, r5, lr}
   d589a:	4605      	mov	r5, r0
   d589c:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d589e:	461a      	mov	r2, r3
   d58a0:	f7ff ffd9 	bl	d5856 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d58a4:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d58a6:	0a24      	lsrs	r4, r4, #8
   d58a8:	736c      	strb	r4, [r5, #13]
}
   d58aa:	4628      	mov	r0, r5
   d58ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d58b0 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d58b0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d58b2:	6902      	ldr	r2, [r0, #16]
   d58b4:	b90a      	cbnz	r2, d58ba <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d58b6:	8980      	ldrh	r0, [r0, #12]
   d58b8:	e003      	b.n	d58c2 <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d58ba:	2210      	movs	r2, #16
   d58bc:	4903      	ldr	r1, [pc, #12]	; (d58cc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d58be:	f004 f8a5 	bl	d9a0c <memcmp>
   d58c2:	3000      	adds	r0, #0
   d58c4:	bf18      	it	ne
   d58c6:	2001      	movne	r0, #1
    }
}
   d58c8:	bd08      	pop	{r3, pc}
   d58ca:	bf00      	nop
   d58cc:	000da118 	.word	0x000da118

000d58d0 <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d58d0:	6900      	ldr	r0, [r0, #16]
   d58d2:	4770      	bx	lr

000d58d4 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d58d4:	b538      	push	{r3, r4, r5, lr}
   d58d6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d58d8:	2214      	movs	r2, #20
   d58da:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d58dc:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d58de:	f004 f8ca 	bl	d9a76 <memset>
    if (type_ == BleUuidType::SHORT) {
   d58e2:	6923      	ldr	r3, [r4, #16]
   d58e4:	b92b      	cbnz	r3, d58f2 <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d58e6:	7b62      	ldrb	r2, [r4, #13]
   d58e8:	7b23      	ldrb	r3, [r4, #12]
   d58ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d58ee:	802b      	strh	r3, [r5, #0]
   d58f0:	e00a      	b.n	d5908 <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d58f2:	2301      	movs	r3, #1
   d58f4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d58f6:	f104 0210 	add.w	r2, r4, #16
   d58fa:	462b      	mov	r3, r5
   d58fc:	f854 1b04 	ldr.w	r1, [r4], #4
   d5900:	f843 1b04 	str.w	r1, [r3], #4
   d5904:	4294      	cmp	r4, r2
   d5906:	d1f9      	bne.n	d58fc <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d5908:	4628      	mov	r0, r5
   d590a:	bd38      	pop	{r3, r4, r5, pc}

000d590c <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d590c:	7b42      	ldrb	r2, [r0, #13]
   d590e:	7b00      	ldrb	r0, [r0, #12]
}
   d5910:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d5914:	4770      	bx	lr

000d5916 <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d5916:	4770      	bx	lr

000d5918 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d5918:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d591a:	690b      	ldr	r3, [r1, #16]
   d591c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d591e:	f101 0210 	add.w	r2, r1, #16
   d5922:	4603      	mov	r3, r0
   d5924:	f851 4b04 	ldr.w	r4, [r1], #4
   d5928:	f843 4b04 	str.w	r4, [r3], #4
   d592c:	4291      	cmp	r1, r2
   d592e:	d1f9      	bne.n	d5924 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d5930:	bd10      	pop	{r4, pc}

000d5932 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d5932:	b510      	push	{r4, lr}
   d5934:	b086      	sub	sp, #24
   d5936:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d5938:	2201      	movs	r2, #1
   d593a:	a801      	add	r0, sp, #4
   d593c:	f7ff ff8b 	bl	d5856 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d5940:	a901      	add	r1, sp, #4
   d5942:	4620      	mov	r0, r4
   d5944:	f7ff ffe8 	bl	d5918 <_ZN8particle7BleUuidaSERKS0_>
}
   d5948:	b006      	add	sp, #24
   d594a:	bd10      	pop	{r4, pc}

000d594c <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d594c:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d594e:	6902      	ldr	r2, [r0, #16]
   d5950:	690b      	ldr	r3, [r1, #16]
   d5952:	429a      	cmp	r2, r3
   d5954:	d106      	bne.n	d5964 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d5956:	2210      	movs	r2, #16
   d5958:	f004 f858 	bl	d9a0c <memcmp>
   d595c:	fab0 f080 	clz	r0, r0
   d5960:	0940      	lsrs	r0, r0, #5
   d5962:	bd08      	pop	{r3, pc}
   d5964:	2000      	movs	r0, #0
}
   d5966:	bd08      	pop	{r3, pc}

000d5968 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d5968:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d596a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d596c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d596e:	4b31      	ldr	r3, [pc, #196]	; (d5a34 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5970:	460e      	mov	r6, r1
   d5972:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5974:	4602      	mov	r2, r0
   d5976:	f103 0110 	add.w	r1, r3, #16
   d597a:	f853 0b04 	ldr.w	r0, [r3], #4
   d597e:	f842 0b04 	str.w	r0, [r2], #4
   d5982:	428b      	cmp	r3, r1
   d5984:	d1f9      	bne.n	d597a <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d5986:	2e00      	cmp	r6, #0
   d5988:	d051      	beq.n	d5a2e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d598a:	2124      	movs	r1, #36	; 0x24
   d598c:	4630      	mov	r0, r6
   d598e:	f004 f8fd 	bl	d9b8c <strnlen>
   d5992:	2804      	cmp	r0, #4
   d5994:	d010      	beq.n	d59b8 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d5996:	2700      	movs	r7, #0
   d5998:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d599a:	2124      	movs	r1, #36	; 0x24
   d599c:	4630      	mov	r0, r6
   d599e:	f004 f8f5 	bl	d9b8c <strnlen>
   d59a2:	42b8      	cmp	r0, r7
   d59a4:	d901      	bls.n	d59aa <_ZN8particle7BleUuid9constructEPKc+0x42>
   d59a6:	bb44      	cbnz	r4, d59fa <_ZN8particle7BleUuid9constructEPKc+0x92>
   d59a8:	e041      	b.n	d5a2e <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d59aa:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d59ac:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d59ae:	42a5      	cmp	r5, r4
   d59b0:	d03d      	beq.n	d5a2e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d59b2:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d59b6:	e7fa      	b.n	d59ae <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d59b8:	7830      	ldrb	r0, [r6, #0]
   d59ba:	f7ff fef1 	bl	d57a0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d59be:	1e04      	subs	r4, r0, #0
   d59c0:	db18      	blt.n	d59f4 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d59c2:	7870      	ldrb	r0, [r6, #1]
   d59c4:	f7ff feec 	bl	d57a0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d59c8:	2800      	cmp	r0, #0
   d59ca:	db13      	blt.n	d59f4 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d59cc:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d59d0:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d59d4:	78b0      	ldrb	r0, [r6, #2]
   d59d6:	f7ff fee3 	bl	d57a0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d59da:	1e04      	subs	r4, r0, #0
   d59dc:	db0a      	blt.n	d59f4 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d59de:	78f0      	ldrb	r0, [r6, #3]
   d59e0:	f7ff fede 	bl	d57a0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d59e4:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d59e6:	bfa1      	itttt	ge
   d59e8:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d59ec:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d59f0:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d59f2:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d59f4:	2300      	movs	r3, #0
   d59f6:	612b      	str	r3, [r5, #16]
   d59f8:	e019      	b.n	d5a2e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d59fa:	5df0      	ldrb	r0, [r6, r7]
   d59fc:	f7ff fed0 	bl	d57a0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5a00:	0603      	lsls	r3, r0, #24
   d5a02:	d412      	bmi.n	d5a2a <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d5a04:	3c01      	subs	r4, #1
   d5a06:	0100      	lsls	r0, r0, #4
   d5a08:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d5a0a:	2124      	movs	r1, #36	; 0x24
   d5a0c:	4630      	mov	r0, r6
   d5a0e:	f004 f8bd 	bl	d9b8c <strnlen>
   d5a12:	3701      	adds	r7, #1
   d5a14:	4287      	cmp	r7, r0
   d5a16:	d208      	bcs.n	d5a2a <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d5a18:	5df0      	ldrb	r0, [r6, r7]
   d5a1a:	f7ff fec1 	bl	d57a0 <_ZN8particle11hexToNibbleEc>
   d5a1e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5a20:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d5a22:	bfa2      	ittt	ge
   d5a24:	5d2b      	ldrbge	r3, [r5, r4]
   d5a26:	4318      	orrge	r0, r3
   d5a28:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5a2a:	3701      	adds	r7, #1
   d5a2c:	e7b5      	b.n	d599a <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d5a2e:	b003      	add	sp, #12
   d5a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a32:	bf00      	nop
   d5a34:	000da118 	.word	0x000da118

000d5a38 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d5a38:	b538      	push	{r3, r4, r5, lr}
   d5a3a:	4604      	mov	r4, r0
   d5a3c:	460d      	mov	r5, r1
        : BleUuid() {
   d5a3e:	f7ff feed 	bl	d581c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5a42:	4620      	mov	r0, r4
   d5a44:	4629      	mov	r1, r5
   d5a46:	f7ff ff8f 	bl	d5968 <_ZN8particle7BleUuid9constructEPKc>
}
   d5a4a:	4620      	mov	r0, r4
   d5a4c:	bd38      	pop	{r3, r4, r5, pc}

000d5a4e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5a50:	b18b      	cbz	r3, d5a76 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5a52:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5a54:	1ce5      	adds	r5, r4, #3
   d5a56:	428d      	cmp	r5, r1
   d5a58:	d80f      	bhi.n	d5a7a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5a5a:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5a5c:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5a5e:	5d87      	ldrb	r7, [r0, r6]
   d5a60:	4297      	cmp	r7, r2
   d5a62:	d105      	bne.n	d5a70 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5a64:	442e      	add	r6, r5
   d5a66:	42b1      	cmp	r1, r6
   d5a68:	d307      	bcc.n	d5a7a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5a6a:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5a6c:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5a70:	3501      	adds	r5, #1
   d5a72:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5a74:	e7ee      	b.n	d5a54 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5a76:	4618      	mov	r0, r3
   d5a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a7a:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a7e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5a7e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5a82:	4604      	mov	r4, r0
   d5a84:	460e      	mov	r6, r1
   d5a86:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5a88:	4617      	mov	r7, r2
   d5a8a:	2a00      	cmp	r2, #0
   d5a8c:	d03a      	beq.n	d5b04 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5a8e:	460a      	mov	r2, r1
   d5a90:	ab01      	add	r3, sp, #4
   d5a92:	6a01      	ldr	r1, [r0, #32]
   d5a94:	f7ff ffdb 	bl	d5a4e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5a98:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5a9c:	6a22      	ldr	r2, [r4, #32]
   d5a9e:	bb03      	cbnz	r3, d5ae2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5aa0:	b1f8      	cbz	r0, d5ae2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5aa2:	1c96      	adds	r6, r2, #2
   d5aa4:	442e      	add	r6, r5
   d5aa6:	1a36      	subs	r6, r6, r0
   d5aa8:	2e1f      	cmp	r6, #31
   d5aaa:	d82b      	bhi.n	d5b04 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5aac:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5ab0:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5ab4:	ebc8 0202 	rsb	r2, r8, r2
   d5ab8:	1a12      	subs	r2, r2, r0
   d5aba:	eb00 0108 	add.w	r1, r0, r8
   d5abe:	eb05 0009 	add.w	r0, r5, r9
   d5ac2:	b292      	uxth	r2, r2
   d5ac4:	4421      	add	r1, r4
   d5ac6:	4420      	add	r0, r4
   d5ac8:	f003 ffba 	bl	d9a40 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5acc:	1c6b      	adds	r3, r5, #1
   d5ace:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5ad2:	462a      	mov	r2, r5
   d5ad4:	4639      	mov	r1, r7
   d5ad6:	eb04 0009 	add.w	r0, r4, r9
   d5ada:	f003 ffa6 	bl	d9a2a <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5ade:	6226      	str	r6, [r4, #32]
   d5ae0:	e010      	b.n	d5b04 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5ae2:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5ae4:	182b      	adds	r3, r5, r0
   d5ae6:	2b1f      	cmp	r3, #31
   d5ae8:	d80c      	bhi.n	d5b04 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5aea:	1c6b      	adds	r3, r5, #1
   d5aec:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5aee:	4422      	add	r2, r4
   d5af0:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5af2:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5af4:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5af6:	4420      	add	r0, r4
   d5af8:	462a      	mov	r2, r5
   d5afa:	f003 ff96 	bl	d9a2a <memcpy>
        selfLen_ += len;
   d5afe:	6a22      	ldr	r2, [r4, #32]
   d5b00:	442a      	add	r2, r5
   d5b02:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5b04:	6a20      	ldr	r0, [r4, #32]
}
   d5b06:	b003      	add	sp, #12
   d5b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5b0c <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5b0e:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5b10:	4603      	mov	r3, r0
   d5b12:	f100 021f 	add.w	r2, r0, #31
   d5b16:	2000      	movs	r0, #0
   d5b18:	f803 0b01 	strb.w	r0, [r3], #1
   d5b1c:	4293      	cmp	r3, r2
   d5b1e:	f04f 0100 	mov.w	r1, #0
   d5b22:	d1f9      	bne.n	d5b18 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5b24:	aa04      	add	r2, sp, #16
   d5b26:	2306      	movs	r3, #6
   d5b28:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5b2c:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5b2e:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5b30:	9100      	str	r1, [sp, #0]
   d5b32:	4620      	mov	r0, r4
   d5b34:	4619      	mov	r1, r3
   d5b36:	f7ff ffa2 	bl	d5a7e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5b3a:	4620      	mov	r0, r4
   d5b3c:	b004      	add	sp, #16
   d5b3e:	bd10      	pop	{r4, pc}

000d5b40 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d5b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b42:	460c      	mov	r4, r1
   d5b44:	4605      	mov	r5, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d5b46:	2114      	movs	r1, #20
   d5b48:	4620      	mov	r0, r4
   d5b4a:	f004 f81f 	bl	d9b8c <strnlen>
   d5b4e:	2300      	movs	r3, #0
   d5b50:	9300      	str	r3, [sp, #0]
   d5b52:	4622      	mov	r2, r4
   d5b54:	4603      	mov	r3, r0
   d5b56:	2109      	movs	r1, #9
   d5b58:	4628      	mov	r0, r5
   d5b5a:	f7ff ff90 	bl	d5a7e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5b5e:	b003      	add	sp, #12
   d5b60:	bd30      	pop	{r4, r5, pc}

000d5b62 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5b64:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5b66:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5b68:	ab01      	add	r3, sp, #4
   d5b6a:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5b6c:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5b6e:	f7ff ff6e 	bl	d5a4e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d5b72:	4605      	mov	r5, r0
   d5b74:	b178      	cbz	r0, d5b96 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5b76:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5b78:	6a22      	ldr	r2, [r4, #32]
   d5b7a:	1829      	adds	r1, r5, r0
   d5b7c:	1a12      	subs	r2, r2, r0
   d5b7e:	1b52      	subs	r2, r2, r5
   d5b80:	4421      	add	r1, r4
   d5b82:	4420      	add	r0, r4
   d5b84:	f003 ff51 	bl	d9a2a <memcpy>
        selfLen_ -= len;
   d5b88:	6a23      	ldr	r3, [r4, #32]
   d5b8a:	1b5d      	subs	r5, r3, r5
   d5b8c:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d5b8e:	4631      	mov	r1, r6
   d5b90:	4620      	mov	r0, r4
   d5b92:	f7ff ffe6 	bl	d5b62 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d5b96:	b002      	add	sp, #8
   d5b98:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5b9c <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5b9c:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5b9e:	2500      	movs	r5, #0
   d5ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5ba4:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5ba6:	8043      	strh	r3, [r0, #2]
   d5ba8:	220e      	movs	r2, #14
   d5baa:	4629      	mov	r1, r5
   d5bac:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5bae:	7105      	strb	r5, [r0, #4]
   d5bb0:	3006      	adds	r0, #6
   d5bb2:	f003 ff60 	bl	d9a76 <memset>
   d5bb6:	f104 0014 	add.w	r0, r4, #20
   d5bba:	f7ff fe2f 	bl	d581c <_ZN8particle7BleUuidC1Ev>
   d5bbe:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5bc2:	f7ff fe2b 	bl	d581c <_ZN8particle7BleUuidC1Ev>
   d5bc6:	4904      	ldr	r1, [pc, #16]	; (d5bd8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5bc8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5bcc:	f002 fe62 	bl	d8894 <_ZN6StringC1EPK19__FlashStringHelper>
   d5bd0:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5bd2:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5bd4:	4620      	mov	r0, r4
   d5bd6:	bd38      	pop	{r3, r4, r5, pc}
   d5bd8:	000da2ac 	.word	0x000da2ac

000d5bdc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5bdc:	b510      	push	{r4, lr}
   d5bde:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5be0:	69c2      	ldr	r2, [r0, #28]
   d5be2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5be6:	4293      	cmp	r3, r2
   d5be8:	4618      	mov	r0, r3
   d5bea:	d006      	beq.n	d5bfa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5bec:	6804      	ldr	r4, [r0, #0]
   d5bee:	8824      	ldrh	r4, [r4, #0]
   d5bf0:	428c      	cmp	r4, r1
   d5bf2:	f103 0308 	add.w	r3, r3, #8
   d5bf6:	d1f6      	bne.n	d5be6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5bf8:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5bfa:	2000      	movs	r0, #0
    }
   d5bfc:	bd10      	pop	{r4, pc}
	...

000d5c00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5c00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5c04:	4680      	mov	r8, r0
   d5c06:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5c08:	460e      	mov	r6, r1
   d5c0a:	b369      	cbz	r1, d5c68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5c0c:	b362      	cbz	r2, d5c68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5c0e:	2af4      	cmp	r2, #244	; 0xf4
   d5c10:	6805      	ldr	r5, [r0, #0]
   d5c12:	bf28      	it	cs
   d5c14:	22f4      	movcs	r2, #244	; 0xf4
   d5c16:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5c18:	782a      	ldrb	r2, [r5, #0]
   d5c1a:	b1a2      	cbz	r2, d5c46 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d5c1c:	792b      	ldrb	r3, [r5, #4]
   d5c1e:	0798      	lsls	r0, r3, #30
   d5c20:	d507      	bpl.n	d5c32 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5c22:	2300      	movs	r3, #0
   d5c24:	4622      	mov	r2, r4
   d5c26:	89a8      	ldrh	r0, [r5, #12]
   d5c28:	f7ff fa1a 	bl	d5060 <hal_ble_gatt_server_set_characteristic_value>
   d5c2c:	2800      	cmp	r0, #0
   d5c2e:	da02      	bge.n	d5c36 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5c30:	e043      	b.n	d5cba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5c32:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5c36:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d5c3a:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d5c3c:	06da      	lsls	r2, r3, #27
   d5c3e:	d518      	bpl.n	d5c72 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5c40:	2f01      	cmp	r7, #1
   d5c42:	d123      	bne.n	d5c8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5c44:	e015      	b.n	d5c72 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5c46:	8868      	ldrh	r0, [r5, #2]
   d5c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5c4c:	4298      	cmp	r0, r3
   d5c4e:	d00d      	beq.n	d5c6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d5c50:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5c52:	0759      	lsls	r1, r3, #29
   d5c54:	d523      	bpl.n	d5c9e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5c56:	2f01      	cmp	r7, #1
   d5c58:	d021      	beq.n	d5c9e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c5a:	89a9      	ldrh	r1, [r5, #12]
   d5c5c:	9200      	str	r2, [sp, #0]
   d5c5e:	4623      	mov	r3, r4
   d5c60:	4632      	mov	r2, r6
   d5c62:	f7ff fa11 	bl	d5088 <hal_ble_gatt_client_write_without_response>
   d5c66:	e028      	b.n	d5cba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5c68:	4815      	ldr	r0, [pc, #84]	; (d5cc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d5c6a:	e026      	b.n	d5cba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d5c6c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5c70:	e023      	b.n	d5cba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5c72:	069a      	lsls	r2, r3, #26
   d5c74:	d521      	bpl.n	d5cba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d5c76:	2f02      	cmp	r7, #2
   d5c78:	d01f      	beq.n	d5cba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c7a:	89a8      	ldrh	r0, [r5, #12]
   d5c7c:	2300      	movs	r3, #0
   d5c7e:	4622      	mov	r2, r4
   d5c80:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5c82:	b002      	add	sp, #8
   d5c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c88:	f7ff ba26 	b.w	d50d8 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c8c:	89a8      	ldrh	r0, [r5, #12]
   d5c8e:	2300      	movs	r3, #0
   d5c90:	4622      	mov	r2, r4
   d5c92:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5c94:	b002      	add	sp, #8
   d5c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c9a:	f7ff ba13 	b.w	d50c4 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5c9e:	071b      	lsls	r3, r3, #28
   d5ca0:	d501      	bpl.n	d5ca6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d5ca2:	2f02      	cmp	r7, #2
   d5ca4:	d102      	bne.n	d5cac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5ca6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5caa:	e006      	b.n	d5cba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5cac:	2300      	movs	r3, #0
   d5cae:	89a9      	ldrh	r1, [r5, #12]
   d5cb0:	9300      	str	r3, [sp, #0]
   d5cb2:	4632      	mov	r2, r6
   d5cb4:	4623      	mov	r3, r4
   d5cb6:	f7ff f9dd 	bl	d5074 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5cba:	b002      	add	sp, #8
   d5cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5cc0:	fffffef2 	.word	0xfffffef2

000d5cc4 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5cc4:	b510      	push	{r4, lr}
    return impl()->address();
   d5cc6:	680a      	ldr	r2, [r1, #0]
   d5cc8:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5ccc:	6003      	str	r3, [r0, #0]
   d5cce:	6853      	ldr	r3, [r2, #4]
   d5cd0:	6043      	str	r3, [r0, #4]
}
   d5cd2:	bd10      	pop	{r4, pc}

000d5cd4 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5cd6:	6802      	ldr	r2, [r0, #0]
   d5cd8:	680b      	ldr	r3, [r1, #0]
   d5cda:	8812      	ldrh	r2, [r2, #0]
   d5cdc:	881b      	ldrh	r3, [r3, #0]
   d5cde:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5ce0:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5ce2:	d10c      	bne.n	d5cfe <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5ce4:	4601      	mov	r1, r0
   d5ce6:	4668      	mov	r0, sp
   d5ce8:	f7ff ffec 	bl	d5cc4 <_ZNK8particle13BlePeerDevice7addressEv>
   d5cec:	4621      	mov	r1, r4
   d5cee:	a802      	add	r0, sp, #8
   d5cf0:	f7ff ffe8 	bl	d5cc4 <_ZNK8particle13BlePeerDevice7addressEv>
   d5cf4:	a902      	add	r1, sp, #8
   d5cf6:	4668      	mov	r0, sp
   d5cf8:	f7ff fd82 	bl	d5800 <_ZNK8particle10BleAddresseqERKS0_>
   d5cfc:	b900      	cbnz	r0, d5d00 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5cfe:	2000      	movs	r0, #0
}
   d5d00:	b004      	add	sp, #16
   d5d02:	bd10      	pop	{r4, pc}

000d5d04 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5d04:	b510      	push	{r4, lr}
   d5d06:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5d08:	2034      	movs	r0, #52	; 0x34
   d5d0a:	f7fe f9c6 	bl	d409a <_Znwj>
   d5d0e:	4601      	mov	r1, r0
   d5d10:	b168      	cbz	r0, d5d2e <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5d12:	2300      	movs	r3, #0
   d5d14:	6003      	str	r3, [r0, #0]
   d5d16:	6043      	str	r3, [r0, #4]
   d5d18:	6083      	str	r3, [r0, #8]
   d5d1a:	60c3      	str	r3, [r0, #12]
   d5d1c:	6103      	str	r3, [r0, #16]
   d5d1e:	6143      	str	r3, [r0, #20]
   d5d20:	6183      	str	r3, [r0, #24]
   d5d22:	61c3      	str	r3, [r0, #28]
   d5d24:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5d26:	6243      	str	r3, [r0, #36]	; 0x24
   d5d28:	6283      	str	r3, [r0, #40]	; 0x28
   d5d2a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5d2c:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5d2e:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5d30:	b919      	cbnz	r1, d5d3a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5d32:	4a0a      	ldr	r2, [pc, #40]	; (d5d5c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5d34:	200a      	movs	r0, #10
   d5d36:	f7ff fbe1 	bl	d54fc <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5d3a:	2000      	movs	r0, #0
   d5d3c:	f7ff f944 	bl	d4fc8 <hal_ble_stack_init>
   d5d40:	b120      	cbz	r0, d5d4c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5d42:	4a06      	ldr	r2, [pc, #24]	; (d5d5c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5d44:	2100      	movs	r1, #0
   d5d46:	200a      	movs	r0, #10
   d5d48:	f7ff fbd8 	bl	d54fc <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5d4c:	2200      	movs	r2, #0
   d5d4e:	6821      	ldr	r1, [r4, #0]
   d5d50:	4803      	ldr	r0, [pc, #12]	; (d5d60 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5d52:	f7ff f9ad 	bl	d50b0 <hal_ble_set_callback_on_periph_link_events>
}
   d5d56:	4620      	mov	r0, r4
   d5d58:	bd10      	pop	{r4, pc}
   d5d5a:	bf00      	nop
   d5d5c:	000d51ed 	.word	0x000d51ed
   d5d60:	000d61ad 	.word	0x000d61ad

000d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5d64:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5d66:	4c0a      	ldr	r4, [pc, #40]	; (d5d90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5d68:	6823      	ldr	r3, [r4, #0]
   d5d6a:	07db      	lsls	r3, r3, #31
   d5d6c:	d40e      	bmi.n	d5d8c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5d6e:	4620      	mov	r0, r4
   d5d70:	f7fe f9a4 	bl	d40bc <__cxa_guard_acquire>
   d5d74:	b150      	cbz	r0, d5d8c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5d76:	4807      	ldr	r0, [pc, #28]	; (d5d94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5d78:	f7ff ffc4 	bl	d5d04 <_ZN8particle14BleLocalDeviceC1Ev>
   d5d7c:	4620      	mov	r0, r4
   d5d7e:	f7fe f9a2 	bl	d40c6 <__cxa_guard_release>
   d5d82:	4a05      	ldr	r2, [pc, #20]	; (d5d98 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5d84:	4905      	ldr	r1, [pc, #20]	; (d5d9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5d86:	4803      	ldr	r0, [pc, #12]	; (d5d94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5d88:	f003 f884 	bl	d8e94 <__aeabi_atexit>
    return instance;
}
   d5d8c:	4801      	ldr	r0, [pc, #4]	; (d5d94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5d8e:	bd10      	pop	{r4, pc}
   d5d90:	2003e394 	.word	0x2003e394
   d5d94:	2003e390 	.word	0x2003e390
   d5d98:	2003e284 	.word	0x2003e284
   d5d9c:	000d5f95 	.word	0x000d5f95

000d5da0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5da0:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5da2:	6803      	ldr	r3, [r0, #0]
   d5da4:	3b09      	subs	r3, #9
   d5da6:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5da8:	b08a      	sub	sp, #40	; 0x28
   d5daa:	4604      	mov	r4, r0
   d5dac:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5dae:	d819      	bhi.n	d5de4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5db0:	f7ff ffd8 	bl	d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5db4:	88a1      	ldrh	r1, [r4, #4]
   d5db6:	6800      	ldr	r0, [r0, #0]
   d5db8:	f7ff ff10 	bl	d5bdc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5dbc:	4602      	mov	r2, r0
   d5dbe:	b958      	cbnz	r0, d5dd8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5dc0:	2320      	movs	r3, #32
   d5dc2:	9302      	str	r3, [sp, #8]
   d5dc4:	4b08      	ldr	r3, [pc, #32]	; (d5de8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d5dc6:	9003      	str	r0, [sp, #12]
   d5dc8:	9300      	str	r3, [sp, #0]
   d5dca:	aa02      	add	r2, sp, #8
   d5dcc:	4603      	mov	r3, r0
   d5dce:	4907      	ldr	r1, [pc, #28]	; (d5dec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5dd0:	2032      	movs	r0, #50	; 0x32
   d5dd2:	f7ff fb9b 	bl	d550c <log_message>
   d5dd6:	e005      	b.n	d5de4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d5dd8:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d5dda:	b11d      	cbz	r5, d5de4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5ddc:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d5dde:	68e1      	ldr	r1, [r4, #12]
   d5de0:	6920      	ldr	r0, [r4, #16]
   d5de2:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d5de4:	b00a      	add	sp, #40	; 0x28
   d5de6:	bd70      	pop	{r4, r5, r6, pc}
   d5de8:	000d9fc2 	.word	0x000d9fc2
   d5dec:	000d9f78 	.word	0x000d9f78

000d5df0 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
int BleLocalDevice::txPower(int8_t* txPower) const {
    WiringBleLock lk;
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   d5df0:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   d5df2:	2100      	movs	r1, #0
   d5df4:	f7ff b8f0 	b.w	d4fd8 <hal_ble_select_antenna>

000d5df8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5df8:	4608      	mov	r0, r1
   d5dfa:	b909      	cbnz	r1, d5e00 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5dfc:	460a      	mov	r2, r1
   d5dfe:	e001      	b.n	d5e04 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5e00:	6a09      	ldr	r1, [r1, #32]
   d5e02:	2200      	movs	r2, #0
   d5e04:	f7ff b8f0 	b.w	d4fe8 <hal_ble_gap_set_advertising_data>

000d5e08 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5e08:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d5e0a:	460c      	mov	r4, r1
   d5e0c:	b911      	cbnz	r1, d5e14 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5e0e:	460a      	mov	r2, r1
   d5e10:	4608      	mov	r0, r1
   d5e12:	e006      	b.n	d5e22 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5e14:	2101      	movs	r1, #1
   d5e16:	4620      	mov	r0, r4
   d5e18:	f7ff fea3 	bl	d5b62 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5e1c:	6a21      	ldr	r1, [r4, #32]
   d5e1e:	2200      	movs	r2, #0
   d5e20:	4620      	mov	r0, r4
    }
}
   d5e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5e26:	f7ff b8e7 	b.w	d4ff8 <hal_ble_gap_set_scan_response_data>

000d5e2a <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5e2a:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5e2c:	a801      	add	r0, sp, #4
   d5e2e:	f7ff fccd 	bl	d57cc <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5e32:	2000      	movs	r0, #0
   d5e34:	f7ff f8e8 	bl	d5008 <hal_ble_gap_start_advertising>
   d5e38:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d5e3a:	a801      	add	r0, sp, #4
   d5e3c:	f7ff fcd4 	bl	d57e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5e40:	4620      	mov	r0, r4
   d5e42:	b002      	add	sp, #8
   d5e44:	bd10      	pop	{r4, pc}

000d5e46 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5e46:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5e48:	4605      	mov	r5, r0
   d5e4a:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5e4c:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5e4e:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5e50:	f7ff fcbc 	bl	d57cc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5e54:	4621      	mov	r1, r4
   d5e56:	4628      	mov	r0, r5
   d5e58:	f7ff ffce 	bl	d5df8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5e5c:	2800      	cmp	r0, #0
   d5e5e:	db08      	blt.n	d5e72 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5e60:	4631      	mov	r1, r6
   d5e62:	4628      	mov	r0, r5
   d5e64:	f7ff ffd0 	bl	d5e08 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5e68:	2800      	cmp	r0, #0
   d5e6a:	db02      	blt.n	d5e72 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d5e6c:	4628      	mov	r0, r5
   d5e6e:	f7ff ffdc 	bl	d5e2a <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5e72:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5e74:	a801      	add	r0, sp, #4
   d5e76:	f7ff fcb7 	bl	d57e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	b002      	add	sp, #8
   d5e7e:	bd70      	pop	{r4, r5, r6, pc}

000d5e80 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d5e80:	b530      	push	{r4, r5, lr}
   d5e82:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d5e84:	2400      	movs	r4, #0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d5e86:	4668      	mov	r0, sp
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d5e88:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5e8a:	f7ff fc9f 	bl	d57cc <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d5e8e:	230c      	movs	r3, #12
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d5e90:	4621      	mov	r1, r4
   d5e92:	a801      	add	r0, sp, #4
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d5e94:	9401      	str	r4, [sp, #4]
   d5e96:	9402      	str	r4, [sp, #8]
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d5e98:	f8ad 3006 	strh.w	r3, [sp, #6]
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d5e9c:	9403      	str	r4, [sp, #12]
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d5e9e:	f7ff f8c3 	bl	d5028 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d5ea2:	4621      	mov	r1, r4
   d5ea4:	a801      	add	r0, sp, #4
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
   d5ea6:	f8ad 500c 	strh.w	r5, [sp, #12]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d5eaa:	f7ff f8b5 	bl	d5018 <hal_ble_gap_set_scan_parameters>
   d5eae:	4604      	mov	r4, r0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d5eb0:	4668      	mov	r0, sp
   d5eb2:	f7ff fc99 	bl	d57e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}
   d5eb6:	4620      	mov	r0, r4
   d5eb8:	b005      	add	sp, #20
   d5eba:	bd30      	pop	{r4, r5, pc}

000d5ebc <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d5ebc:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d5ebe:	69d8      	ldr	r0, [r3, #28]
}
   d5ec0:	2800      	cmp	r0, #0
   d5ec2:	bfd4      	ite	le
   d5ec4:	2000      	movle	r0, #0
   d5ec6:	2001      	movgt	r0, #1
   d5ec8:	4770      	bx	lr

000d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5eca:	680b      	ldr	r3, [r1, #0]
   d5ecc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5ece:	b113      	cbz	r3, d5ed6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5ed0:	685a      	ldr	r2, [r3, #4]
   d5ed2:	3201      	adds	r2, #1
   d5ed4:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5ed6:	4770      	bx	lr

000d5ed8 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5ed8:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5eda:	f851 3b04 	ldr.w	r3, [r1], #4
   d5ede:	4604      	mov	r4, r0
   d5ee0:	f840 3b04 	str.w	r3, [r0], #4
   d5ee4:	f7ff fff1 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d5ee8:	6823      	ldr	r3, [r4, #0]
   d5eea:	b90b      	cbnz	r3, d5ef0 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5eec:	f7ff fc3e 	bl	d576c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5ef0:	4620      	mov	r0, r4
   d5ef2:	bd10      	pop	{r4, pc}

000d5ef4 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5ef4:	b510      	push	{r4, lr}
   d5ef6:	f851 3b04 	ldr.w	r3, [r1], #4
   d5efa:	4604      	mov	r4, r0
   d5efc:	f840 3b04 	str.w	r3, [r0], #4
   d5f00:	f7ff ffe3 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5f04:	4620      	mov	r0, r4
   d5f06:	bd10      	pop	{r4, pc}

000d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5f08:	b510      	push	{r4, lr}
   d5f0a:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5f0c:	6800      	ldr	r0, [r0, #0]
   d5f0e:	b128      	cbz	r0, d5f1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5f10:	6843      	ldr	r3, [r0, #4]
   d5f12:	3b01      	subs	r3, #1
   d5f14:	6043      	str	r3, [r0, #4]
   d5f16:	b90b      	cbnz	r3, d5f1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5f18:	f7ff fc32 	bl	d5780 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	bd10      	pop	{r4, pc}

000d5f20 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d5f20:	b510      	push	{r4, lr}
   d5f22:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f24:	3004      	adds	r0, #4
   d5f26:	f7ff ffef 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d5f2a:	4620      	mov	r0, r4
   d5f2c:	bd10      	pop	{r4, pc}

000d5f2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f2e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5f30:	6804      	ldr	r4, [r0, #0]
   d5f32:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f34:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5f36:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f3a:	42a6      	cmp	r6, r4
   d5f3c:	d004      	beq.n	d5f48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5f3e:	1d20      	adds	r0, r4, #4
   d5f40:	f7ff ffe2 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f44:	3408      	adds	r4, #8
   d5f46:	e7f8      	b.n	d5f3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f48:	6828      	ldr	r0, [r5, #0]
   d5f4a:	f7ff fba3 	bl	d5694 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5f4e:	4628      	mov	r0, r5
   d5f50:	bd70      	pop	{r4, r5, r6, pc}

000d5f52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f52:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5f54:	6804      	ldr	r4, [r0, #0]
   d5f56:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f58:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5f5a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f5e:	42a6      	cmp	r6, r4
   d5f60:	d004      	beq.n	d5f6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5f62:	1d20      	adds	r0, r4, #4
   d5f64:	f7ff ffd0 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f68:	3408      	adds	r4, #8
   d5f6a:	e7f8      	b.n	d5f5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f6c:	6828      	ldr	r0, [r5, #0]
   d5f6e:	f7ff fb91 	bl	d5694 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5f72:	4628      	mov	r0, r5
   d5f74:	bd70      	pop	{r4, r5, r6, pc}

000d5f76 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5f76:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5f78:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5f7a:	f104 0018 	add.w	r0, r4, #24
   d5f7e:	f7ff ffe8 	bl	d5f52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5f82:	f104 000c 	add.w	r0, r4, #12
   d5f86:	f7ff ffd2 	bl	d5f2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5f90:	f7fe b885 	b.w	d409e <_ZdlPv>

000d5f94 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f96:	6804      	ldr	r4, [r0, #0]
   d5f98:	4607      	mov	r7, r0
   d5f9a:	b1c4      	cbz	r4, d5fce <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5f9c:	69a5      	ldr	r5, [r4, #24]
   d5f9e:	69e3      	ldr	r3, [r4, #28]
   d5fa0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5fa4:	42ae      	cmp	r6, r5
   d5fa6:	d004      	beq.n	d5fb2 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5fa8:	1d28      	adds	r0, r5, #4
   d5faa:	f7ff ffad 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fae:	3508      	adds	r5, #8
   d5fb0:	e7f8      	b.n	d5fa4 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5fb2:	69a0      	ldr	r0, [r4, #24]
   d5fb4:	f7ff fb6e 	bl	d5694 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d5fb8:	f104 000c 	add.w	r0, r4, #12
   d5fbc:	f7ff ffc9 	bl	d5f52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	f7ff ffb4 	bl	d5f2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5fc6:	2134      	movs	r1, #52	; 0x34
   d5fc8:	4620      	mov	r0, r4
   d5fca:	f002 ff68 	bl	d8e9e <_ZdlPvj>
   d5fce:	4638      	mov	r0, r7
   d5fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5fd4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5fd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5fd6:	2500      	movs	r5, #0
   d5fd8:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5fda:	6045      	str	r5, [r0, #4]
   d5fdc:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5fde:	2024      	movs	r0, #36	; 0x24
   d5fe0:	f7fe f85b 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5fe4:	4604      	mov	r4, r0
   d5fe6:	b178      	cbz	r0, d6008 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5fe8:	4603      	mov	r3, r0
   d5fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5fee:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5ff2:	f8c0 5002 	str.w	r5, [r0, #2]
   d5ff6:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5ff8:	7285      	strb	r5, [r0, #10]
   d5ffa:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5ffc:	60c5      	str	r5, [r0, #12]
   d5ffe:	6105      	str	r5, [r0, #16]
   d6000:	6145      	str	r5, [r0, #20]
   d6002:	6185      	str	r5, [r0, #24]
   d6004:	61c5      	str	r5, [r0, #28]
   d6006:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6008:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d600a:	2014      	movs	r0, #20
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	f7fe f844 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6012:	4603      	mov	r3, r0
   d6014:	b128      	cbz	r0, d6022 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6016:	2201      	movs	r2, #1
   d6018:	6042      	str	r2, [r0, #4]
   d601a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d601c:	4a08      	ldr	r2, [pc, #32]	; (d6040 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d601e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6020:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6022:	a802      	add	r0, sp, #8
   d6024:	6872      	ldr	r2, [r6, #4]
   d6026:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d602a:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d602c:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d602e:	f7ff ff6b 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d6032:	6833      	ldr	r3, [r6, #0]
   d6034:	b90b      	cbnz	r3, d603a <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d6036:	f7ff fb99 	bl	d576c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d603a:	4630      	mov	r0, r6
   d603c:	b002      	add	sp, #8
   d603e:	bd70      	pop	{r4, r5, r6, pc}
   d6040:	000d9f54 	.word	0x000d9f54

000d6044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d6044:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6046:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d6048:	6803      	ldr	r3, [r0, #0]
   d604a:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d604c:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d604e:	d00c      	beq.n	d606a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d6050:	b114      	cbz	r4, d6058 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6052:	6863      	ldr	r3, [r4, #4]
   d6054:	3301      	adds	r3, #1
   d6056:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d6058:	6828      	ldr	r0, [r5, #0]
   d605a:	b128      	cbz	r0, d6068 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d605c:	6843      	ldr	r3, [r0, #4]
   d605e:	3b01      	subs	r3, #1
   d6060:	6043      	str	r3, [r0, #4]
   d6062:	b90b      	cbnz	r3, d6068 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d6064:	f7ff fb8c 	bl	d5780 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d6068:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d606a:	4628      	mov	r0, r5
   d606c:	bd38      	pop	{r3, r4, r5, pc}

000d606e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d606e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6070:	b570      	push	{r4, r5, r6, lr}
   d6072:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6074:	d91a      	bls.n	d60ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d6076:	4290      	cmp	r0, r2
   d6078:	d219      	bcs.n	d60ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d607a:	f1a1 0608 	sub.w	r6, r1, #8
   d607e:	1a51      	subs	r1, r2, r1
   d6080:	3904      	subs	r1, #4
   d6082:	1f15      	subs	r5, r2, #4
   d6084:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d6086:	1f2b      	subs	r3, r5, #4
   d6088:	429e      	cmp	r6, r3
   d608a:	d025      	beq.n	d60d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d608c:	2c04      	cmp	r4, #4
   d608e:	d007      	beq.n	d60a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6090:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d6094:	f844 3c04 	str.w	r3, [r4, #-4]
   d6098:	4629      	mov	r1, r5
   d609a:	4620      	mov	r0, r4
   d609c:	f7ff ff15 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d60a0:	4628      	mov	r0, r5
   d60a2:	f7ff ff31 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60a6:	3d08      	subs	r5, #8
   d60a8:	3c08      	subs	r4, #8
   d60aa:	e7ec      	b.n	d6086 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d60ac:	d014      	beq.n	d60d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d60ae:	1d0c      	adds	r4, r1, #4
   d60b0:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d60b2:	1f23      	subs	r3, r4, #4
   d60b4:	429d      	cmp	r5, r3
   d60b6:	d00f      	beq.n	d60d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d60b8:	2e04      	cmp	r6, #4
   d60ba:	d007      	beq.n	d60cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d60bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d60c0:	f846 3c04 	str.w	r3, [r6, #-4]
   d60c4:	4621      	mov	r1, r4
   d60c6:	4630      	mov	r0, r6
   d60c8:	f7ff feff 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d60cc:	4620      	mov	r0, r4
   d60ce:	f7ff ff1b 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60d2:	3408      	adds	r4, #8
   d60d4:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d60d6:	e7ec      	b.n	d60b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d60d8:	bd70      	pop	{r4, r5, r6, pc}

000d60da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d60da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d60de:	6804      	ldr	r4, [r0, #0]
   d60e0:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d60e2:	4605      	mov	r5, r0
   d60e4:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d60e6:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d60ea:	42a7      	cmp	r7, r4
   d60ec:	d018      	beq.n	d6120 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d60ee:	4641      	mov	r1, r8
   d60f0:	4620      	mov	r0, r4
   d60f2:	f7ff fdef 	bl	d5cd4 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d60f6:	4606      	mov	r6, r0
   d60f8:	b908      	cbnz	r0, d60fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d60fa:	3408      	adds	r4, #8
   d60fc:	e7f5      	b.n	d60ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d60fe:	b18c      	cbz	r4, d6124 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d6100:	1d20      	adds	r0, r4, #4
   d6102:	f7ff ff01 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6106:	682b      	ldr	r3, [r5, #0]
   d6108:	686a      	ldr	r2, [r5, #4]
   d610a:	f104 0108 	add.w	r1, r4, #8
   d610e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6112:	4620      	mov	r0, r4
   d6114:	f7ff ffab 	bl	d606e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6118:	686b      	ldr	r3, [r5, #4]
   d611a:	3b01      	subs	r3, #1
   d611c:	606b      	str	r3, [r5, #4]
    return true;
   d611e:	e002      	b.n	d6126 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6120:	2600      	movs	r6, #0
   d6122:	e000      	b.n	d6126 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d6124:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d6126:	4630      	mov	r0, r6
   d6128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d612c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d612c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d612e:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6130:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d6134:	6847      	ldr	r7, [r0, #4]
   d6136:	9300      	str	r3, [sp, #0]
   d6138:	a801      	add	r0, sp, #4
   d613a:	f7ff fec6 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d613e:	6866      	ldr	r6, [r4, #4]
   d6140:	68a3      	ldr	r3, [r4, #8]
   d6142:	429e      	cmp	r6, r3
   d6144:	db14      	blt.n	d6170 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d6146:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6148:	2e00      	cmp	r6, #0
   d614a:	dd0b      	ble.n	d6164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d614c:	00f0      	lsls	r0, r6, #3
   d614e:	f7ff fa99 	bl	d5684 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6152:	4605      	mov	r5, r0
   d6154:	b318      	cbz	r0, d619e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d6156:	e894 0006 	ldmia.w	r4, {r1, r2}
   d615a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d615e:	f7ff ff86 	bl	d606e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6162:	e000      	b.n	d6166 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6164:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6166:	6820      	ldr	r0, [r4, #0]
   d6168:	f7ff fa94 	bl	d5694 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d616c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d616e:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6170:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6172:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6174:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6178:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d617c:	4629      	mov	r1, r5
   d617e:	f105 0008 	add.w	r0, r5, #8
   d6182:	f7ff ff74 	bl	d606e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6186:	b135      	cbz	r5, d6196 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d6188:	9b00      	ldr	r3, [sp, #0]
   d618a:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d618e:	a901      	add	r1, sp, #4
   d6190:	1d28      	adds	r0, r5, #4
   d6192:	f7ff fe9a 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d6196:	6863      	ldr	r3, [r4, #4]
   d6198:	3301      	adds	r3, #1
   d619a:	6063      	str	r3, [r4, #4]
   d619c:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d619e:	a801      	add	r0, sp, #4
   d61a0:	f7ff feb2 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d61a4:	4628      	mov	r0, r5
   d61a6:	b003      	add	sp, #12
   d61a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d61ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d61ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d61b0:	4604      	mov	r4, r0
   d61b2:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d61b4:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d61b6:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d61b8:	f7ff fb08 	bl	d57cc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d61bc:	6823      	ldr	r3, [r4, #0]
   d61be:	2b03      	cmp	r3, #3
   d61c0:	d002      	beq.n	d61c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d61c2:	2b04      	cmp	r3, #4
   d61c4:	d042      	beq.n	d624c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d61c6:	e087      	b.n	d62d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d61c8:	a804      	add	r0, sp, #16
   d61ca:	f7ff ff03 	bl	d5fd4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d61ce:	9b04      	ldr	r3, [sp, #16]
   d61d0:	8922      	ldrh	r2, [r4, #8]
   d61d2:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d61d4:	6862      	ldr	r2, [r4, #4]
   d61d6:	9904      	ldr	r1, [sp, #16]
   d61d8:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d61dc:	f8c1 3002 	str.w	r3, [r1, #2]
   d61e0:	6853      	ldr	r3, [r2, #4]
   d61e2:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d61e6:	a807      	add	r0, sp, #28
   d61e8:	9b04      	ldr	r3, [sp, #16]
   d61ea:	9306      	str	r3, [sp, #24]
   d61ec:	a905      	add	r1, sp, #20
   d61ee:	f7ff fe6c 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d61f2:	a906      	add	r1, sp, #24
   d61f4:	f105 0018 	add.w	r0, r5, #24
   d61f8:	f7ff ff98 	bl	d612c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d61fc:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d61fe:	a807      	add	r0, sp, #28
   d6200:	f7ff fe82 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6204:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6206:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6208:	b974      	cbnz	r4, d6228 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d620a:	4b36      	ldr	r3, [pc, #216]	; (d62e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d620c:	9300      	str	r3, [sp, #0]
   d620e:	aa06      	add	r2, sp, #24
   d6210:	4623      	mov	r3, r4
   d6212:	4935      	ldr	r1, [pc, #212]	; (d62e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6214:	9407      	str	r4, [sp, #28]
   d6216:	2032      	movs	r0, #50	; 0x32
   d6218:	f7ff f978 	bl	d550c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d621c:	9b04      	ldr	r3, [sp, #16]
   d621e:	4621      	mov	r1, r4
   d6220:	8818      	ldrh	r0, [r3, #0]
   d6222:	f7fe ff09 	bl	d5038 <hal_ble_gap_disconnect>
   d6226:	e00d      	b.n	d6244 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d6228:	4a30      	ldr	r2, [pc, #192]	; (d62ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d622a:	9200      	str	r2, [sp, #0]
   d622c:	2300      	movs	r3, #0
   d622e:	aa06      	add	r2, sp, #24
   d6230:	492d      	ldr	r1, [pc, #180]	; (d62e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6232:	9307      	str	r3, [sp, #28]
   d6234:	2001      	movs	r0, #1
   d6236:	f7ff f969 	bl	d550c <log_message>
                if (impl->connectedCb_) {
   d623a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d623c:	b113      	cbz	r3, d6244 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d623e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d6240:	a804      	add	r0, sp, #16
   d6242:	4798      	blx	r3
   d6244:	a805      	add	r0, sp, #20
   d6246:	f7ff fe5f 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d624a:	e045      	b.n	d62d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d624c:	8921      	ldrh	r1, [r4, #8]
   d624e:	4628      	mov	r0, r5
   d6250:	f7ff fcc4 	bl	d5bdc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6254:	4607      	mov	r7, r0
   d6256:	2800      	cmp	r0, #0
   d6258:	d03e      	beq.n	d62d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d625a:	6804      	ldr	r4, [r0, #0]
   d625c:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d625e:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6260:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6264:	8022      	strh	r2, [r4, #0]
   d6266:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d626a:	4299      	cmp	r1, r3
   d626c:	d003      	beq.n	d6276 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d626e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6272:	8042      	strh	r2, [r0, #2]
   d6274:	e7f9      	b.n	d626a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6276:	68e6      	ldr	r6, [r4, #12]
   d6278:	6923      	ldr	r3, [r4, #16]
   d627a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d627e:	45b0      	cmp	r8, r6
   d6280:	d004      	beq.n	d628c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d6282:	1d30      	adds	r0, r6, #4
   d6284:	f7ff fe40 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6288:	3608      	adds	r6, #8
   d628a:	e7f8      	b.n	d627e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d628c:	2300      	movs	r3, #0
   d628e:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6290:	69a6      	ldr	r6, [r4, #24]
   d6292:	69e3      	ldr	r3, [r4, #28]
   d6294:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6298:	45b0      	cmp	r8, r6
   d629a:	d004      	beq.n	d62a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d629c:	1d30      	adds	r0, r6, #4
   d629e:	f7ff fe33 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62a2:	3608      	adds	r6, #8
   d62a4:	e7f8      	b.n	d6298 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d62a6:	2300      	movs	r3, #0
   d62a8:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d62aa:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d62ac:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d62ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d62b0:	b113      	cbz	r3, d62b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d62b2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d62b4:	4638      	mov	r0, r7
   d62b6:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d62b8:	2320      	movs	r3, #32
   d62ba:	4a0d      	ldr	r2, [pc, #52]	; (d62f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d62bc:	9306      	str	r3, [sp, #24]
   d62be:	9200      	str	r2, [sp, #0]
   d62c0:	2300      	movs	r3, #0
   d62c2:	4909      	ldr	r1, [pc, #36]	; (d62e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d62c4:	9307      	str	r3, [sp, #28]
   d62c6:	2001      	movs	r0, #1
   d62c8:	aa06      	add	r2, sp, #24
   d62ca:	f7ff f91f 	bl	d550c <log_message>
                    impl->peers_.removeOne(*peer);
   d62ce:	4639      	mov	r1, r7
   d62d0:	f105 0018 	add.w	r0, r5, #24
   d62d4:	f7ff ff01 	bl	d60da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d62d8:	a803      	add	r0, sp, #12
   d62da:	f7ff fa85 	bl	d57e8 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d62de:	b00e      	add	sp, #56	; 0x38
   d62e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d62e4:	000d9fda 	.word	0x000d9fda
   d62e8:	000d9f78 	.word	0x000d9f78
   d62ec:	000da000 	.word	0x000da000
   d62f0:	000da01d 	.word	0x000da01d

000d62f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d62f4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d62f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62f8:	4606      	mov	r6, r0
   d62fa:	460c      	mov	r4, r1
   d62fc:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d62fe:	d914      	bls.n	d632a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6300:	4290      	cmp	r0, r2
   d6302:	d213      	bcs.n	d632c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6304:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6308:	1a6c      	subs	r4, r5, r1
   d630a:	f1a1 0708 	sub.w	r7, r1, #8
   d630e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6310:	42af      	cmp	r7, r5
   d6312:	d018      	beq.n	d6346 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6314:	b11c      	cbz	r4, d631e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6316:	4629      	mov	r1, r5
   d6318:	4620      	mov	r0, r4
   d631a:	f7ff fdeb 	bl	d5ef4 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d631e:	1d28      	adds	r0, r5, #4
   d6320:	f7ff fdf2 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6324:	3d08      	subs	r5, #8
   d6326:	3c08      	subs	r4, #8
   d6328:	e7f2      	b.n	d6310 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d632a:	d00c      	beq.n	d6346 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d632c:	42ac      	cmp	r4, r5
   d632e:	d00a      	beq.n	d6346 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6330:	b11e      	cbz	r6, d633a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6332:	4621      	mov	r1, r4
   d6334:	4630      	mov	r0, r6
   d6336:	f7ff fddd 	bl	d5ef4 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d633a:	1d20      	adds	r0, r4, #4
   d633c:	f7ff fde4 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6340:	3408      	adds	r4, #8
   d6342:	3608      	adds	r6, #8
   d6344:	e7f2      	b.n	d632c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6348 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6348:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d634a:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d634c:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d634e:	dd0b      	ble.n	d6368 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6350:	00f0      	lsls	r0, r6, #3
   d6352:	f7ff f997 	bl	d5684 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6356:	4604      	mov	r4, r0
   d6358:	b170      	cbz	r0, d6378 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d635a:	e895 0006 	ldmia.w	r5, {r1, r2}
   d635e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6362:	f7ff ffc7 	bl	d62f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6366:	e000      	b.n	d636a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6368:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d636a:	6828      	ldr	r0, [r5, #0]
   d636c:	f7ff f992 	bl	d5694 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6370:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6372:	60ae      	str	r6, [r5, #8]
        return true;
   d6374:	2001      	movs	r0, #1
   d6376:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6378:	bd70      	pop	{r4, r5, r6, pc}

000d637a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d637a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d637c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d637e:	6845      	ldr	r5, [r0, #4]
   d6380:	4668      	mov	r0, sp
   d6382:	f7ff fdb7 	bl	d5ef4 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6386:	6861      	ldr	r1, [r4, #4]
   d6388:	68a3      	ldr	r3, [r4, #8]
   d638a:	4299      	cmp	r1, r3
   d638c:	db05      	blt.n	d639a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d638e:	3101      	adds	r1, #1
   d6390:	4620      	mov	r0, r4
   d6392:	f7ff ffd9 	bl	d6348 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6396:	4606      	mov	r6, r0
   d6398:	b198      	cbz	r0, d63c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d639a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d639c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d639e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d63a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d63a6:	4629      	mov	r1, r5
   d63a8:	f105 0008 	add.w	r0, r5, #8
   d63ac:	f7ff ffa2 	bl	d62f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d63b0:	b11d      	cbz	r5, d63ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d63b2:	4669      	mov	r1, sp
   d63b4:	4628      	mov	r0, r5
   d63b6:	f7ff fd9d 	bl	d5ef4 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d63ba:	6863      	ldr	r3, [r4, #4]
   d63bc:	3301      	adds	r3, #1
   d63be:	6063      	str	r3, [r4, #4]
   d63c0:	2601      	movs	r6, #1
   d63c2:	a801      	add	r0, sp, #4
   d63c4:	f7ff fda0 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d63c8:	4630      	mov	r0, r6
   d63ca:	b002      	add	sp, #8
   d63cc:	bd70      	pop	{r4, r5, r6, pc}

000d63ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d63ce:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d63d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63d2:	4606      	mov	r6, r0
   d63d4:	460c      	mov	r4, r1
   d63d6:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d63d8:	d914      	bls.n	d6404 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d63da:	4290      	cmp	r0, r2
   d63dc:	d213      	bcs.n	d6406 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d63de:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d63e2:	1a6c      	subs	r4, r5, r1
   d63e4:	f1a1 0708 	sub.w	r7, r1, #8
   d63e8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d63ea:	42af      	cmp	r7, r5
   d63ec:	d018      	beq.n	d6420 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d63ee:	b11c      	cbz	r4, d63f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d63f0:	4629      	mov	r1, r5
   d63f2:	4620      	mov	r0, r4
   d63f4:	f7ff fd70 	bl	d5ed8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d63f8:	1d28      	adds	r0, r5, #4
   d63fa:	f7ff fd85 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d63fe:	3d08      	subs	r5, #8
   d6400:	3c08      	subs	r4, #8
   d6402:	e7f2      	b.n	d63ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6404:	d00c      	beq.n	d6420 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6406:	42ac      	cmp	r4, r5
   d6408:	d00a      	beq.n	d6420 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d640a:	b11e      	cbz	r6, d6414 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d640c:	4621      	mov	r1, r4
   d640e:	4630      	mov	r0, r6
   d6410:	f7ff fd62 	bl	d5ed8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6414:	1d20      	adds	r0, r4, #4
   d6416:	f7ff fd77 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d641a:	3408      	adds	r4, #8
   d641c:	3608      	adds	r6, #8
   d641e:	e7f2      	b.n	d6406 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6422 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6422:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6424:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6426:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6428:	dd0b      	ble.n	d6442 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d642a:	00f0      	lsls	r0, r6, #3
   d642c:	f7ff f92a 	bl	d5684 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6430:	4604      	mov	r4, r0
   d6432:	b170      	cbz	r0, d6452 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6434:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6438:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d643c:	f7ff ffc7 	bl	d63ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6440:	e000      	b.n	d6444 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6442:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6444:	6828      	ldr	r0, [r5, #0]
   d6446:	f7ff f925 	bl	d5694 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d644a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d644c:	60ae      	str	r6, [r5, #8]
        return true;
   d644e:	2001      	movs	r0, #1
   d6450:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6452:	bd70      	pop	{r4, r5, r6, pc}

000d6454 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6454:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6456:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6458:	6845      	ldr	r5, [r0, #4]
   d645a:	4668      	mov	r0, sp
   d645c:	f7ff fd3c 	bl	d5ed8 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6460:	6861      	ldr	r1, [r4, #4]
   d6462:	68a3      	ldr	r3, [r4, #8]
   d6464:	4299      	cmp	r1, r3
   d6466:	db05      	blt.n	d6474 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6468:	3101      	adds	r1, #1
   d646a:	4620      	mov	r0, r4
   d646c:	f7ff ffd9 	bl	d6422 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6470:	4606      	mov	r6, r0
   d6472:	b198      	cbz	r0, d649c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6474:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6476:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6478:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d647c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6480:	4629      	mov	r1, r5
   d6482:	f105 0008 	add.w	r0, r5, #8
   d6486:	f7ff ffa2 	bl	d63ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d648a:	b11d      	cbz	r5, d6494 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d648c:	4669      	mov	r1, sp
   d648e:	4628      	mov	r0, r5
   d6490:	f7ff fd22 	bl	d5ed8 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d6494:	6863      	ldr	r3, [r4, #4]
   d6496:	3301      	adds	r3, #1
   d6498:	6063      	str	r3, [r4, #4]
   d649a:	2601      	movs	r6, #1
   d649c:	a801      	add	r0, sp, #4
   d649e:	f7ff fd33 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d64a2:	4630      	mov	r0, r6
   d64a4:	b002      	add	sp, #8
   d64a6:	bd70      	pop	{r4, r5, r6, pc}

000d64a8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d64a8:	b510      	push	{r4, lr}
   d64aa:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d64ac:	6840      	ldr	r0, [r0, #4]
   d64ae:	b108      	cbz	r0, d64b4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d64b0:	f7fd fdf5 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d64b4:	4620      	mov	r0, r4
   d64b6:	bd10      	pop	{r4, pc}

000d64b8 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d64b8:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d64ba:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d64bc:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d64be:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d64c2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d64c6:	f002 f99e 	bl	d8806 <_ZN6StringD1Ev>
   d64ca:	4668      	mov	r0, sp
   d64cc:	f7ff ffec 	bl	d64a8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d64d0:	b003      	add	sp, #12
   d64d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d64d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d64d8:	b538      	push	{r3, r4, r5, lr}
   d64da:	2300      	movs	r3, #0
   d64dc:	4604      	mov	r4, r0
   d64de:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d64e0:	2014      	movs	r0, #20
   d64e2:	460d      	mov	r5, r1
   d64e4:	f7fd fdd9 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d64e8:	b128      	cbz	r0, d64f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d64ea:	2301      	movs	r3, #1
   d64ec:	6043      	str	r3, [r0, #4]
   d64ee:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d64f0:	4b02      	ldr	r3, [pc, #8]	; (d64fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d64f2:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d64f4:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d64f6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d64f8:	4620      	mov	r0, r4
   d64fa:	bd38      	pop	{r3, r4, r5, pc}
   d64fc:	000d9f1c 	.word	0x000d9f1c

000d6500 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6504:	b088      	sub	sp, #32
   d6506:	4605      	mov	r5, r0
   d6508:	461e      	mov	r6, r3
   d650a:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d650c:	2300      	movs	r3, #0
   d650e:	460f      	mov	r7, r1
   d6510:	4690      	mov	r8, r2
   d6512:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6514:	9305      	str	r3, [sp, #20]
   d6516:	f7fd fdc0 	bl	d409a <_Znwj>
   d651a:	f8cd d018 	str.w	sp, [sp, #24]
   d651e:	4604      	mov	r4, r0
   d6520:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6522:	b1c0      	cbz	r0, d6556 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d6524:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d6528:	f7ff fb38 	bl	d5b9c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d652c:	4639      	mov	r1, r7
   d652e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d6532:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d6536:	f002 f9da 	bl	d88ee <_ZN6StringaSEPKc>
        callback_ = callback;
   d653a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d653c:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d653e:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d6540:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d6542:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d6544:	f104 0014 	add.w	r0, r4, #20
   d6548:	f7ff f9e6 	bl	d5918 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d654c:	990e      	ldr	r1, [sp, #56]	; 0x38
   d654e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d6552:	f7ff f9e1 	bl	d5918 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6556:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6558:	2600      	movs	r6, #0
   d655a:	ab01      	add	r3, sp, #4
   d655c:	aa02      	add	r2, sp, #8
   d655e:	a803      	add	r0, sp, #12
   d6560:	9607      	str	r6, [sp, #28]
   d6562:	f7ff ffb9 	bl	d64d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6566:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6568:	9a05      	ldr	r2, [sp, #20]
   d656a:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d656c:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d656e:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6570:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6572:	f7ff fcc9 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6576:	a806      	add	r0, sp, #24
   d6578:	f7ff ff96 	bl	d64a8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d657c:	9b04      	ldr	r3, [sp, #16]
   d657e:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6580:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6582:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6584:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6586:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6588:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d658a:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d658c:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6590:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6592:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6594:	f7ff fcb8 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6598:	a805      	add	r0, sp, #20
   d659a:	f7ff fcb5 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d659e:	6829      	ldr	r1, [r5, #0]
   d65a0:	b919      	cbnz	r1, d65aa <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d65a2:	4a03      	ldr	r2, [pc, #12]	; (d65b0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d65a4:	200a      	movs	r0, #10
   d65a6:	f7fe ffa9 	bl	d54fc <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d65aa:	b008      	add	sp, #32
   d65ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d65b0:	000d51ed 	.word	0x000d51ed

000d65b4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d65b4:	b510      	push	{r4, lr}
   d65b6:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d65b8:	6840      	ldr	r0, [r0, #4]
   d65ba:	b108      	cbz	r0, d65c0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d65bc:	f7fd fd6f 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d65c0:	4620      	mov	r0, r4
   d65c2:	bd10      	pop	{r4, pc}

000d65c4 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d65c4:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d65c6:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d65c8:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d65ca:	e88d 0009 	stmia.w	sp, {r0, r3}
   d65ce:	4668      	mov	r0, sp
   d65d0:	f7ff fff0 	bl	d65b4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d65d4:	b003      	add	sp, #12
   d65d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d65dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d65dc:	b538      	push	{r3, r4, r5, lr}
   d65de:	2300      	movs	r3, #0
   d65e0:	4604      	mov	r4, r0
   d65e2:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d65e4:	2014      	movs	r0, #20
   d65e6:	460d      	mov	r5, r1
   d65e8:	f7fd fd57 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d65ec:	b128      	cbz	r0, d65fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d65ee:	2301      	movs	r3, #1
   d65f0:	6043      	str	r3, [r0, #4]
   d65f2:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d65f4:	4b02      	ldr	r3, [pc, #8]	; (d6600 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d65f6:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d65f8:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d65fa:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d65fc:	4620      	mov	r0, r4
   d65fe:	bd38      	pop	{r3, r4, r5, pc}
   d6600:	000d9f38 	.word	0x000d9f38

000d6604 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6604:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6606:	2600      	movs	r6, #0
   d6608:	b087      	sub	sp, #28
   d660a:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d660c:	6046      	str	r6, [r0, #4]
   d660e:	4604      	mov	r4, r0
   d6610:	2018      	movs	r0, #24
   d6612:	460f      	mov	r7, r1
   d6614:	f7fd fd41 	bl	d409a <_Znwj>
   d6618:	f8cd d010 	str.w	sp, [sp, #16]
   d661c:	4605      	mov	r5, r0
   d661e:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6620:	b138      	cbz	r0, d6632 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6622:	f7ff f8fb 	bl	d581c <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d6626:	4639      	mov	r1, r7
   d6628:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d662a:	82ae      	strh	r6, [r5, #20]
   d662c:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d662e:	f7ff f973 	bl	d5918 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6632:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6634:	4629      	mov	r1, r5
   d6636:	9305      	str	r3, [sp, #20]
   d6638:	aa02      	add	r2, sp, #8
   d663a:	ab01      	add	r3, sp, #4
   d663c:	a803      	add	r0, sp, #12
   d663e:	f7ff ffcd 	bl	d65dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6642:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6644:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6646:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6648:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d664a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d664c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d664e:	f7ff fc5b 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6652:	a804      	add	r0, sp, #16
   d6654:	f7ff ffae 	bl	d65b4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d6658:	6823      	ldr	r3, [r4, #0]
   d665a:	b90b      	cbnz	r3, d6660 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d665c:	f7ff f886 	bl	d576c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6660:	4620      	mov	r0, r4
   d6662:	b007      	add	sp, #28
   d6664:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d666c:	4617      	mov	r7, r2
   d666e:	b0a1      	sub	sp, #132	; 0x84
   d6670:	4680      	mov	r8, r0
    WiringBleLock lk;
   d6672:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6674:	460e      	mov	r6, r1
    WiringBleLock lk;
   d6676:	f7ff f8a9 	bl	d57cc <_ZN8particle3ble13WiringBleLockC1Ev>
   d667a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d667c:	7923      	ldrb	r3, [r4, #4]
   d667e:	2b00      	cmp	r3, #0
   d6680:	f000 80de 	beq.w	d6840 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6684:	6833      	ldr	r3, [r6, #0]
   d6686:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6688:	691b      	ldr	r3, [r3, #16]
   d668a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d668e:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6690:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d6694:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d6698:	9b03      	ldr	r3, [sp, #12]
   d669a:	42ab      	cmp	r3, r5
   d669c:	d023      	beq.n	d66e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d669e:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d66a2:	4650      	mov	r0, sl
   d66a4:	f109 0114 	add.w	r1, r9, #20
   d66a8:	f7ff f950 	bl	d594c <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d66ac:	2800      	cmp	r0, #0
   d66ae:	f000 80cc 	beq.w	d684a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d66b2:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d66b6:	4658      	mov	r0, fp
   d66b8:	f7ff f948 	bl	d594c <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d66bc:	2800      	cmp	r0, #0
   d66be:	f000 80c4 	beq.w	d684a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d66c2:	6823      	ldr	r3, [r4, #0]
   d66c4:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d66c8:	f8d9 3000 	ldr.w	r3, [r9]
   d66cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d66d0:	4299      	cmp	r1, r3
   d66d2:	f040 80ba 	bne.w	d684a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d66d6:	2320      	movs	r3, #32
   d66d8:	4a60      	ldr	r2, [pc, #384]	; (d685c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d66da:	9315      	str	r3, [sp, #84]	; 0x54
   d66dc:	2300      	movs	r3, #0
   d66de:	9200      	str	r2, [sp, #0]
   d66e0:	9316      	str	r3, [sp, #88]	; 0x58
   d66e2:	aa15      	add	r2, sp, #84	; 0x54
   d66e4:	e0a8      	b.n	d6838 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d66e6:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d66ea:	4648      	mov	r0, r9
   d66ec:	f7ff f8e0 	bl	d58b0 <_ZNK8particle7BleUuid7isValidEv>
   d66f0:	b918      	cbnz	r0, d66fa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d66f2:	495b      	ldr	r1, [pc, #364]	; (d6860 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d66f4:	4648      	mov	r0, r9
   d66f6:	f7ff f91c 	bl	d5932 <_ZN8particle7BleUuidaSEPKh>
   d66fa:	6833      	ldr	r3, [r6, #0]
   d66fc:	681d      	ldr	r5, [r3, #0]
   d66fe:	685b      	ldr	r3, [r3, #4]
   d6700:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6704:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d6706:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6708:	d005      	beq.n	d6716 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d670a:	6828      	ldr	r0, [r5, #0]
   d670c:	f7ff f91e 	bl	d594c <_ZNK8particle7BleUuideqERKS0_>
   d6710:	bb58      	cbnz	r0, d676a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6712:	3508      	adds	r5, #8
   d6714:	e7f6      	b.n	d6704 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d6716:	a80b      	add	r0, sp, #44	; 0x2c
   d6718:	f7ff ff74 	bl	d6604 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d671c:	4649      	mov	r1, r9
   d671e:	a815      	add	r0, sp, #84	; 0x54
   d6720:	f7ff f8d8 	bl	d58d4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d6724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d6726:	2300      	movs	r3, #0
   d6728:	3214      	adds	r2, #20
   d672a:	a915      	add	r1, sp, #84	; 0x54
   d672c:	2001      	movs	r0, #1
   d672e:	f7fe fc8d 	bl	d504c <hal_ble_gatt_server_add_service>
   d6732:	2800      	cmp	r0, #0
   d6734:	d178      	bne.n	d6828 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d6736:	6835      	ldr	r5, [r6, #0]
   d6738:	a90b      	add	r1, sp, #44	; 0x2c
   d673a:	a80d      	add	r0, sp, #52	; 0x34
   d673c:	f7ff fbda 	bl	d5ef4 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d6740:	4628      	mov	r0, r5
   d6742:	a90d      	add	r1, sp, #52	; 0x34
   d6744:	f7ff fe19 	bl	d637a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6748:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d674a:	a80e      	add	r0, sp, #56	; 0x38
   d674c:	f7ff fbdc 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6750:	2d00      	cmp	r5, #0
   d6752:	d069      	beq.n	d6828 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d6754:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d6756:	6855      	ldr	r5, [r2, #4]
   d6758:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d675c:	6815      	ldr	r5, [r2, #0]
   d675e:	3b01      	subs	r3, #1
   d6760:	a80c      	add	r0, sp, #48	; 0x30
   d6762:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d6766:	f7ff fbcf 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d676a:	f104 0914 	add.w	r9, r4, #20
   d676e:	4648      	mov	r0, r9
   d6770:	f7ff f89e 	bl	d58b0 <_ZNK8particle7BleUuid7isValidEv>
   d6774:	b968      	cbnz	r0, d6792 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d6776:	4b3b      	ldr	r3, [pc, #236]	; (d6864 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6778:	4939      	ldr	r1, [pc, #228]	; (d6860 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d677a:	881a      	ldrh	r2, [r3, #0]
   d677c:	3201      	adds	r2, #1
   d677e:	b292      	uxth	r2, r2
   d6780:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6782:	a815      	add	r0, sp, #84	; 0x54
   d6784:	2301      	movs	r3, #1
   d6786:	f7ff f887 	bl	d5898 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d678a:	a915      	add	r1, sp, #84	; 0x54
   d678c:	4648      	mov	r0, r9
   d678e:	f7ff f8c3 	bl	d5918 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d6792:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d6796:	4652      	mov	r2, sl
   d6798:	2100      	movs	r1, #0
   d679a:	a815      	add	r0, sp, #84	; 0x54
   d679c:	f003 f96b 	bl	d9a76 <memset>
    charInit.version = BLE_API_VERSION;
   d67a0:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d67a2:	4649      	mov	r1, r9
   d67a4:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d67a6:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d67aa:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d67ae:	f7ff f891 	bl	d58d4 <_ZN8particle7BleUuid7halUUIDEv>
   d67b2:	ab04      	add	r3, sp, #16
   d67b4:	aa18      	add	r2, sp, #96	; 0x60
   d67b6:	f10d 0c20 	add.w	ip, sp, #32
   d67ba:	6818      	ldr	r0, [r3, #0]
   d67bc:	6859      	ldr	r1, [r3, #4]
   d67be:	4696      	mov	lr, r2
   d67c0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d67c4:	3308      	adds	r3, #8
   d67c6:	4563      	cmp	r3, ip
   d67c8:	4672      	mov	r2, lr
   d67ca:	d1f6      	bne.n	d67ba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d67cc:	6818      	ldr	r0, [r3, #0]
   d67ce:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d67d2:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d67d4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d67d8:	682b      	ldr	r3, [r5, #0]
   d67da:	8a9b      	ldrh	r3, [r3, #20]
   d67dc:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d67e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d67e2:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d67e4:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d67e6:	4b20      	ldr	r3, [pc, #128]	; (d6868 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d67e8:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d67ea:	1da1      	adds	r1, r4, #6
   d67ec:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d67ee:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d67f0:	f7fe fc54 	bl	d509c <hal_ble_gatt_server_add_characteristic>
   d67f4:	bb20      	cbnz	r0, d6840 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d67f6:	2301      	movs	r3, #1
   d67f8:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d67fa:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d67fc:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d67fe:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d6800:	a80d      	add	r0, sp, #52	; 0x34
   d6802:	f7ff fb69 	bl	d5ed8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6806:	4620      	mov	r0, r4
   d6808:	a90d      	add	r1, sp, #52	; 0x34
   d680a:	f7ff fe23 	bl	d6454 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d680e:	4604      	mov	r4, r0
   d6810:	a80e      	add	r0, sp, #56	; 0x38
   d6812:	f7ff fb79 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6816:	b99c      	cbnz	r4, d6840 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d6818:	2320      	movs	r3, #32
   d681a:	930d      	str	r3, [sp, #52]	; 0x34
   d681c:	4b13      	ldr	r3, [pc, #76]	; (d686c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d681e:	9300      	str	r3, [sp, #0]
   d6820:	940e      	str	r4, [sp, #56]	; 0x38
   d6822:	4623      	mov	r3, r4
   d6824:	aa0d      	add	r2, sp, #52	; 0x34
   d6826:	e007      	b.n	d6838 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d6828:	4639      	mov	r1, r7
   d682a:	4640      	mov	r0, r8
   d682c:	f7ff fb54 	bl	d5ed8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6830:	a80c      	add	r0, sp, #48	; 0x30
   d6832:	f7ff fb69 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6836:	e00a      	b.n	d684e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6838:	490d      	ldr	r1, [pc, #52]	; (d6870 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d683a:	2032      	movs	r0, #50	; 0x32
   d683c:	f7fe fe66 	bl	d550c <log_message>
            return characteristic;
   d6840:	4639      	mov	r1, r7
   d6842:	4640      	mov	r0, r8
   d6844:	f7ff fb48 	bl	d5ed8 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6848:	e001      	b.n	d684e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d684a:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d684c:	e724      	b.n	d6698 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d684e:	a80a      	add	r0, sp, #40	; 0x28
   d6850:	f7fe ffca 	bl	d57e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d6854:	4640      	mov	r0, r8
   d6856:	b021      	add	sp, #132	; 0x84
   d6858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d685c:	000da0ed 	.word	0x000da0ed
   d6860:	000d9f68 	.word	0x000d9f68
   d6864:	2003e398 	.word	0x2003e398
   d6868:	000d5da1 	.word	0x000d5da1
   d686c:	000da0c6 	.word	0x000da0c6
   d6870:	000d9f78 	.word	0x000d9f78

000d6874 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6874:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6876:	4c06      	ldr	r4, [pc, #24]	; (d6890 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6878:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d687a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d687c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d687e:	f7fe fc7d 	bl	d517c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6882:	4620      	mov	r0, r4
   d6884:	4a03      	ldr	r2, [pc, #12]	; (d6894 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6886:	4904      	ldr	r1, [pc, #16]	; (d6898 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d688c:	f002 bb02 	b.w	d8e94 <__aeabi_atexit>
   d6890:	2003e39c 	.word	0x2003e39c
   d6894:	2003e284 	.word	0x2003e284
   d6898:	000d575b 	.word	0x000d575b

000d689c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d689c:	4770      	bx	lr

000d689e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d689e:	2000      	movs	r0, #0
   d68a0:	4770      	bx	lr

000d68a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d68a2:	b510      	push	{r4, lr}
   d68a4:	2110      	movs	r1, #16
   d68a6:	4604      	mov	r4, r0
   d68a8:	f002 faf9 	bl	d8e9e <_ZdlPvj>
   d68ac:	4620      	mov	r0, r4
   d68ae:	bd10      	pop	{r4, pc}

000d68b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d68b0:	b508      	push	{r3, lr}
      { delete this; }
   d68b2:	b108      	cbz	r0, d68b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d68b4:	f7ff fff5 	bl	d68a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d68b8:	bd08      	pop	{r3, pc}

000d68ba <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d68ba:	2200      	movs	r2, #0
   d68bc:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d68be:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d68c0:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d68c4:	8082      	strh	r2, [r0, #4]
   d68c6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d68ca:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d68cc:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68ce:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d68d0:	680c      	ldr	r4, [r1, #0]
   d68d2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d68d4:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d68d6:	bd10      	pop	{r4, pc}

000d68d8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d68d8:	b510      	push	{r4, lr}
   d68da:	4604      	mov	r4, r0
    free((void*)msg_);
   d68dc:	6800      	ldr	r0, [r0, #0]
   d68de:	f7fe fed9 	bl	d5694 <free>
}
   d68e2:	4620      	mov	r0, r4
   d68e4:	bd10      	pop	{r4, pc}

000d68e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d68e6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d68e8:	68c4      	ldr	r4, [r0, #12]
   d68ea:	b1f4      	cbz	r4, d692a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d68ec:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d68ee:	2b02      	cmp	r3, #2
   d68f0:	d103      	bne.n	d68fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d68f2:	f104 000c 	add.w	r0, r4, #12
   d68f6:	f7ff ffef 	bl	d68d8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d68fa:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d68fc:	b135      	cbz	r5, d690c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d68fe:	4628      	mov	r0, r5
   d6900:	f7fd fcb2 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
   d6904:	2110      	movs	r1, #16
   d6906:	4628      	mov	r0, r5
   d6908:	f002 fac9 	bl	d8e9e <_ZdlPvj>
   d690c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d690e:	b135      	cbz	r5, d691e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6910:	4628      	mov	r0, r5
   d6912:	f7fd fca9 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
   d6916:	2110      	movs	r1, #16
   d6918:	4628      	mov	r0, r5
   d691a:	f002 fac0 	bl	d8e9e <_ZdlPvj>
   d691e:	4620      	mov	r0, r4
   d6920:	2114      	movs	r1, #20
   d6922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6926:	f002 baba 	b.w	d8e9e <_ZdlPvj>
   d692a:	bd38      	pop	{r3, r4, r5, pc}

000d692c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d692c:	b513      	push	{r0, r1, r4, lr}
   d692e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6930:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6934:	2300      	movs	r3, #0
   d6936:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6938:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d693a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d693c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d693e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6940:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6942:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6944:	f7ff fae0 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6948:	4620      	mov	r0, r4
   d694a:	b002      	add	sp, #8
   d694c:	bd10      	pop	{r4, pc}

000d694e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d694e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6950:	460c      	mov	r4, r1
   d6952:	ad02      	add	r5, sp, #8
   d6954:	f854 3b04 	ldr.w	r3, [r4], #4
   d6958:	f845 3d08 	str.w	r3, [r5, #-8]!
   d695c:	4606      	mov	r6, r0
   d695e:	460f      	mov	r7, r1
   d6960:	a801      	add	r0, sp, #4
   d6962:	4621      	mov	r1, r4
   d6964:	f7ff fab1 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6968:	4629      	mov	r1, r5
   d696a:	4630      	mov	r0, r6
   d696c:	f7ff ffde 	bl	d692c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6970:	a801      	add	r0, sp, #4
   d6972:	f7ff fac9 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6976:	4620      	mov	r0, r4
   d6978:	f7ff fac6 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d697c:	4638      	mov	r0, r7
   d697e:	2108      	movs	r1, #8
   d6980:	f002 fa8d 	bl	d8e9e <_ZdlPvj>
        return p;
    }
   d6984:	4630      	mov	r0, r6
   d6986:	b003      	add	sp, #12
   d6988:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d698a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d698a:	b513      	push	{r0, r1, r4, lr}
   d698c:	460b      	mov	r3, r1
   d698e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6990:	c803      	ldmia	r0, {r0, r1}
   d6992:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6996:	e893 0003 	ldmia.w	r3, {r0, r1}
   d699a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d699e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d69a2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d69a6:	b002      	add	sp, #8
   d69a8:	bd10      	pop	{r4, pc}
	...

000d69ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d69ac:	b538      	push	{r3, r4, r5, lr}
   d69ae:	2300      	movs	r3, #0
   d69b0:	4604      	mov	r4, r0
   d69b2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69b4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d69b6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69b8:	f7fd fb6f 	bl	d409a <_Znwj>
   d69bc:	b128      	cbz	r0, d69ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d69be:	2301      	movs	r3, #1
   d69c0:	6043      	str	r3, [r0, #4]
   d69c2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d69c4:	4b02      	ldr	r3, [pc, #8]	; (d69d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d69c6:	6003      	str	r3, [r0, #0]
   d69c8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69ca:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d69cc:	4620      	mov	r0, r4
   d69ce:	bd38      	pop	{r3, r4, r5, pc}
   d69d0:	000da130 	.word	0x000da130

000d69d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d69d4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d69d6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d69d8:	b90a      	cbnz	r2, d69de <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d69da:	f002 fa7c 	bl	d8ed6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69de:	68c3      	ldr	r3, [r0, #12]
    }
   d69e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69e4:	4718      	bx	r3

000d69e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d69e6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d69e8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d69ea:	f100 0110 	add.w	r1, r0, #16
   d69ee:	f7ff fff1 	bl	d69d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d69f2:	bd08      	pop	{r3, pc}

000d69f4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d69f4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d69f6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d69f8:	b90a      	cbnz	r2, d69fe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d69fa:	f002 fa6c 	bl	d8ed6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69fe:	68c3      	ldr	r3, [r0, #12]
    }
   d6a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a04:	4718      	bx	r3

000d6a06 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6a06:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6a08:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6a0a:	f100 0110 	add.w	r1, r0, #16
   d6a0e:	f7ff fff1 	bl	d69f4 <_ZNKSt8functionIFvRKbEEclES1_>
   d6a12:	bd08      	pop	{r3, pc}

000d6a14 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6a14:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6a16:	2300      	movs	r3, #0
   d6a18:	6083      	str	r3, [r0, #8]
   d6a1a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6a1c:	4604      	mov	r4, r0
   d6a1e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6a20:	b12b      	cbz	r3, d6a2e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6a22:	2202      	movs	r2, #2
   d6a24:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6a26:	68eb      	ldr	r3, [r5, #12]
   d6a28:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6a2a:	68ab      	ldr	r3, [r5, #8]
   d6a2c:	60a3      	str	r3, [r4, #8]
	}
    }
   d6a2e:	4620      	mov	r0, r4
   d6a30:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6a34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6a34:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a36:	b089      	sub	sp, #36	; 0x24
   d6a38:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6a3a:	4668      	mov	r0, sp
   d6a3c:	f7ff ff3d 	bl	d68ba <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6a40:	2300      	movs	r3, #0
   d6a42:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6a46:	f04f 0202 	mov.w	r2, #2
   d6a4a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6a4e:	2b00      	cmp	r3, #0
   d6a50:	d103      	bne.n	d6a5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6a52:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6a56:	2900      	cmp	r1, #0
   d6a58:	d1f7      	bne.n	d6a4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d6a5a:	d002      	beq.n	d6a62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6a5c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6a60:	e063      	b.n	d6b2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6a62:	f114 050c 	adds.w	r5, r4, #12
   d6a66:	d003      	beq.n	d6a70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6a68:	4669      	mov	r1, sp
   d6a6a:	4628      	mov	r0, r5
   d6a6c:	f7ff ff25 	bl	d68ba <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6a70:	f3bf 8f5f 	dmb	sy
   d6a74:	2301      	movs	r3, #1
   d6a76:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6a78:	2000      	movs	r0, #0
   d6a7a:	f104 0308 	add.w	r3, r4, #8
   d6a7e:	f3bf 8f5f 	dmb	sy
   d6a82:	e853 6f00 	ldrex	r6, [r3]
   d6a86:	e843 0200 	strex	r2, r0, [r3]
   d6a8a:	2a00      	cmp	r2, #0
   d6a8c:	d1f9      	bne.n	d6a82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6a8e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6a92:	2e00      	cmp	r6, #0
   d6a94:	d049      	beq.n	d6b2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6a96:	f7fe fd61 	bl	d555c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6a9a:	b120      	cbz	r0, d6aa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6a9c:	4629      	mov	r1, r5
   d6a9e:	4630      	mov	r0, r6
   d6aa0:	f7ff ff98 	bl	d69d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6aa4:	e03a      	b.n	d6b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6aa6:	4631      	mov	r1, r6
   d6aa8:	a802      	add	r0, sp, #8
   d6aaa:	f7ff ffb3 	bl	d6a14 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6aae:	68e0      	ldr	r0, [r4, #12]
   d6ab0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6ab4:	b108      	cbz	r0, d6aba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6ab6:	f003 f831 	bl	d9b1c <strdup>
   d6aba:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6abc:	2010      	movs	r0, #16
   d6abe:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6ac2:	f7fd faea 	bl	d409a <_Znwj>
   d6ac6:	4605      	mov	r5, r0
   d6ac8:	b1e8      	cbz	r0, d6b06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6aca:	2700      	movs	r7, #0
   d6acc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ace:	2018      	movs	r0, #24
   d6ad0:	f7fd fae3 	bl	d409a <_Znwj>
   d6ad4:	4604      	mov	r4, r0
   d6ad6:	b188      	cbz	r0, d6afc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6ad8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ada:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6adc:	a802      	add	r0, sp, #8
   d6ade:	f7ff ff54 	bl	d698a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ae2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6ae4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ae6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ae8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6aea:	9204      	str	r2, [sp, #16]
   d6aec:	a906      	add	r1, sp, #24
   d6aee:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6af0:	60e3      	str	r3, [r4, #12]
   d6af2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6af6:	9205      	str	r2, [sp, #20]
   d6af8:	f7ff fedf 	bl	d68ba <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6afc:	4b0d      	ldr	r3, [pc, #52]	; (d6b34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6afe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6b00:	4b0d      	ldr	r3, [pc, #52]	; (d6b38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b02:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6b04:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6b06:	a806      	add	r0, sp, #24
   d6b08:	f7ff fee6 	bl	d68d8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6b0c:	a802      	add	r0, sp, #8
   d6b0e:	f7fd fbab 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6b12:	2200      	movs	r2, #0
   d6b14:	4629      	mov	r1, r5
   d6b16:	4809      	ldr	r0, [pc, #36]	; (d6b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6b18:	f7fe fd28 	bl	d556c <application_thread_invoke>
   d6b1c:	4630      	mov	r0, r6
   d6b1e:	f7fd fba3 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6b22:	2110      	movs	r1, #16
   d6b24:	4630      	mov	r0, r6
   d6b26:	f002 f9ba 	bl	d8e9e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d6b2a:	4668      	mov	r0, sp
   d6b2c:	f7ff fed4 	bl	d68d8 <_ZN8particle5ErrorD1Ev>
    }
   d6b30:	b009      	add	sp, #36	; 0x24
   d6b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b34:	000d69e7 	.word	0x000d69e7
   d6b38:	000d6c5d 	.word	0x000d6c5d
   d6b3c:	000d56eb 	.word	0x000d56eb

000d6b40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b44:	b08b      	sub	sp, #44	; 0x2c
   d6b46:	4606      	mov	r6, r0
   d6b48:	460f      	mov	r7, r1
   d6b4a:	4690      	mov	r8, r2
   d6b4c:	4699      	mov	r9, r3
   d6b4e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6b52:	f7fe fd2f 	bl	d55b4 <spark_cloud_flag_connected>
   d6b56:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d6b58:	4683      	mov	fp, r0
   d6b5a:	bb30      	cbnz	r0, d6baa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6b5c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6b60:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6b62:	a905      	add	r1, sp, #20
   d6b64:	4628      	mov	r0, r5
   d6b66:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6b6a:	f7ff fea6 	bl	d68ba <_ZN8particle5ErrorC1EOS0_>
   d6b6e:	2014      	movs	r0, #20
   d6b70:	f7fd fa93 	bl	d409a <_Znwj>
   d6b74:	4604      	mov	r4, r0
   d6b76:	b158      	cbz	r0, d6b90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6b78:	2302      	movs	r3, #2
   d6b7a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b7c:	2301      	movs	r3, #1
   d6b7e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6b80:	f8c0 b004 	str.w	fp, [r0, #4]
   d6b84:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6b88:	4629      	mov	r1, r5
   d6b8a:	300c      	adds	r0, #12
   d6b8c:	f7ff fe95 	bl	d68ba <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6b90:	4630      	mov	r0, r6
   d6b92:	4621      	mov	r1, r4
   d6b94:	f840 4b04 	str.w	r4, [r0], #4
   d6b98:	f7ff ff08 	bl	d69ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6b9c:	4628      	mov	r0, r5
   d6b9e:	f7ff fe9b 	bl	d68d8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6ba2:	a805      	add	r0, sp, #20
   d6ba4:	f7ff fe98 	bl	d68d8 <_ZN8particle5ErrorD1Ev>
   d6ba8:	e052      	b.n	d6c50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6baa:	2400      	movs	r4, #0
   d6bac:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6bae:	2014      	movs	r0, #20
   d6bb0:	606c      	str	r4, [r5, #4]
   d6bb2:	60ac      	str	r4, [r5, #8]
   d6bb4:	9307      	str	r3, [sp, #28]
   d6bb6:	f7fd fa70 	bl	d409a <_Znwj>
   d6bba:	4601      	mov	r1, r0
   d6bbc:	b118      	cbz	r0, d6bc6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6bbe:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6bc0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6bc2:	6044      	str	r4, [r0, #4]
   d6bc4:	6084      	str	r4, [r0, #8]
   d6bc6:	a804      	add	r0, sp, #16
   d6bc8:	9103      	str	r1, [sp, #12]
   d6bca:	f7ff feef 	bl	d69ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6bce:	4b22      	ldr	r3, [pc, #136]	; (d6c58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6bd0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6bd2:	2008      	movs	r0, #8
   d6bd4:	f7fd fa61 	bl	d409a <_Znwj>
   d6bd8:	4604      	mov	r4, r0
   d6bda:	b128      	cbz	r0, d6be8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6bdc:	9b03      	ldr	r3, [sp, #12]
   d6bde:	f840 3b04 	str.w	r3, [r0], #4
   d6be2:	a904      	add	r1, sp, #16
   d6be4:	f7ff f971 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6be8:	9500      	str	r5, [sp, #0]
   d6bea:	fa5f f38a 	uxtb.w	r3, sl
   d6bee:	464a      	mov	r2, r9
   d6bf0:	4641      	mov	r1, r8
   d6bf2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6bf4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6bf6:	f7fe fce5 	bl	d55c4 <spark_send_event>
   d6bfa:	b920      	cbnz	r0, d6c06 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6bfc:	9b03      	ldr	r3, [sp, #12]
   d6bfe:	785b      	ldrb	r3, [r3, #1]
   d6c00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6c04:	b183      	cbz	r3, d6c28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6c06:	9b03      	ldr	r3, [sp, #12]
   d6c08:	9305      	str	r3, [sp, #20]
   d6c0a:	a904      	add	r1, sp, #16
   d6c0c:	a806      	add	r0, sp, #24
   d6c0e:	f7ff f95c 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6c12:	a905      	add	r1, sp, #20
   d6c14:	4630      	mov	r0, r6
   d6c16:	f7ff fe89 	bl	d692c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c1a:	a806      	add	r0, sp, #24
   d6c1c:	f7ff f974 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c20:	a804      	add	r0, sp, #16
   d6c22:	f7ff f971 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c26:	e013      	b.n	d6c50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6c28:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6c2c:	a905      	add	r1, sp, #20
   d6c2e:	a803      	add	r0, sp, #12
   d6c30:	9205      	str	r2, [sp, #20]
   d6c32:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6c36:	f7ff fefd 	bl	d6a34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6c3a:	a805      	add	r0, sp, #20
   d6c3c:	f7ff fe4c 	bl	d68d8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6c40:	a805      	add	r0, sp, #20
   d6c42:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6c44:	f7ff fe83 	bl	d694e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6c48:	a806      	add	r0, sp, #24
   d6c4a:	f7ff f95d 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c4e:	e7da      	b.n	d6c06 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6c50:	4630      	mov	r0, r6
   d6c52:	b00b      	add	sp, #44	; 0x2c
   d6c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c58:	000d6dcd 	.word	0x000d6dcd

000d6c5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6c5c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c60:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6c62:	d006      	beq.n	d6c72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6c64:	2a03      	cmp	r2, #3
   d6c66:	d017      	beq.n	d6c98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6c68:	2a01      	cmp	r2, #1
   d6c6a:	d122      	bne.n	d6cb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6c6c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6c6e:	6003      	str	r3, [r0, #0]
	      break;
   d6c70:	e01f      	b.n	d6cb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6c72:	2018      	movs	r0, #24
   d6c74:	680e      	ldr	r6, [r1, #0]
   d6c76:	f7fd fa10 	bl	d409a <_Znwj>
   d6c7a:	4605      	mov	r5, r0
   d6c7c:	b150      	cbz	r0, d6c94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6c7e:	4631      	mov	r1, r6
   d6c80:	f7ff fec8 	bl	d6a14 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6c84:	6930      	ldr	r0, [r6, #16]
   d6c86:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6c8a:	b108      	cbz	r0, d6c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6c8c:	f002 ff46 	bl	d9b1c <strdup>
   d6c90:	6128      	str	r0, [r5, #16]
   d6c92:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6c94:	6025      	str	r5, [r4, #0]
   d6c96:	e00c      	b.n	d6cb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6c98:	6804      	ldr	r4, [r0, #0]
   d6c9a:	b154      	cbz	r4, d6cb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6c9c:	f104 0010 	add.w	r0, r4, #16
   d6ca0:	f7ff fe1a 	bl	d68d8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6ca4:	4620      	mov	r0, r4
   d6ca6:	f7fd fadf 	bl	d4268 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6caa:	2118      	movs	r1, #24
   d6cac:	4620      	mov	r0, r4
   d6cae:	f002 f8f6 	bl	d8e9e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6cb2:	2000      	movs	r0, #0
   d6cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6cb6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6cb6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6cb8:	2300      	movs	r3, #0
   d6cba:	6083      	str	r3, [r0, #8]
   d6cbc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6cbe:	4604      	mov	r4, r0
   d6cc0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6cc2:	b12b      	cbz	r3, d6cd0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6cc4:	2202      	movs	r2, #2
   d6cc6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6cc8:	68eb      	ldr	r3, [r5, #12]
   d6cca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6ccc:	68ab      	ldr	r3, [r5, #8]
   d6cce:	60a3      	str	r3, [r4, #8]
	}
    }
   d6cd0:	4620      	mov	r0, r4
   d6cd2:	bd38      	pop	{r3, r4, r5, pc}

000d6cd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6cd4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6cd6:	b570      	push	{r4, r5, r6, lr}
   d6cd8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6cda:	d006      	beq.n	d6cea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6cdc:	2a03      	cmp	r2, #3
   d6cde:	d011      	beq.n	d6d04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6ce0:	2a01      	cmp	r2, #1
   d6ce2:	d118      	bne.n	d6d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6ce4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6ce6:	6003      	str	r3, [r0, #0]
	      break;
   d6ce8:	e015      	b.n	d6d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6cea:	2014      	movs	r0, #20
   d6cec:	680e      	ldr	r6, [r1, #0]
   d6cee:	f7fd f9d4 	bl	d409a <_Znwj>
   d6cf2:	4605      	mov	r5, r0
   d6cf4:	b120      	cbz	r0, d6d00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6cf6:	4631      	mov	r1, r6
   d6cf8:	f7ff ffdd 	bl	d6cb6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6cfc:	7c33      	ldrb	r3, [r6, #16]
   d6cfe:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6d00:	6025      	str	r5, [r4, #0]
   d6d02:	e008      	b.n	d6d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6d04:	6804      	ldr	r4, [r0, #0]
   d6d06:	b134      	cbz	r4, d6d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6d08:	4620      	mov	r0, r4
   d6d0a:	f7fd faad 	bl	d4268 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6d0e:	2114      	movs	r1, #20
   d6d10:	4620      	mov	r0, r4
   d6d12:	f002 f8c4 	bl	d8e9e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6d16:	2000      	movs	r0, #0
   d6d18:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6d1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6d1c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6d1e:	2300      	movs	r3, #0
   d6d20:	b087      	sub	sp, #28
   d6d22:	460c      	mov	r4, r1
   d6d24:	f3bf 8f5f 	dmb	sy
   d6d28:	e850 6f00 	ldrex	r6, [r0]
   d6d2c:	e840 3200 	strex	r2, r3, [r0]
   d6d30:	2a00      	cmp	r2, #0
   d6d32:	d1f9      	bne.n	d6d28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6d34:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6d38:	2e00      	cmp	r6, #0
   d6d3a:	d03f      	beq.n	d6dbc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6d3c:	4618      	mov	r0, r3
   d6d3e:	f7fe fc0d 	bl	d555c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6d42:	4607      	mov	r7, r0
   d6d44:	b120      	cbz	r0, d6d50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6d46:	4621      	mov	r1, r4
   d6d48:	4630      	mov	r0, r6
   d6d4a:	f7ff fe53 	bl	d69f4 <_ZNKSt8functionIFvRKbEEclES1_>
   d6d4e:	e02e      	b.n	d6dae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6d50:	4631      	mov	r1, r6
   d6d52:	a801      	add	r0, sp, #4
   d6d54:	f7ff ffaf 	bl	d6cb6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6d58:	7823      	ldrb	r3, [r4, #0]
   d6d5a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6d5e:	2010      	movs	r0, #16
   d6d60:	f7fd f99b 	bl	d409a <_Znwj>
   d6d64:	4605      	mov	r5, r0
   d6d66:	b1d0      	cbz	r0, d6d9e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d68:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6d6a:	2014      	movs	r0, #20
   d6d6c:	f7fd f995 	bl	d409a <_Znwj>
   d6d70:	4604      	mov	r4, r0
   d6d72:	b178      	cbz	r0, d6d94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d74:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6d76:	4601      	mov	r1, r0
   d6d78:	a801      	add	r0, sp, #4
   d6d7a:	f7ff fe06 	bl	d698a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d7e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6d80:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d82:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d84:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6d86:	9203      	str	r2, [sp, #12]
   d6d88:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d8a:	60e3      	str	r3, [r4, #12]
   d6d8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6d90:	9204      	str	r2, [sp, #16]
   d6d92:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6d94:	4b0a      	ldr	r3, [pc, #40]	; (d6dc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6d96:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6d98:	4b0a      	ldr	r3, [pc, #40]	; (d6dc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6d9a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6d9c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6d9e:	a801      	add	r0, sp, #4
   d6da0:	f7fd fa62 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6da4:	2200      	movs	r2, #0
   d6da6:	4629      	mov	r1, r5
   d6da8:	4807      	ldr	r0, [pc, #28]	; (d6dc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6daa:	f7fe fbdf 	bl	d556c <application_thread_invoke>
   d6dae:	4630      	mov	r0, r6
   d6db0:	f7fd fa5a 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6db4:	2110      	movs	r1, #16
   d6db6:	4630      	mov	r0, r6
   d6db8:	f002 f871 	bl	d8e9e <_ZdlPvj>
        }
    }
   d6dbc:	b007      	add	sp, #28
   d6dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6dc0:	000d6a07 	.word	0x000d6a07
   d6dc4:	000d6cd5 	.word	0x000d6cd5
   d6dc8:	000d56eb 	.word	0x000d56eb

000d6dcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6dcc:	b530      	push	{r4, r5, lr}
   d6dce:	b085      	sub	sp, #20
   d6dd0:	4604      	mov	r4, r0
   d6dd2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6dd4:	4668      	mov	r0, sp
   d6dd6:	4611      	mov	r1, r2
   d6dd8:	f7ff fdb9 	bl	d694e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6ddc:	b17c      	cbz	r4, d6dfe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6dde:	b224      	sxth	r4, r4
   d6de0:	4628      	mov	r0, r5
   d6de2:	b10d      	cbz	r5, d6de8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6de4:	f002 fe9a 	bl	d9b1c <strdup>
   d6de8:	9002      	str	r0, [sp, #8]
   d6dea:	a902      	add	r1, sp, #8
   d6dec:	4668      	mov	r0, sp
   d6dee:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6df2:	f7ff fe1f 	bl	d6a34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6df6:	a802      	add	r0, sp, #8
   d6df8:	f7ff fd6e 	bl	d68d8 <_ZN8particle5ErrorD1Ev>
   d6dfc:	e01d      	b.n	d6e3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6dfe:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6e00:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6e04:	f04f 0201 	mov.w	r2, #1
   d6e08:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6e0c:	42a3      	cmp	r3, r4
   d6e0e:	d103      	bne.n	d6e18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6e10:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6e14:	2900      	cmp	r1, #0
   d6e16:	d1f7      	bne.n	d6e08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6e18:	d002      	beq.n	d6e20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6e1a:	f88d 3008 	strb.w	r3, [sp, #8]
   d6e1e:	e00c      	b.n	d6e3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6e20:	f110 010c 	adds.w	r1, r0, #12
   d6e24:	f04f 0301 	mov.w	r3, #1
   d6e28:	bf18      	it	ne
   d6e2a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6e2c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6e30:	3004      	adds	r0, #4
   d6e32:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6e36:	f7ff ff71 	bl	d6d1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6e3a:	a801      	add	r0, sp, #4
   d6e3c:	f7ff f864 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6e40:	b005      	add	sp, #20
   d6e42:	bd30      	pop	{r4, r5, pc}

000d6e44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e44:	2200      	movs	r2, #0
   d6e46:	4611      	mov	r1, r2
   d6e48:	6840      	ldr	r0, [r0, #4]
   d6e4a:	f7fe bc03 	b.w	d5654 <network_listening>

000d6e4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6e4e:	2200      	movs	r2, #0
   d6e50:	4611      	mov	r1, r2
   d6e52:	6840      	ldr	r0, [r0, #4]
   d6e54:	f7fe bc0e 	b.w	d5674 <network_get_listen_timeout>

000d6e58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6e58:	2200      	movs	r2, #0
   d6e5a:	6840      	ldr	r0, [r0, #4]
   d6e5c:	f7fe bc02 	b.w	d5664 <network_set_listen_timeout>

000d6e60 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e60:	2200      	movs	r2, #0
   d6e62:	f081 0101 	eor.w	r1, r1, #1
   d6e66:	6840      	ldr	r0, [r0, #4]
   d6e68:	f7fe bbec 	b.w	d5644 <network_listen>

000d6e6c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6e6c:	2300      	movs	r3, #0
   d6e6e:	461a      	mov	r2, r3
   d6e70:	4619      	mov	r1, r3
   d6e72:	6840      	ldr	r0, [r0, #4]
   d6e74:	f7fe bbde 	b.w	d5634 <network_off>

000d6e78 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6e78:	2300      	movs	r3, #0
   d6e7a:	461a      	mov	r2, r3
   d6e7c:	4619      	mov	r1, r3
   d6e7e:	6840      	ldr	r0, [r0, #4]
   d6e80:	f7fe bbd0 	b.w	d5624 <network_on>

000d6e84 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e84:	2200      	movs	r2, #0
   d6e86:	4611      	mov	r1, r2
   d6e88:	6840      	ldr	r0, [r0, #4]
   d6e8a:	f7fe bbc3 	b.w	d5614 <network_ready>

000d6e8e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e8e:	2200      	movs	r2, #0
   d6e90:	4611      	mov	r1, r2
   d6e92:	6840      	ldr	r0, [r0, #4]
   d6e94:	f7fe bbae 	b.w	d55f4 <network_connecting>

000d6e98 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e98:	2200      	movs	r2, #0
   d6e9a:	2102      	movs	r1, #2
   d6e9c:	6840      	ldr	r0, [r0, #4]
   d6e9e:	f7fe bbb1 	b.w	d5604 <network_disconnect>

000d6ea2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ea2:	2300      	movs	r3, #0
   d6ea4:	461a      	mov	r2, r3
   d6ea6:	6840      	ldr	r0, [r0, #4]
   d6ea8:	f7fe bb9c 	b.w	d55e4 <network_connect>

000d6eac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6eac:	4b02      	ldr	r3, [pc, #8]	; (d6eb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6eae:	2203      	movs	r2, #3
   d6eb0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6eb2:	4a02      	ldr	r2, [pc, #8]	; (d6ebc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6eb4:	601a      	str	r2, [r3, #0]
   d6eb6:	4770      	bx	lr
   d6eb8:	2003e3a0 	.word	0x2003e3a0
   d6ebc:	000da14c 	.word	0x000da14c

000d6ec0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6ec0:	4770      	bx	lr

000d6ec2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ec4:	4606      	mov	r6, r0
   d6ec6:	4615      	mov	r5, r2
   d6ec8:	460c      	mov	r4, r1
   d6eca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6ecc:	42bc      	cmp	r4, r7
   d6ece:	d006      	beq.n	d6ede <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6ed0:	6833      	ldr	r3, [r6, #0]
   d6ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6ed6:	689b      	ldr	r3, [r3, #8]
   d6ed8:	4630      	mov	r0, r6
   d6eda:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6edc:	e7f6      	b.n	d6ecc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6ede:	4628      	mov	r0, r5
   d6ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ee2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6ee2:	2200      	movs	r2, #0
   d6ee4:	7c00      	ldrb	r0, [r0, #16]
   d6ee6:	f7fe b9f1 	b.w	d52cc <HAL_I2C_Write_Data>

000d6eea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6eea:	2100      	movs	r1, #0
   d6eec:	7c00      	ldrb	r0, [r0, #16]
   d6eee:	f7fe b9f5 	b.w	d52dc <HAL_I2C_Available_Data>

000d6ef2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6ef2:	2100      	movs	r1, #0
   d6ef4:	7c00      	ldrb	r0, [r0, #16]
   d6ef6:	f7fe b9f9 	b.w	d52ec <HAL_I2C_Read_Data>

000d6efa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6efa:	2100      	movs	r1, #0
   d6efc:	7c00      	ldrb	r0, [r0, #16]
   d6efe:	f7fe b9fd 	b.w	d52fc <HAL_I2C_Peek_Data>

000d6f02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6f02:	2100      	movs	r1, #0
   d6f04:	7c00      	ldrb	r0, [r0, #16]
   d6f06:	f7fe ba01 	b.w	d530c <HAL_I2C_Flush_Data>

000d6f0a <_ZN7TwoWireD0Ev>:
   d6f0a:	b510      	push	{r4, lr}
   d6f0c:	2114      	movs	r1, #20
   d6f0e:	4604      	mov	r4, r0
   d6f10:	f001 ffc5 	bl	d8e9e <_ZdlPvj>
   d6f14:	4620      	mov	r0, r4
   d6f16:	bd10      	pop	{r4, pc}

000d6f18 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6f18:	b510      	push	{r4, lr}
   d6f1a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6f1c:	2300      	movs	r3, #0
   d6f1e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6f24:	60a3      	str	r3, [r4, #8]
   d6f26:	4b04      	ldr	r3, [pc, #16]	; (d6f38 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6f28:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6f2a:	4608      	mov	r0, r1
   d6f2c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6f2e:	4611      	mov	r1, r2
   d6f30:	f7fe f9fc 	bl	d532c <HAL_I2C_Init>
}
   d6f34:	4620      	mov	r0, r4
   d6f36:	bd10      	pop	{r4, pc}
   d6f38:	000da180 	.word	0x000da180

000d6f3c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6f3c:	2100      	movs	r1, #0
   d6f3e:	7c00      	ldrb	r0, [r0, #16]
   d6f40:	f7fe b9ec 	b.w	d531c <HAL_I2C_Is_Enabled>

000d6f44 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6f44:	4700      	bx	r0
	...

000d6f48 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f4a:	b085      	sub	sp, #20
   d6f4c:	461c      	mov	r4, r3
   d6f4e:	460e      	mov	r6, r1
   d6f50:	4617      	mov	r7, r2
   d6f52:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d6f54:	f7fe f9aa 	bl	d52ac <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d6f58:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d6f5a:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6f5c:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d6f60:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6f62:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d6f66:	bfa5      	ittet	ge
   d6f68:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d6f6c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d6f70:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d6f72:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6f74:	9300      	str	r3, [sp, #0]
   d6f76:	4632      	mov	r2, r6
   d6f78:	463b      	mov	r3, r7
   d6f7a:	4906      	ldr	r1, [pc, #24]	; (d6f94 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d6f7c:	bfa8      	it	ge
   d6f7e:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6f82:	4628      	mov	r0, r5
   d6f84:	f7fe f98a 	bl	d529c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6f88:	fab0 f080 	clz	r0, r0
   d6f8c:	0940      	lsrs	r0, r0, #5
   d6f8e:	b005      	add	sp, #20
   d6f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6f92:	bf00      	nop
   d6f94:	000d6f45 	.word	0x000d6f45

000d6f98 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6f98:	4770      	bx	lr

000d6f9a <_ZN9IPAddressD0Ev>:
   d6f9a:	b510      	push	{r4, lr}
   d6f9c:	2118      	movs	r1, #24
   d6f9e:	4604      	mov	r4, r0
   d6fa0:	f001 ff7d 	bl	d8e9e <_ZdlPvj>
   d6fa4:	4620      	mov	r0, r4
   d6fa6:	bd10      	pop	{r4, pc}

000d6fa8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6faa:	7d03      	ldrb	r3, [r0, #20]
   d6fac:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6fae:	b08d      	sub	sp, #52	; 0x34
   d6fb0:	460e      	mov	r6, r1
   d6fb2:	f100 0704 	add.w	r7, r0, #4
   d6fb6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6fba:	d002      	beq.n	d6fc2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6fbc:	f100 0508 	add.w	r5, r0, #8
   d6fc0:	e018      	b.n	d6ff4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6fc2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6fc4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6fc6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6fca:	232f      	movs	r3, #47	; 0x2f
   d6fcc:	462a      	mov	r2, r5
   d6fce:	200a      	movs	r0, #10
   d6fd0:	f7fe f9b4 	bl	d533c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6fd4:	4628      	mov	r0, r5
   d6fd6:	f002 fdbc 	bl	d9b52 <strlen>
   d6fda:	6833      	ldr	r3, [r6, #0]
   d6fdc:	4602      	mov	r2, r0
   d6fde:	68db      	ldr	r3, [r3, #12]
   d6fe0:	4629      	mov	r1, r5
   d6fe2:	4630      	mov	r0, r6
   d6fe4:	4798      	blx	r3
   d6fe6:	e00f      	b.n	d7008 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6fe8:	b124      	cbz	r4, d6ff4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6fea:	212e      	movs	r1, #46	; 0x2e
   d6fec:	4630      	mov	r0, r6
   d6fee:	f001 fb4d 	bl	d868c <_ZN5Print5printEc>
   d6ff2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6ff4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6ff8:	220a      	movs	r2, #10
   d6ffa:	4630      	mov	r0, r6
   d6ffc:	f001 fb55 	bl	d86aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7000:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7002:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7004:	d1f0      	bne.n	d6fe8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7006:	4620      	mov	r0, r4
    }
    return n;
}
   d7008:	b00d      	add	sp, #52	; 0x34
   d700a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d700c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d700c:	b510      	push	{r4, lr}
   d700e:	4b05      	ldr	r3, [pc, #20]	; (d7024 <_ZN9IPAddressC1Ev+0x18>)
   d7010:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7012:	2211      	movs	r2, #17
   d7014:	f840 3b04 	str.w	r3, [r0], #4
   d7018:	2100      	movs	r1, #0
   d701a:	f002 fd2c 	bl	d9a76 <memset>
{
    clear();
}
   d701e:	4620      	mov	r0, r4
   d7020:	bd10      	pop	{r4, pc}
   d7022:	bf00      	nop
   d7024:	000da1a8 	.word	0x000da1a8

000d7028 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7028:	4603      	mov	r3, r0
   d702a:	4a07      	ldr	r2, [pc, #28]	; (d7048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d702c:	b510      	push	{r4, lr}
   d702e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7032:	f101 0210 	add.w	r2, r1, #16
   d7036:	f851 4b04 	ldr.w	r4, [r1], #4
   d703a:	f843 4b04 	str.w	r4, [r3], #4
   d703e:	4291      	cmp	r1, r2
   d7040:	d1f9      	bne.n	d7036 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7042:	780a      	ldrb	r2, [r1, #0]
   d7044:	701a      	strb	r2, [r3, #0]
}
   d7046:	bd10      	pop	{r4, pc}
   d7048:	000da1a8 	.word	0x000da1a8

000d704c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d704c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d704e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7052:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7056:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d705a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d705e:	2304      	movs	r3, #4
   d7060:	6041      	str	r1, [r0, #4]
   d7062:	7503      	strb	r3, [r0, #20]
   d7064:	bd10      	pop	{r4, pc}

000d7066 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7066:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7068:	780d      	ldrb	r5, [r1, #0]
   d706a:	788b      	ldrb	r3, [r1, #2]
   d706c:	784a      	ldrb	r2, [r1, #1]
   d706e:	78c9      	ldrb	r1, [r1, #3]
   d7070:	9100      	str	r1, [sp, #0]
   d7072:	4629      	mov	r1, r5
   d7074:	f7ff ffea 	bl	d704c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7078:	b003      	add	sp, #12
   d707a:	bd30      	pop	{r4, r5, pc}

000d707c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d707c:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d7080:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d7082:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d7086:	2901      	cmp	r1, #1
   d7088:	4610      	mov	r0, r2
   d708a:	d104      	bne.n	d7096 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d708c:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d7090:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d7094:	e004      	b.n	d70a0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d7096:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d7098:	bf04      	itt	eq
   d709a:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d709e:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d70a0:	3b01      	subs	r3, #1
   d70a2:	f102 0210 	add.w	r2, r2, #16
   d70a6:	d1ec      	bne.n	d7082 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d70a8:	4770      	bx	lr

000d70aa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d70aa:	b40e      	push	{r1, r2, r3}
   d70ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d70b0:	b087      	sub	sp, #28
   d70b2:	af00      	add	r7, sp, #0
   d70b4:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d70b8:	4605      	mov	r5, r0
   d70ba:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d70be:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d70c0:	4623      	mov	r3, r4
   d70c2:	4632      	mov	r2, r6
   d70c4:	2110      	movs	r1, #16
   d70c6:	f107 0008 	add.w	r0, r7, #8
   d70ca:	f7fe faf3 	bl	d56b4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d70ce:	280f      	cmp	r0, #15
   d70d0:	d916      	bls.n	d7100 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d70d2:	f100 0308 	add.w	r3, r0, #8
   d70d6:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d70da:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d70dc:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d70e0:	4632      	mov	r2, r6
   d70e2:	1c41      	adds	r1, r0, #1
   d70e4:	4623      	mov	r3, r4
   d70e6:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d70e8:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d70ea:	f7fe fae3 	bl	d56b4 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d70ee:	1e02      	subs	r2, r0, #0
   d70f0:	dd04      	ble.n	d70fc <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d70f2:	682b      	ldr	r3, [r5, #0]
   d70f4:	4669      	mov	r1, sp
   d70f6:	689b      	ldr	r3, [r3, #8]
   d70f8:	4628      	mov	r0, r5
   d70fa:	4798      	blx	r3
   d70fc:	46c5      	mov	sp, r8
   d70fe:	e007      	b.n	d7110 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d7100:	b130      	cbz	r0, d7110 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d7102:	682b      	ldr	r3, [r5, #0]
   d7104:	4602      	mov	r2, r0
   d7106:	689b      	ldr	r3, [r3, #8]
   d7108:	f107 0108 	add.w	r1, r7, #8
   d710c:	4628      	mov	r0, r5
   d710e:	4798      	blx	r3
    }
}
   d7110:	371c      	adds	r7, #28
   d7112:	46bd      	mov	sp, r7
   d7114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7118:	b003      	add	sp, #12
   d711a:	4770      	bx	lr

000d711c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d711c:	b513      	push	{r0, r1, r4, lr}
   d711e:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d7120:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d7122:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d7126:	6894      	ldr	r4, [r2, #8]
   d7128:	4619      	mov	r1, r3
   d712a:	2201      	movs	r2, #1
   d712c:	47a0      	blx	r4
}
   d712e:	b002      	add	sp, #8
   d7130:	bd10      	pop	{r4, pc}

000d7132 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d7132:	6883      	ldr	r3, [r0, #8]
   d7134:	b1fb      	cbz	r3, d7176 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d7136:	781a      	ldrb	r2, [r3, #0]
   d7138:	2a03      	cmp	r2, #3
   d713a:	d81a      	bhi.n	d7172 <_ZNK5spark9JSONValue4typeEv+0x40>
   d713c:	e8df f002 	tbb	[pc, r2]
   d7140:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d7144:	2005      	movs	r0, #5
   d7146:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d7148:	6802      	ldr	r2, [r0, #0]
   d714a:	685b      	ldr	r3, [r3, #4]
   d714c:	6852      	ldr	r2, [r2, #4]
   d714e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d7150:	282d      	cmp	r0, #45	; 0x2d
   d7152:	d014      	beq.n	d717e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d7154:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7158:	2b09      	cmp	r3, #9
   d715a:	d910      	bls.n	d717e <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d715c:	2874      	cmp	r0, #116	; 0x74
   d715e:	d010      	beq.n	d7182 <_ZNK5spark9JSONValue4typeEv+0x50>
   d7160:	2866      	cmp	r0, #102	; 0x66
   d7162:	d00e      	beq.n	d7182 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d7164:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d7168:	4258      	negs	r0, r3
   d716a:	4158      	adcs	r0, r3
   d716c:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d716e:	2006      	movs	r0, #6
   d7170:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d7172:	2000      	movs	r0, #0
   d7174:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d7176:	4618      	mov	r0, r3
   d7178:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d717a:	2004      	movs	r0, #4
   d717c:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d717e:	2003      	movs	r0, #3
   d7180:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d7182:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d7184:	4770      	bx	lr

000d7186 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d7186:	b510      	push	{r4, lr}
   d7188:	4604      	mov	r4, r0
    switch (type()) {
   d718a:	f7ff ffd2 	bl	d7132 <_ZNK5spark9JSONValue4typeEv>
   d718e:	2802      	cmp	r0, #2
   d7190:	d00d      	beq.n	d71ae <_ZNK5spark9JSONValue5toIntEv+0x28>
   d7192:	d316      	bcc.n	d71c2 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d7194:	2804      	cmp	r0, #4
   d7196:	d814      	bhi.n	d71c2 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d7198:	6822      	ldr	r2, [r4, #0]
   d719a:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d719c:	6850      	ldr	r0, [r2, #4]
   d719e:	685b      	ldr	r3, [r3, #4]
   d71a0:	220a      	movs	r2, #10
   d71a2:	2100      	movs	r1, #0
   d71a4:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d71a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d71aa:	f002 bd95 	b.w	d9cd8 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d71ae:	6822      	ldr	r2, [r4, #0]
   d71b0:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d71b2:	6852      	ldr	r2, [r2, #4]
   d71b4:	685b      	ldr	r3, [r3, #4]
   d71b6:	5cd0      	ldrb	r0, [r2, r3]
   d71b8:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d71bc:	4258      	negs	r0, r3
   d71be:	4158      	adcs	r0, r3
   d71c0:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d71c2:	2000      	movs	r0, #0
    }
}
   d71c4:	bd10      	pop	{r4, pc}

000d71c6 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d71c6:	b510      	push	{r4, lr}
    if (!n_) {
   d71c8:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d71ca:	4604      	mov	r4, r0
    if (!n_) {
   d71cc:	b15b      	cbz	r3, d71e6 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d71ce:	6880      	ldr	r0, [r0, #8]
   d71d0:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d71d2:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d71d4:	3010      	adds	r0, #16
   d71d6:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d71d8:	6120      	str	r0, [r4, #16]
    --n_;
   d71da:	6163      	str	r3, [r4, #20]
    if (n_) {
   d71dc:	b12b      	cbz	r3, d71ea <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d71de:	f7ff ff4d 	bl	d707c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d71e2:	60a0      	str	r0, [r4, #8]
   d71e4:	e001      	b.n	d71ea <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d71e6:	4618      	mov	r0, r3
   d71e8:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d71ea:	2001      	movs	r0, #1
}
   d71ec:	bd10      	pop	{r4, pc}

000d71ee <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d71ee:	b510      	push	{r4, lr}
    write('}');
   d71f0:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d71f2:	4604      	mov	r4, r0
    write('}');
   d71f4:	f7ff ff92 	bl	d711c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d71f8:	2301      	movs	r3, #1
   d71fa:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d71fc:	4620      	mov	r0, r4
   d71fe:	bd10      	pop	{r4, pc}

000d7200 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d7200:	b508      	push	{r3, lr}
    switch (state_) {
   d7202:	7903      	ldrb	r3, [r0, #4]
   d7204:	2b01      	cmp	r3, #1
   d7206:	d002      	beq.n	d720e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d7208:	2b02      	cmp	r3, #2
   d720a:	d002      	beq.n	d7212 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d720c:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d720e:	212c      	movs	r1, #44	; 0x2c
   d7210:	e000      	b.n	d7214 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d7212:	213a      	movs	r1, #58	; 0x3a
   d7214:	f7ff ff82 	bl	d711c <_ZN5spark10JSONWriter5writeEc>
   d7218:	bd08      	pop	{r3, pc}

000d721a <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d721a:	b510      	push	{r4, lr}
   d721c:	4604      	mov	r4, r0
    writeSeparator();
   d721e:	f7ff ffef 	bl	d7200 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d7222:	4620      	mov	r0, r4
   d7224:	217b      	movs	r1, #123	; 0x7b
   d7226:	f7ff ff79 	bl	d711c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d722a:	2300      	movs	r3, #0
   d722c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d722e:	4620      	mov	r0, r4
   d7230:	bd10      	pop	{r4, pc}
	...

000d7234 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d7234:	b538      	push	{r3, r4, r5, lr}
   d7236:	4604      	mov	r4, r0
   d7238:	460d      	mov	r5, r1
    writeSeparator();
   d723a:	f7ff ffe1 	bl	d7200 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d723e:	6823      	ldr	r3, [r4, #0]
   d7240:	4904      	ldr	r1, [pc, #16]	; (d7254 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d7242:	68db      	ldr	r3, [r3, #12]
   d7244:	4620      	mov	r0, r4
   d7246:	462a      	mov	r2, r5
   d7248:	4798      	blx	r3
    state_ = NEXT;
   d724a:	2301      	movs	r3, #1
   d724c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d724e:	4620      	mov	r0, r4
   d7250:	bd38      	pop	{r3, r4, r5, pc}
   d7252:	bf00      	nop
   d7254:	000d9d49 	.word	0x000d9d49

000d7258 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d7258:	b538      	push	{r3, r4, r5, lr}
   d725a:	4604      	mov	r4, r0
   d725c:	460d      	mov	r5, r1
    writeSeparator();
   d725e:	f7ff ffcf 	bl	d7200 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d7262:	6823      	ldr	r3, [r4, #0]
   d7264:	4904      	ldr	r1, [pc, #16]	; (d7278 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d7266:	68db      	ldr	r3, [r3, #12]
   d7268:	4620      	mov	r0, r4
   d726a:	462a      	mov	r2, r5
   d726c:	4798      	blx	r3
    state_ = NEXT;
   d726e:	2301      	movs	r3, #1
   d7270:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d7272:	4620      	mov	r0, r4
   d7274:	bd38      	pop	{r3, r4, r5, pc}
   d7276:	bf00      	nop
   d7278:	000da1c3 	.word	0x000da1c3

000d727c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d727e:	460d      	mov	r5, r1
   d7280:	4617      	mov	r7, r2
    write('"');
   d7282:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d7284:	4604      	mov	r4, r0
   d7286:	442f      	add	r7, r5
    write('"');
   d7288:	f7ff ff48 	bl	d711c <_ZN5spark10JSONWriter5writeEc>
   d728c:	462a      	mov	r2, r5
    const char* const end = str + size;
   d728e:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d7290:	42ba      	cmp	r2, r7
   d7292:	d038      	beq.n	d7306 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d7294:	4616      	mov	r6, r2
   d7296:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d729a:	2d22      	cmp	r5, #34	; 0x22
   d729c:	d003      	beq.n	d72a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d729e:	2d5c      	cmp	r5, #92	; 0x5c
   d72a0:	d001      	beq.n	d72a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d72a2:	2d1f      	cmp	r5, #31
   d72a4:	d82d      	bhi.n	d7302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d72a6:	6823      	ldr	r3, [r4, #0]
   d72a8:	1a52      	subs	r2, r2, r1
   d72aa:	689b      	ldr	r3, [r3, #8]
   d72ac:	4620      	mov	r0, r4
   d72ae:	4798      	blx	r3
            write('\\');
   d72b0:	215c      	movs	r1, #92	; 0x5c
   d72b2:	4620      	mov	r0, r4
   d72b4:	f7ff ff32 	bl	d711c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d72b8:	2d0c      	cmp	r5, #12
   d72ba:	d019      	beq.n	d72f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d72bc:	d807      	bhi.n	d72ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d72be:	2d09      	cmp	r5, #9
   d72c0:	d00f      	beq.n	d72e2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d72c2:	2d0a      	cmp	r5, #10
   d72c4:	d012      	beq.n	d72ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d72c6:	2d08      	cmp	r5, #8
   d72c8:	d114      	bne.n	d72f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d72ca:	2162      	movs	r1, #98	; 0x62
   d72cc:	e00a      	b.n	d72e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d72ce:	2d22      	cmp	r5, #34	; 0x22
   d72d0:	d005      	beq.n	d72de <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d72d2:	2d5c      	cmp	r5, #92	; 0x5c
   d72d4:	d003      	beq.n	d72de <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d72d6:	2d0d      	cmp	r5, #13
   d72d8:	d10c      	bne.n	d72f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d72da:	2172      	movs	r1, #114	; 0x72
   d72dc:	e002      	b.n	d72e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d72de:	4629      	mov	r1, r5
   d72e0:	e000      	b.n	d72e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d72e2:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d72e4:	4620      	mov	r0, r4
   d72e6:	f7ff ff19 	bl	d711c <_ZN5spark10JSONWriter5writeEc>
                break;
   d72ea:	e009      	b.n	d7300 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d72ec:	216e      	movs	r1, #110	; 0x6e
   d72ee:	e7f9      	b.n	d72e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d72f0:	2166      	movs	r1, #102	; 0x66
   d72f2:	e7f7      	b.n	d72e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d72f4:	6823      	ldr	r3, [r4, #0]
   d72f6:	490a      	ldr	r1, [pc, #40]	; (d7320 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d72f8:	68db      	ldr	r3, [r3, #12]
   d72fa:	462a      	mov	r2, r5
   d72fc:	4620      	mov	r0, r4
   d72fe:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d7300:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d7302:	4632      	mov	r2, r6
   d7304:	e7c4      	b.n	d7290 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d7306:	4291      	cmp	r1, r2
   d7308:	d004      	beq.n	d7314 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d730a:	6823      	ldr	r3, [r4, #0]
   d730c:	1a52      	subs	r2, r2, r1
   d730e:	689d      	ldr	r5, [r3, #8]
   d7310:	4620      	mov	r0, r4
   d7312:	47a8      	blx	r5
    }
    write('"');
   d7314:	2122      	movs	r1, #34	; 0x22
   d7316:	4620      	mov	r0, r4
   d7318:	f7ff ff00 	bl	d711c <_ZN5spark10JSONWriter5writeEc>
   d731c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d731e:	bf00      	nop
   d7320:	000da1d4 	.word	0x000da1d4

000d7324 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d7324:	b570      	push	{r4, r5, r6, lr}
   d7326:	4604      	mov	r4, r0
   d7328:	460d      	mov	r5, r1
   d732a:	4616      	mov	r6, r2
    writeSeparator();
   d732c:	f7ff ff68 	bl	d7200 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d7330:	4620      	mov	r0, r4
   d7332:	4632      	mov	r2, r6
   d7334:	4629      	mov	r1, r5
   d7336:	f7ff ffa1 	bl	d727c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d733a:	2302      	movs	r3, #2
   d733c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d733e:	4620      	mov	r0, r4
   d7340:	bd70      	pop	{r4, r5, r6, pc}

000d7342 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d7342:	b570      	push	{r4, r5, r6, lr}
   d7344:	4604      	mov	r4, r0
   d7346:	460d      	mov	r5, r1
   d7348:	4616      	mov	r6, r2
    writeSeparator();
   d734a:	f7ff ff59 	bl	d7200 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d734e:	4620      	mov	r0, r4
   d7350:	4632      	mov	r2, r6
   d7352:	4629      	mov	r1, r5
   d7354:	f7ff ff92 	bl	d727c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d7358:	2301      	movs	r3, #1
   d735a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d735c:	4620      	mov	r0, r4
   d735e:	bd70      	pop	{r4, r5, r6, pc}

000d7360 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7360:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d7362:	2300      	movs	r3, #0
   d7364:	4604      	mov	r4, r0
   d7366:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7368:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d736a:	4810      	ldr	r0, [pc, #64]	; (d73ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d736c:	60a0      	str	r0, [r4, #8]
   d736e:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d7370:	b1d1      	cbz	r1, d73a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d7372:	780b      	ldrb	r3, [r1, #0]
   d7374:	2b03      	cmp	r3, #3
   d7376:	d006      	beq.n	d7386 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d7378:	b9b3      	cbnz	r3, d73a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d737a:	6813      	ldr	r3, [r2, #0]
   d737c:	6858      	ldr	r0, [r3, #4]
   d737e:	684b      	ldr	r3, [r1, #4]
   d7380:	5cc3      	ldrb	r3, [r0, r3]
   d7382:	2b6e      	cmp	r3, #110	; 0x6e
   d7384:	d008      	beq.n	d7398 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d7386:	6813      	ldr	r3, [r2, #0]
   d7388:	6858      	ldr	r0, [r3, #4]
   d738a:	684b      	ldr	r3, [r1, #4]
   d738c:	4403      	add	r3, r0
   d738e:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d7390:	688b      	ldr	r3, [r1, #8]
   d7392:	6849      	ldr	r1, [r1, #4]
   d7394:	1a5b      	subs	r3, r3, r1
   d7396:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d7398:	4611      	mov	r1, r2
   d739a:	4620      	mov	r0, r4
   d739c:	f851 3b04 	ldr.w	r3, [r1], #4
   d73a0:	f840 3b04 	str.w	r3, [r0], #4
   d73a4:	f7fe fe4e 	bl	d6044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d73a8:	4620      	mov	r0, r4
   d73aa:	bd10      	pop	{r4, pc}
   d73ac:	000da2ac 	.word	0x000da2ac

000d73b0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d73b0:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d73b2:	b510      	push	{r4, lr}
   d73b4:	4604      	mov	r4, r0
   d73b6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d73b8:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d73ba:	6083      	str	r3, [r0, #8]
   d73bc:	60c3      	str	r3, [r0, #12]
   d73be:	6103      	str	r3, [r0, #16]
   d73c0:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d73c2:	b171      	cbz	r1, d73e2 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d73c4:	780b      	ldrb	r3, [r1, #0]
   d73c6:	2b01      	cmp	r3, #1
   d73c8:	d10b      	bne.n	d73e2 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d73ca:	f101 0310 	add.w	r3, r1, #16
   d73ce:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d73d0:	68cb      	ldr	r3, [r1, #12]
   d73d2:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d73d4:	4611      	mov	r1, r2
   d73d6:	f851 3b04 	ldr.w	r3, [r1], #4
   d73da:	f840 3b04 	str.w	r3, [r0], #4
   d73de:	f7fe fe31 	bl	d6044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d73e2:	4620      	mov	r0, r4
   d73e4:	bd10      	pop	{r4, pc}

000d73e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d73e6:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d73e8:	b510      	push	{r4, lr}
   d73ea:	4604      	mov	r4, r0
   d73ec:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d73ee:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d73f0:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d73f2:	b131      	cbz	r1, d7402 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d73f4:	4611      	mov	r1, r2
   d73f6:	f851 3b04 	ldr.w	r3, [r1], #4
   d73fa:	f840 3b04 	str.w	r3, [r0], #4
   d73fe:	f7fe fe21 	bl	d6044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d7402:	4620      	mov	r0, r4
   d7404:	bd10      	pop	{r4, pc}

000d7406 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d7406:	6880      	ldr	r0, [r0, #8]
   d7408:	6803      	ldr	r3, [r0, #0]
   d740a:	68db      	ldr	r3, [r3, #12]
   d740c:	4718      	bx	r3

000d740e <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d740e:	4770      	bx	lr

000d7410 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d7410:	b119      	cbz	r1, d741a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d7412:	680b      	ldr	r3, [r1, #0]
   d7414:	4608      	mov	r0, r1
   d7416:	685b      	ldr	r3, [r3, #4]
   d7418:	4718      	bx	r3
   d741a:	4770      	bx	lr

000d741c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d741c:	b119      	cbz	r1, d7426 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d741e:	680b      	ldr	r3, [r1, #0]
   d7420:	4608      	mov	r0, r1
   d7422:	685b      	ldr	r3, [r3, #4]
   d7424:	4718      	bx	r3
   d7426:	4770      	bx	lr

000d7428 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d7428:	4770      	bx	lr

000d742a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d742a:	4770      	bx	lr

000d742c <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d742c:	4770      	bx	lr

000d742e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d742e:	b538      	push	{r3, r4, r5, lr}
   d7430:	4604      	mov	r4, r0
   d7432:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d7434:	6800      	ldr	r0, [r0, #0]
   d7436:	212e      	movs	r1, #46	; 0x2e
   d7438:	f002 fb5c 	bl	d9af4 <strchrnul>
    size = s - category;
   d743c:	6823      	ldr	r3, [r4, #0]
   d743e:	1ac3      	subs	r3, r0, r3
   d7440:	602b      	str	r3, [r5, #0]
    if (size) {
   d7442:	b123      	cbz	r3, d744e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d7444:	7803      	ldrb	r3, [r0, #0]
   d7446:	b103      	cbz	r3, d744a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d7448:	3001      	adds	r0, #1
   d744a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d744c:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d744e:	4618      	mov	r0, r3
}
   d7450:	bd38      	pop	{r3, r4, r5, pc}

000d7452 <_ZN5spark16JSONStreamWriterD0Ev>:
   d7452:	b510      	push	{r4, lr}
   d7454:	210c      	movs	r1, #12
   d7456:	4604      	mov	r4, r0
   d7458:	f001 fd21 	bl	d8e9e <_ZdlPvj>
   d745c:	4620      	mov	r0, r4
   d745e:	bd10      	pop	{r4, pc}

000d7460 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d7460:	b510      	push	{r4, lr}
   d7462:	2104      	movs	r1, #4
   d7464:	4604      	mov	r4, r0
   d7466:	f001 fd1a 	bl	d8e9e <_ZdlPvj>
   d746a:	4620      	mov	r0, r4
   d746c:	bd10      	pop	{r4, pc}

000d746e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d746e:	b510      	push	{r4, lr}
   d7470:	2104      	movs	r1, #4
   d7472:	4604      	mov	r4, r0
   d7474:	f001 fd13 	bl	d8e9e <_ZdlPvj>
   d7478:	4620      	mov	r0, r4
   d747a:	bd10      	pop	{r4, pc}

000d747c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d747c:	b538      	push	{r3, r4, r5, lr}
   d747e:	460c      	mov	r4, r1
   d7480:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d7482:	f001 fb85 	bl	d8b90 <_Z16_fetch_usbserialv>
   d7486:	4284      	cmp	r4, r0
   d7488:	d00d      	beq.n	d74a6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d748a:	f001 faf5 	bl	d8a78 <_Z22__fetch_global_Serial1v>
   d748e:	4284      	cmp	r4, r0
   d7490:	d105      	bne.n	d749e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d7492:	f001 faf1 	bl	d8a78 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d7496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d749a:	f001 bae6 	b.w	d8a6a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d749e:	4621      	mov	r1, r4
   d74a0:	4628      	mov	r0, r5
   d74a2:	f7ff ffbb 	bl	d741c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d74a6:	bd38      	pop	{r3, r4, r5, pc}

000d74a8 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d74a8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d74aa:	f002 fb2d 	bl	d9b08 <strcmp>
}
   d74ae:	fab0 f080 	clz	r0, r0
   d74b2:	0940      	lsrs	r0, r0, #5
   d74b4:	bd08      	pop	{r3, pc}

000d74b6 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d74b6:	b538      	push	{r3, r4, r5, lr}
   d74b8:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d74ba:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d74bc:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d74be:	f002 fb48 	bl	d9b52 <strlen>
   d74c2:	4621      	mov	r1, r4
   d74c4:	4602      	mov	r2, r0
   d74c6:	4628      	mov	r0, r5
}
   d74c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d74cc:	f7ff bf39 	b.w	d7342 <_ZN5spark10JSONWriter5valueEPKcj>

000d74d0 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d74d0:	6800      	ldr	r0, [r0, #0]
   d74d2:	f7fd be63 	b.w	d519c <os_mutex_recursive_lock>

000d74d6 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d74d6:	b570      	push	{r4, r5, r6, lr}
   d74d8:	4604      	mov	r4, r0
    write(str, strlen(str));
   d74da:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d74dc:	460d      	mov	r5, r1
    write(str, strlen(str));
   d74de:	f002 fb38 	bl	d9b52 <strlen>
   d74e2:	6823      	ldr	r3, [r4, #0]
   d74e4:	4602      	mov	r2, r0
   d74e6:	4629      	mov	r1, r5
   d74e8:	4620      	mov	r0, r4
   d74ea:	68db      	ldr	r3, [r3, #12]
}
   d74ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d74f0:	4718      	bx	r3

000d74f2 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d74f2:	b513      	push	{r0, r1, r4, lr}
   d74f4:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d74f6:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d74f8:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d74fc:	68d4      	ldr	r4, [r2, #12]
   d74fe:	4619      	mov	r1, r3
   d7500:	2201      	movs	r2, #1
   d7502:	47a0      	blx	r4
}
   d7504:	b002      	add	sp, #8
   d7506:	bd10      	pop	{r4, pc}

000d7508 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d7508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d750c:	6845      	ldr	r5, [r0, #4]
   d750e:	6807      	ldr	r7, [r0, #0]
   d7510:	b085      	sub	sp, #20
   d7512:	4691      	mov	r9, r2
   d7514:	2214      	movs	r2, #20
   d7516:	4355      	muls	r5, r2
   d7518:	9301      	str	r3, [sp, #4]
   d751a:	10ab      	asrs	r3, r5, #2
   d751c:	4d19      	ldr	r5, [pc, #100]	; (d7584 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d751e:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d7520:	435d      	muls	r5, r3
   d7522:	468b      	mov	fp, r1
   d7524:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d7526:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d7528:	2d00      	cmp	r5, #0
   d752a:	9303      	str	r3, [sp, #12]
   d752c:	dd23      	ble.n	d7576 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d752e:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d7530:	106e      	asrs	r6, r5, #1
   d7532:	fb03 f006 	mul.w	r0, r3, r6
   d7536:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d753a:	464a      	mov	r2, r9
   d753c:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d7540:	5820      	ldr	r0, [r4, r0]
   d7542:	45d1      	cmp	r9, sl
   d7544:	bf28      	it	cs
   d7546:	4652      	movcs	r2, sl
   d7548:	4659      	mov	r1, fp
   d754a:	f002 fb0a 	bl	d9b62 <strncmp>
                if (cmp == 0) {
   d754e:	9b03      	ldr	r3, [sp, #12]
   d7550:	b948      	cbnz	r0, d7566 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d7552:	45d1      	cmp	r9, sl
   d7554:	d103      	bne.n	d755e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d7556:	9a01      	ldr	r2, [sp, #4]
   d7558:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d755a:	4635      	mov	r5, r6
   d755c:	e7e4      	b.n	d7528 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d755e:	bf8c      	ite	hi
   d7560:	2001      	movhi	r0, #1
   d7562:	2000      	movls	r0, #0
   d7564:	e000      	b.n	d7568 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d7566:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d7568:	2800      	cmp	r0, #0
   d756a:	d0f6      	beq.n	d755a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d756c:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d756e:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d7572:	3e01      	subs	r6, #1
   d7574:	e7f1      	b.n	d755a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d7576:	1be4      	subs	r4, r4, r7
}
   d7578:	4802      	ldr	r0, [pc, #8]	; (d7584 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d757a:	10a4      	asrs	r4, r4, #2
}
   d757c:	4360      	muls	r0, r4
   d757e:	b005      	add	sp, #20
   d7580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7584:	cccccccd 	.word	0xcccccccd

000d7588 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d7588:	b5f0      	push	{r4, r5, r6, r7, lr}
   d758a:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d758c:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d758e:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d7590:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d7592:	b313      	cbz	r3, d75da <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d7594:	b309      	cbz	r1, d75da <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7596:	af04      	add	r7, sp, #16
   d7598:	2300      	movs	r3, #0
   d759a:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d759e:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d75a2:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d75a4:	4639      	mov	r1, r7
   d75a6:	a801      	add	r0, sp, #4
   d75a8:	f7ff ff41 	bl	d742e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d75ac:	4601      	mov	r1, r0
   d75ae:	b1a0      	cbz	r0, d75da <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d75b0:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d75b2:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d75b4:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d75b8:	4620      	mov	r0, r4
   d75ba:	f7ff ffa5 	bl	d7508 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d75be:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d75c2:	b153      	cbz	r3, d75da <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d75c4:	6823      	ldr	r3, [r4, #0]
   d75c6:	2414      	movs	r4, #20
   d75c8:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d75cc:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d75ce:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d75d2:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d75d4:	bfa8      	it	ge
   d75d6:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d75d8:	e7e4      	b.n	d75a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d75da:	4630      	mov	r0, r6
   d75dc:	b005      	add	sp, #20
   d75de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d75e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d75e0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d75e2:	4c09      	ldr	r4, [pc, #36]	; (d7608 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d75e4:	6823      	ldr	r3, [r4, #0]
   d75e6:	07db      	lsls	r3, r3, #31
   d75e8:	d40b      	bmi.n	d7602 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d75ea:	4620      	mov	r0, r4
   d75ec:	f7fc fd66 	bl	d40bc <__cxa_guard_acquire>
   d75f0:	b138      	cbz	r0, d7602 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d75f2:	4620      	mov	r0, r4
   d75f4:	f7fc fd67 	bl	d40c6 <__cxa_guard_release>
   d75f8:	4a04      	ldr	r2, [pc, #16]	; (d760c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d75fa:	4905      	ldr	r1, [pc, #20]	; (d7610 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d75fc:	4805      	ldr	r0, [pc, #20]	; (d7614 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d75fe:	f001 fc49 	bl	d8e94 <__aeabi_atexit>
    return &factory;
}
   d7602:	4804      	ldr	r0, [pc, #16]	; (d7614 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d7604:	bd10      	pop	{r4, pc}
   d7606:	bf00      	nop
   d7608:	2003e3a8 	.word	0x2003e3a8
   d760c:	2003e284 	.word	0x2003e284
   d7610:	000d742b 	.word	0x000d742b
   d7614:	2003e214 	.word	0x2003e214

000d7618 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d7618:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d761a:	4c09      	ldr	r4, [pc, #36]	; (d7640 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d761c:	6823      	ldr	r3, [r4, #0]
   d761e:	07db      	lsls	r3, r3, #31
   d7620:	d40b      	bmi.n	d763a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d7622:	4620      	mov	r0, r4
   d7624:	f7fc fd4a 	bl	d40bc <__cxa_guard_acquire>
   d7628:	b138      	cbz	r0, d763a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d762a:	4620      	mov	r0, r4
   d762c:	f7fc fd4b 	bl	d40c6 <__cxa_guard_release>
   d7630:	4a04      	ldr	r2, [pc, #16]	; (d7644 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d7632:	4905      	ldr	r1, [pc, #20]	; (d7648 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d7634:	4805      	ldr	r0, [pc, #20]	; (d764c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d7636:	f001 fc2d 	bl	d8e94 <__aeabi_atexit>
    return &factory;
}
   d763a:	4804      	ldr	r0, [pc, #16]	; (d764c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d763c:	bd10      	pop	{r4, pc}
   d763e:	bf00      	nop
   d7640:	2003e3d8 	.word	0x2003e3d8
   d7644:	2003e284 	.word	0x2003e284
   d7648:	000d7429 	.word	0x000d7429
   d764c:	2003e210 	.word	0x2003e210

000d7650 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d7650:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7652:	2500      	movs	r5, #0
   d7654:	4604      	mov	r4, r0
   d7656:	6005      	str	r5, [r0, #0]
   d7658:	6045      	str	r5, [r0, #4]
   d765a:	6085      	str	r5, [r0, #8]
   d765c:	6105      	str	r5, [r0, #16]
   d765e:	6145      	str	r5, [r0, #20]
   d7660:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7662:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d7666:	f7fd fd89 	bl	d517c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d766a:	f7ff ffb9 	bl	d75e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d766e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7670:	f7ff ffd2 	bl	d7618 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d7674:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7676:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d7678:	4620      	mov	r0, r4
   d767a:	bd38      	pop	{r3, r4, r5, pc}

000d767c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d767c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d767e:	4c0a      	ldr	r4, [pc, #40]	; (d76a8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d7680:	6823      	ldr	r3, [r4, #0]
   d7682:	07db      	lsls	r3, r3, #31
   d7684:	d40e      	bmi.n	d76a4 <_ZN5spark10LogManager8instanceEv+0x28>
   d7686:	4620      	mov	r0, r4
   d7688:	f7fc fd18 	bl	d40bc <__cxa_guard_acquire>
   d768c:	b150      	cbz	r0, d76a4 <_ZN5spark10LogManager8instanceEv+0x28>
   d768e:	4807      	ldr	r0, [pc, #28]	; (d76ac <_ZN5spark10LogManager8instanceEv+0x30>)
   d7690:	f7ff ffde 	bl	d7650 <_ZN5spark10LogManagerC1Ev>
   d7694:	4620      	mov	r0, r4
   d7696:	f7fc fd16 	bl	d40c6 <__cxa_guard_release>
   d769a:	4a05      	ldr	r2, [pc, #20]	; (d76b0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d769c:	4905      	ldr	r1, [pc, #20]	; (d76b4 <_ZN5spark10LogManager8instanceEv+0x38>)
   d769e:	4803      	ldr	r0, [pc, #12]	; (d76ac <_ZN5spark10LogManager8instanceEv+0x30>)
   d76a0:	f001 fbf8 	bl	d8e94 <__aeabi_atexit>
    return &mgr;
}
   d76a4:	4801      	ldr	r0, [pc, #4]	; (d76ac <_ZN5spark10LogManager8instanceEv+0x30>)
   d76a6:	bd10      	pop	{r4, pc}
   d76a8:	2003e3ac 	.word	0x2003e3ac
   d76ac:	2003e3b0 	.word	0x2003e3b0
   d76b0:	2003e284 	.word	0x2003e284
   d76b4:	000d7ae7 	.word	0x000d7ae7

000d76b8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d76b8:	2300      	movs	r3, #0
   d76ba:	4a02      	ldr	r2, [pc, #8]	; (d76c4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d76bc:	4902      	ldr	r1, [pc, #8]	; (d76c8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d76be:	4803      	ldr	r0, [pc, #12]	; (d76cc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d76c0:	f7fd bf34 	b.w	d552c <log_set_callbacks>
   d76c4:	000d79c9 	.word	0x000d79c9
   d76c8:	000d7959 	.word	0x000d7959
   d76cc:	000d78e1 	.word	0x000d78e1

000d76d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d76d0:	2300      	movs	r3, #0
   d76d2:	461a      	mov	r2, r3
   d76d4:	4619      	mov	r1, r3
   d76d6:	4618      	mov	r0, r3
   d76d8:	f7fd bf28 	b.w	d552c <log_set_callbacks>

000d76dc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d76dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d76de:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d76e0:	688e      	ldr	r6, [r1, #8]
   d76e2:	f851 3b04 	ldr.w	r3, [r1], #4
   d76e6:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d76ea:	4605      	mov	r5, r0
   d76ec:	a801      	add	r0, sp, #4
   d76ee:	f7fe fbec 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d76f2:	4622      	mov	r2, r4
   d76f4:	4631      	mov	r1, r6
   d76f6:	4628      	mov	r0, r5
   d76f8:	f7ff fe5a 	bl	d73b0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d76fc:	a801      	add	r0, sp, #4
   d76fe:	f7fe fc03 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7702:	4628      	mov	r0, r5
   d7704:	b002      	add	sp, #8
   d7706:	bd70      	pop	{r4, r5, r6, pc}

000d7708 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7708:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d770a:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d770c:	690e      	ldr	r6, [r1, #16]
   d770e:	f851 3b04 	ldr.w	r3, [r1], #4
   d7712:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7716:	4605      	mov	r5, r0
   d7718:	a801      	add	r0, sp, #4
   d771a:	f7fe fbd6 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d771e:	4622      	mov	r2, r4
   d7720:	4631      	mov	r1, r6
   d7722:	4628      	mov	r0, r5
   d7724:	f7ff fe5f 	bl	d73e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7728:	a801      	add	r0, sp, #4
   d772a:	f7fe fbed 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d772e:	4628      	mov	r0, r5
   d7730:	b002      	add	sp, #8
   d7732:	bd70      	pop	{r4, r5, r6, pc}

000d7734 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7734:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7736:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d7738:	68ce      	ldr	r6, [r1, #12]
   d773a:	f851 3b04 	ldr.w	r3, [r1], #4
   d773e:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7742:	4605      	mov	r5, r0
   d7744:	a801      	add	r0, sp, #4
   d7746:	f7fe fbc0 	bl	d5eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d774a:	4622      	mov	r2, r4
   d774c:	4631      	mov	r1, r6
   d774e:	4628      	mov	r0, r5
   d7750:	f7ff fe06 	bl	d7360 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7754:	a801      	add	r0, sp, #4
   d7756:	f7fe fbd7 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d775a:	4628      	mov	r0, r5
   d775c:	b002      	add	sp, #8
   d775e:	bd70      	pop	{r4, r5, r6, pc}

000d7760 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d7760:	b530      	push	{r4, r5, lr}
   d7762:	b08b      	sub	sp, #44	; 0x2c
   d7764:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d7766:	4601      	mov	r1, r0
   d7768:	a804      	add	r0, sp, #16
   d776a:	f7ff ffb7 	bl	d76dc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d776e:	a804      	add	r0, sp, #16
   d7770:	f7ff fd29 	bl	d71c6 <_ZN5spark18JSONObjectIterator4nextEv>
   d7774:	b1e8      	cbz	r0, d77b2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d7776:	a904      	add	r1, sp, #16
   d7778:	4668      	mov	r0, sp
   d777a:	f7ff ffdb 	bl	d7734 <_ZNK5spark18JSONObjectIterator4nameEv>
   d777e:	490f      	ldr	r1, [pc, #60]	; (d77bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d7780:	9802      	ldr	r0, [sp, #8]
   d7782:	f7ff fe91 	bl	d74a8 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d7786:	4604      	mov	r4, r0
   d7788:	b110      	cbz	r0, d7790 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d778a:	1c2c      	adds	r4, r5, #0
   d778c:	bf18      	it	ne
   d778e:	2401      	movne	r4, #1
   d7790:	a801      	add	r0, sp, #4
   d7792:	f7fe fbb9 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7796:	2c00      	cmp	r4, #0
   d7798:	d0e9      	beq.n	d776e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d779a:	a904      	add	r1, sp, #16
   d779c:	4668      	mov	r0, sp
   d779e:	f7ff ffb3 	bl	d7708 <_ZNK5spark18JSONObjectIterator5valueEv>
   d77a2:	4668      	mov	r0, sp
   d77a4:	f7ff fcef 	bl	d7186 <_ZNK5spark9JSONValue5toIntEv>
   d77a8:	6028      	str	r0, [r5, #0]
   d77aa:	a801      	add	r0, sp, #4
   d77ac:	f7fe fbac 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77b0:	e7dd      	b.n	d776e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d77b2:	a805      	add	r0, sp, #20
   d77b4:	f7fe fba8 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d77b8:	b00b      	add	sp, #44	; 0x2c
   d77ba:	bd30      	pop	{r4, r5, pc}
   d77bc:	000da20c 	.word	0x000da20c

000d77c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d77c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d77c2:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d77c4:	4620      	mov	r0, r4
   d77c6:	4913      	ldr	r1, [pc, #76]	; (d7814 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d77c8:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d77ca:	f002 f99d 	bl	d9b08 <strcmp>
   d77ce:	b940      	cbnz	r0, d77e2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d77d0:	f001 f9de 	bl	d8b90 <_Z16_fetch_usbserialv>
   d77d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d77d8:	f001 f9ca 	bl	d8b70 <_ZN9USBSerial5beginEl>
        return &Serial;
   d77dc:	f001 f9d8 	bl	d8b90 <_Z16_fetch_usbserialv>
   d77e0:	e015      	b.n	d780e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d77e2:	490d      	ldr	r1, [pc, #52]	; (d7818 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d77e4:	4620      	mov	r0, r4
   d77e6:	f002 f98f 	bl	d9b08 <strcmp>
   d77ea:	b978      	cbnz	r0, d780c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d77ec:	a902      	add	r1, sp, #8
   d77ee:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d77f2:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d77f6:	4628      	mov	r0, r5
   d77f8:	f7ff ffb2 	bl	d7760 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d77fc:	f001 f93c 	bl	d8a78 <_Z22__fetch_global_Serial1v>
   d7800:	9901      	ldr	r1, [sp, #4]
   d7802:	f001 f92f 	bl	d8a64 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d7806:	f001 f937 	bl	d8a78 <_Z22__fetch_global_Serial1v>
   d780a:	e000      	b.n	d780e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d780c:	2000      	movs	r0, #0
}
   d780e:	b003      	add	sp, #12
   d7810:	bd30      	pop	{r4, r5, pc}
   d7812:	bf00      	nop
   d7814:	000da211 	.word	0x000da211
   d7818:	000da218 	.word	0x000da218

000d781c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d781c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d781e:	6804      	ldr	r4, [r0, #0]
   d7820:	6843      	ldr	r3, [r0, #4]
   d7822:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7824:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7826:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d782a:	42a6      	cmp	r6, r4
   d782c:	d005      	beq.n	d783a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d782e:	f104 0008 	add.w	r0, r4, #8
   d7832:	f7ff fff3 	bl	d781c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7836:	3414      	adds	r4, #20
   d7838:	e7f7      	b.n	d782a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d783a:	6828      	ldr	r0, [r5, #0]
   d783c:	f7fd ff2a 	bl	d5694 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7840:	4628      	mov	r0, r5
   d7842:	bd70      	pop	{r4, r5, r6, pc}

000d7844 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7844:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7846:	6804      	ldr	r4, [r0, #0]
   d7848:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d784a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d784c:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7850:	42a6      	cmp	r6, r4
   d7852:	d004      	beq.n	d785e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d7854:	4620      	mov	r0, r4
   d7856:	f000 ffd6 	bl	d8806 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d785a:	3410      	adds	r4, #16
   d785c:	e7f8      	b.n	d7850 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d785e:	6828      	ldr	r0, [r5, #0]
   d7860:	f7fd ff18 	bl	d5694 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7864:	4628      	mov	r0, r5
   d7866:	bd70      	pop	{r4, r5, r6, pc}

000d7868 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d7868:	b510      	push	{r4, lr}
   d786a:	4604      	mov	r4, r0
   d786c:	300c      	adds	r0, #12
   d786e:	f7ff ffd5 	bl	d781c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7872:	4620      	mov	r0, r4
   d7874:	f7ff ffe6 	bl	d7844 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7878:	4620      	mov	r0, r4
   d787a:	bd10      	pop	{r4, pc}

000d787c <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d787c:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d787e:	4b04      	ldr	r3, [pc, #16]	; (d7890 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d7880:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d7882:	f840 3b04 	str.w	r3, [r0], #4
   d7886:	f7ff ffef 	bl	d7868 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d788a:	4620      	mov	r0, r4
   d788c:	bd10      	pop	{r4, pc}
   d788e:	bf00      	nop
   d7890:	000d9d1c 	.word	0x000d9d1c

000d7894 <_ZN5spark16StreamLogHandlerD0Ev>:
   d7894:	b510      	push	{r4, lr}
   d7896:	4604      	mov	r4, r0
   d7898:	f7ff fff0 	bl	d787c <_ZN5spark16StreamLogHandlerD1Ev>
   d789c:	4620      	mov	r0, r4
   d789e:	2124      	movs	r1, #36	; 0x24
   d78a0:	f001 fafd 	bl	d8e9e <_ZdlPvj>
   d78a4:	4620      	mov	r0, r4
   d78a6:	bd10      	pop	{r4, pc}

000d78a8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d78a8:	b510      	push	{r4, lr}
   d78aa:	4b03      	ldr	r3, [pc, #12]	; (d78b8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d78ac:	6003      	str	r3, [r0, #0]
   d78ae:	4604      	mov	r4, r0
   d78b0:	f7ff ffe4 	bl	d787c <_ZN5spark16StreamLogHandlerD1Ev>
   d78b4:	4620      	mov	r0, r4
   d78b6:	bd10      	pop	{r4, pc}
   d78b8:	000da1fc 	.word	0x000da1fc

000d78bc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d78bc:	b510      	push	{r4, lr}
   d78be:	4604      	mov	r4, r0
   d78c0:	f7ff fff2 	bl	d78a8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d78c4:	4620      	mov	r0, r4
   d78c6:	2124      	movs	r1, #36	; 0x24
   d78c8:	f001 fae9 	bl	d8e9e <_ZdlPvj>
   d78cc:	4620      	mov	r0, r4
   d78ce:	bd10      	pop	{r4, pc}

000d78d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d78d0:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d78d2:	6803      	ldr	r3, [r0, #0]
   d78d4:	4604      	mov	r4, r0
   d78d6:	6818      	ldr	r0, [r3, #0]
   d78d8:	f7fd fc68 	bl	d51ac <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d78dc:	4620      	mov	r0, r4
   d78de:	bd10      	pop	{r4, pc}

000d78e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d78e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78e4:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d78e6:	4b1b      	ldr	r3, [pc, #108]	; (d7954 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d78e8:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d78ea:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d78ee:	b085      	sub	sp, #20
   d78f0:	4682      	mov	sl, r0
   d78f2:	460e      	mov	r6, r1
   d78f4:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d78f6:	bb53      	cbnz	r3, d794e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d78f8:	f7ff fec0 	bl	d767c <_ZN5spark10LogManager8instanceEv>
   d78fc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d78fe:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7900:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d7902:	f7ff fde5 	bl	d74d0 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d7906:	7b23      	ldrb	r3, [r4, #12]
   d7908:	b9f3      	cbnz	r3, d7948 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d790a:	2301      	movs	r3, #1
   d790c:	7323      	strb	r3, [r4, #12]
   d790e:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7910:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d7912:	b2f6      	uxtb	r6, r6
   d7914:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d7918:	454d      	cmp	r5, r9
   d791a:	d013      	beq.n	d7944 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d791c:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d7920:	4641      	mov	r1, r8
   d7922:	1d38      	adds	r0, r7, #4
   d7924:	f7ff fe30 	bl	d7588 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7928:	4286      	cmp	r6, r0
   d792a:	d3f5      	bcc.n	d7918 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d792c:	683b      	ldr	r3, [r7, #0]
   d792e:	f8cd b000 	str.w	fp, [sp]
   d7932:	689b      	ldr	r3, [r3, #8]
   d7934:	469e      	mov	lr, r3
   d7936:	4638      	mov	r0, r7
   d7938:	4643      	mov	r3, r8
   d793a:	4632      	mov	r2, r6
   d793c:	4651      	mov	r1, sl
   d793e:	4677      	mov	r7, lr
   d7940:	47b8      	blx	r7
   d7942:	e7e9      	b.n	d7918 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7944:	2300      	movs	r3, #0
   d7946:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d7948:	a803      	add	r0, sp, #12
   d794a:	f7ff ffc1 	bl	d78d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d794e:	b005      	add	sp, #20
   d7950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7954:	e000ed00 	.word	0xe000ed00

000d7958 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d795c:	4699      	mov	r9, r3
   d795e:	4b19      	ldr	r3, [pc, #100]	; (d79c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d7960:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7962:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7966:	4607      	mov	r7, r0
   d7968:	4688      	mov	r8, r1
   d796a:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d796c:	bb33      	cbnz	r3, d79bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d796e:	f7ff fe85 	bl	d767c <_ZN5spark10LogManager8instanceEv>
   d7972:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7974:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7976:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7978:	f7ff fdaa 	bl	d74d0 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d797c:	7b23      	ldrb	r3, [r4, #12]
   d797e:	b9d3      	cbnz	r3, d79b6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7980:	2301      	movs	r3, #1
   d7982:	7323      	strb	r3, [r4, #12]
   d7984:	6825      	ldr	r5, [r4, #0]
   d7986:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d7988:	fa5f fb86 	uxtb.w	fp, r6
   d798c:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d7990:	4555      	cmp	r5, sl
   d7992:	d00e      	beq.n	d79b2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d7994:	f855 6b04 	ldr.w	r6, [r5], #4
   d7998:	4649      	mov	r1, r9
   d799a:	1d30      	adds	r0, r6, #4
   d799c:	f7ff fdf4 	bl	d7588 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d79a0:	4583      	cmp	fp, r0
   d79a2:	d3f5      	bcc.n	d7990 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d79a4:	6833      	ldr	r3, [r6, #0]
   d79a6:	4642      	mov	r2, r8
   d79a8:	68db      	ldr	r3, [r3, #12]
   d79aa:	4639      	mov	r1, r7
   d79ac:	4630      	mov	r0, r6
   d79ae:	4798      	blx	r3
   d79b0:	e7ee      	b.n	d7990 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d79b2:	2300      	movs	r3, #0
   d79b4:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d79b6:	a801      	add	r0, sp, #4
   d79b8:	f7ff ff8a 	bl	d78d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d79bc:	b003      	add	sp, #12
   d79be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d79c2:	bf00      	nop
   d79c4:	e000ed00 	.word	0xe000ed00

000d79c8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d79c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d79cc:	4b15      	ldr	r3, [pc, #84]	; (d7a24 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d79ce:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d79d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d79d4:	4604      	mov	r4, r0
   d79d6:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d79d8:	b9fb      	cbnz	r3, d7a1a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d79da:	f7ff fe4f 	bl	d767c <_ZN5spark10LogManager8instanceEv>
   d79de:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d79e0:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d79e2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d79e4:	f7ff fd74 	bl	d74d0 <_ZN14RecursiveMutex4lockEv>
   d79e8:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d79ec:	2646      	movs	r6, #70	; 0x46
   d79ee:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d79f2:	42af      	cmp	r7, r5
   d79f4:	d107      	bne.n	d7a06 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d79f6:	a801      	add	r0, sp, #4
   d79f8:	f7ff ff6a 	bl	d78d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d79fc:	42b4      	cmp	r4, r6
   d79fe:	bfb4      	ite	lt
   d7a00:	2000      	movlt	r0, #0
   d7a02:	2001      	movge	r0, #1
   d7a04:	e00a      	b.n	d7a1c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d7a06:	f855 0b04 	ldr.w	r0, [r5], #4
   d7a0a:	4641      	mov	r1, r8
   d7a0c:	3004      	adds	r0, #4
   d7a0e:	f7ff fdbb 	bl	d7588 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7a12:	4286      	cmp	r6, r0
   d7a14:	bfa8      	it	ge
   d7a16:	4606      	movge	r6, r0
   d7a18:	e7eb      	b.n	d79f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d7a1a:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d7a1c:	b002      	add	sp, #8
   d7a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7a22:	bf00      	nop
   d7a24:	e000ed00 	.word	0xe000ed00

000d7a28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7a28:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d7a2a:	6803      	ldr	r3, [r0, #0]
   d7a2c:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7a2e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d7a30:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7a34:	429a      	cmp	r2, r3
   d7a36:	4618      	mov	r0, r3
   d7a38:	d00e      	beq.n	d7a58 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d7a3a:	6806      	ldr	r6, [r0, #0]
   d7a3c:	680d      	ldr	r5, [r1, #0]
   d7a3e:	42ae      	cmp	r6, r5
   d7a40:	f103 0304 	add.w	r3, r3, #4
   d7a44:	d1f6      	bne.n	d7a34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d7a46:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7a48:	1a52      	subs	r2, r2, r1
   d7a4a:	f001 fff9 	bl	d9a40 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d7a4e:	6863      	ldr	r3, [r4, #4]
   d7a50:	3b01      	subs	r3, #1
   d7a52:	6063      	str	r3, [r4, #4]
    return true;
   d7a54:	2001      	movs	r0, #1
}
   d7a56:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d7a58:	2000      	movs	r0, #0
   d7a5a:	bd70      	pop	{r4, r5, r6, pc}

000d7a5c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d7a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7a5e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d7a60:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d7a62:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7a64:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d7a66:	f7ff fd33 	bl	d74d0 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7a6a:	a901      	add	r1, sp, #4
   d7a6c:	4620      	mov	r0, r4
   d7a6e:	f7ff ffdb 	bl	d7a28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7a72:	b920      	cbnz	r0, d7a7e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d7a74:	a803      	add	r0, sp, #12
   d7a76:	f7ff ff2b 	bl	d78d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d7a7a:	b004      	add	sp, #16
   d7a7c:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7a7e:	6863      	ldr	r3, [r4, #4]
   d7a80:	2b00      	cmp	r3, #0
   d7a82:	d1f7      	bne.n	d7a74 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d7a84:	f7ff fe24 	bl	d76d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d7a88:	e7f4      	b.n	d7a74 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d7a8a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d7a8a:	b570      	push	{r4, r5, r6, lr}
   d7a8c:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7a8e:	6943      	ldr	r3, [r0, #20]
   d7a90:	2618      	movs	r6, #24
   d7a92:	4604      	mov	r4, r0
   d7a94:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d7a98:	42ae      	cmp	r6, r5
   d7a9a:	d015      	beq.n	d7ac8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7a9c:	f105 0110 	add.w	r1, r5, #16
   d7aa0:	4620      	mov	r0, r4
   d7aa2:	f7ff ffc1 	bl	d7a28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7aa6:	6863      	ldr	r3, [r4, #4]
   d7aa8:	b90b      	cbnz	r3, d7aae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d7aaa:	f7ff fe11 	bl	d76d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d7aae:	69e0      	ldr	r0, [r4, #28]
   d7ab0:	6929      	ldr	r1, [r5, #16]
   d7ab2:	6803      	ldr	r3, [r0, #0]
   d7ab4:	68db      	ldr	r3, [r3, #12]
   d7ab6:	4798      	blx	r3
        if (h.stream) {
   d7ab8:	6969      	ldr	r1, [r5, #20]
   d7aba:	b119      	cbz	r1, d7ac4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7abc:	6a20      	ldr	r0, [r4, #32]
   d7abe:	6803      	ldr	r3, [r0, #0]
   d7ac0:	68db      	ldr	r3, [r3, #12]
   d7ac2:	4798      	blx	r3
   d7ac4:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d7ac6:	e7e7      	b.n	d7a98 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7ac8:	6925      	ldr	r5, [r4, #16]
   d7aca:	6963      	ldr	r3, [r4, #20]
   d7acc:	2618      	movs	r6, #24
   d7ace:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7ad2:	42b5      	cmp	r5, r6
   d7ad4:	d004      	beq.n	d7ae0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d7ad6:	4628      	mov	r0, r5
   d7ad8:	f000 fe95 	bl	d8806 <_ZN6StringD1Ev>
   d7adc:	3518      	adds	r5, #24
   d7ade:	e7f8      	b.n	d7ad2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7ae0:	2300      	movs	r3, #0
   d7ae2:	6163      	str	r3, [r4, #20]
   d7ae4:	bd70      	pop	{r4, r5, r6, pc}

000d7ae6 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d7ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7ae8:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7aea:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d7aec:	f7ff fdf0 	bl	d76d0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d7af0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7af4:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d7af8:	f7ff fcea 	bl	d74d0 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d7afc:	4620      	mov	r0, r4
   d7afe:	f7ff ffc4 	bl	d7a8a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d7b02:	4628      	mov	r0, r5
   d7b04:	f7ff fee4 	bl	d78d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7b08:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7b0a:	b108      	cbz	r0, d7b10 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d7b0c:	f7fd fb3e 	bl	d518c <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d7b10:	6925      	ldr	r5, [r4, #16]
   d7b12:	6963      	ldr	r3, [r4, #20]
   d7b14:	2618      	movs	r6, #24
   d7b16:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7b1a:	42b5      	cmp	r5, r6
   d7b1c:	d004      	beq.n	d7b28 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d7b1e:	4628      	mov	r0, r5
   d7b20:	f000 fe71 	bl	d8806 <_ZN6StringD1Ev>
   d7b24:	3518      	adds	r5, #24
   d7b26:	e7f8      	b.n	d7b1a <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7b28:	6920      	ldr	r0, [r4, #16]
   d7b2a:	f7fd fdb3 	bl	d5694 <free>
   d7b2e:	6820      	ldr	r0, [r4, #0]
   d7b30:	f7fd fdb0 	bl	d5694 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d7b34:	4620      	mov	r0, r4
   d7b36:	b002      	add	sp, #8
   d7b38:	bd70      	pop	{r4, r5, r6, pc}

000d7b3a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b3a:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7b3c:	680a      	ldr	r2, [r1, #0]
   d7b3e:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b40:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b42:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7b44:	684a      	ldr	r2, [r1, #4]
   d7b46:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b48:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b4a:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7b4c:	688a      	ldr	r2, [r1, #8]
   d7b4e:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b50:	608b      	str	r3, [r1, #8]
   d7b52:	4770      	bx	lr

000d7b54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7b54:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7b56:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7b58:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7b5a:	6003      	str	r3, [r0, #0]
   d7b5c:	6043      	str	r3, [r0, #4]
   d7b5e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7b60:	f7ff ffeb 	bl	d7b3a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d7b64:	4620      	mov	r0, r4
   d7b66:	bd10      	pop	{r4, pc}

000d7b68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7b68:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b6c:	4604      	mov	r4, r0
   d7b6e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7b70:	d925      	bls.n	d7bbe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d7b72:	4290      	cmp	r0, r2
   d7b74:	d224      	bcs.n	d7bc0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d7b76:	1a55      	subs	r5, r2, r1
   d7b78:	3d14      	subs	r5, #20
   d7b7a:	442c      	add	r4, r5
   d7b7c:	f1a1 0714 	sub.w	r7, r1, #20
   d7b80:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7b84:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7b86:	f1a5 0308 	sub.w	r3, r5, #8
   d7b8a:	429f      	cmp	r7, r3
   d7b8c:	d037      	beq.n	d7bfe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d7b8e:	b184      	cbz	r4, d7bb2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7b90:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7b94:	6023      	str	r3, [r4, #0]
   d7b96:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d7b9a:	80a3      	strh	r3, [r4, #4]
   d7b9c:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d7ba0:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7ba2:	60a6      	str	r6, [r4, #8]
   d7ba4:	60e6      	str	r6, [r4, #12]
   d7ba6:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7ba8:	4629      	mov	r1, r5
   d7baa:	f104 0008 	add.w	r0, r4, #8
   d7bae:	f7ff ffc4 	bl	d7b3a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d7bb2:	4628      	mov	r0, r5
   d7bb4:	f7ff fe32 	bl	d781c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7bb8:	3c14      	subs	r4, #20
   d7bba:	3d14      	subs	r5, #20
   d7bbc:	e7e3      	b.n	d7b86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7bbe:	d01e      	beq.n	d7bfe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d7bc0:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7bc4:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7bc6:	f1a5 0308 	sub.w	r3, r5, #8
   d7bca:	429e      	cmp	r6, r3
   d7bcc:	d017      	beq.n	d7bfe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d7bce:	b184      	cbz	r4, d7bf2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d7bd0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7bd4:	6023      	str	r3, [r4, #0]
   d7bd6:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d7bda:	80a3      	strh	r3, [r4, #4]
   d7bdc:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d7be0:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7be2:	60a7      	str	r7, [r4, #8]
   d7be4:	60e7      	str	r7, [r4, #12]
   d7be6:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7be8:	4629      	mov	r1, r5
   d7bea:	f104 0008 	add.w	r0, r4, #8
   d7bee:	f7ff ffa4 	bl	d7b3a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d7bf2:	4628      	mov	r0, r5
   d7bf4:	f7ff fe12 	bl	d781c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7bf8:	3414      	adds	r4, #20
   d7bfa:	3514      	adds	r5, #20
   d7bfc:	e7e3      	b.n	d7bc6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d7bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7c02:	6845      	ldr	r5, [r0, #4]
   d7c04:	6883      	ldr	r3, [r0, #8]
   d7c06:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7c08:	4604      	mov	r4, r0
   d7c0a:	460e      	mov	r6, r1
   d7c0c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7c0e:	db0e      	blt.n	d7c2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d7c10:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7c12:	2d00      	cmp	r5, #0
   d7c14:	dd05      	ble.n	d7c22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d7c16:	00a9      	lsls	r1, r5, #2
   d7c18:	6800      	ldr	r0, [r0, #0]
   d7c1a:	f7fd fd43 	bl	d56a4 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7c1e:	b920      	cbnz	r0, d7c2a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d7c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7c22:	6800      	ldr	r0, [r0, #0]
   d7c24:	f7fd fd36 	bl	d5694 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7c28:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d7c2a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7c2c:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7c2e:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7c30:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7c32:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7c36:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d7c3a:	1a52      	subs	r2, r2, r1
   d7c3c:	1d08      	adds	r0, r1, #4
   d7c3e:	f001 feff 	bl	d9a40 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d7c42:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d7c46:	6863      	ldr	r3, [r4, #4]
   d7c48:	3301      	adds	r3, #1
   d7c4a:	6063      	str	r3, [r4, #4]
   d7c4c:	2001      	movs	r0, #1
    return true;
}
   d7c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c50 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d7c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7c52:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d7c54:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d7c56:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7c58:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7c5a:	f7ff fc39 	bl	d74d0 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d7c5e:	6823      	ldr	r3, [r4, #0]
   d7c60:	6861      	ldr	r1, [r4, #4]
   d7c62:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7c66:	4283      	cmp	r3, r0
   d7c68:	461a      	mov	r2, r3
   d7c6a:	d009      	beq.n	d7c80 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d7c6c:	6812      	ldr	r2, [r2, #0]
   d7c6e:	42aa      	cmp	r2, r5
   d7c70:	f103 0304 	add.w	r3, r3, #4
   d7c74:	d1f7      	bne.n	d7c66 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d7c76:	a801      	add	r0, sp, #4
   d7c78:	f7ff fe2a 	bl	d78d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7c7c:	2500      	movs	r5, #0
   d7c7e:	e00e      	b.n	d7c9e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7c80:	462a      	mov	r2, r5
   d7c82:	4620      	mov	r0, r4
   d7c84:	f7ff ffbc 	bl	d7c00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7c88:	4605      	mov	r5, r0
   d7c8a:	2800      	cmp	r0, #0
   d7c8c:	d0f3      	beq.n	d7c76 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d7c8e:	6863      	ldr	r3, [r4, #4]
   d7c90:	2b01      	cmp	r3, #1
   d7c92:	d101      	bne.n	d7c98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d7c94:	f7ff fd10 	bl	d76b8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d7c98:	a801      	add	r0, sp, #4
   d7c9a:	f7ff fe19 	bl	d78d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d7c9e:	4628      	mov	r0, r5
   d7ca0:	b003      	add	sp, #12
   d7ca2:	bd30      	pop	{r4, r5, pc}

000d7ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7ca4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ca8:	4606      	mov	r6, r0
   d7caa:	460c      	mov	r4, r1
   d7cac:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7cae:	d914      	bls.n	d7cda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d7cb0:	4290      	cmp	r0, r2
   d7cb2:	d213      	bcs.n	d7cdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7cb4:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d7cb8:	1a6c      	subs	r4, r5, r1
   d7cba:	f1a1 0710 	sub.w	r7, r1, #16
   d7cbe:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7cc0:	42af      	cmp	r7, r5
   d7cc2:	d018      	beq.n	d7cf6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7cc4:	b11c      	cbz	r4, d7cce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7cc6:	4629      	mov	r1, r5
   d7cc8:	4620      	mov	r0, r4
   d7cca:	f000 fd8c 	bl	d87e6 <_ZN6StringC1EOS_>
                end->~T();
   d7cce:	4628      	mov	r0, r5
   d7cd0:	f000 fd99 	bl	d8806 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7cd4:	3d10      	subs	r5, #16
   d7cd6:	3c10      	subs	r4, #16
   d7cd8:	e7f2      	b.n	d7cc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7cda:	d00c      	beq.n	d7cf6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7cdc:	42ac      	cmp	r4, r5
   d7cde:	d00a      	beq.n	d7cf6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7ce0:	b11e      	cbz	r6, d7cea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7ce2:	4621      	mov	r1, r4
   d7ce4:	4630      	mov	r0, r6
   d7ce6:	f000 fd7e 	bl	d87e6 <_ZN6StringC1EOS_>
                p->~T();
   d7cea:	4620      	mov	r0, r4
   d7cec:	f000 fd8b 	bl	d8806 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7cf0:	3410      	adds	r4, #16
   d7cf2:	3610      	adds	r6, #16
   d7cf4:	e7f2      	b.n	d7cdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d7cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cf8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7cf8:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7cfa:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7cfc:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7cfe:	dd0b      	ble.n	d7d18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7d00:	0130      	lsls	r0, r6, #4
   d7d02:	f7fd fcbf 	bl	d5684 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7d06:	4604      	mov	r4, r0
   d7d08:	b170      	cbz	r0, d7d28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7d0a:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7d0e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7d12:	f7ff ffc7 	bl	d7ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d7d16:	e000      	b.n	d7d1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7d18:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7d1a:	6828      	ldr	r0, [r5, #0]
   d7d1c:	f7fd fcba 	bl	d5694 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7d20:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7d22:	60ae      	str	r6, [r5, #8]
        return true;
   d7d24:	2001      	movs	r0, #1
   d7d26:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7d28:	bd70      	pop	{r4, r5, r6, pc}

000d7d2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7d2e:	2300      	movs	r3, #0
   d7d30:	b095      	sub	sp, #84	; 0x54
   d7d32:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7d34:	2246      	movs	r2, #70	; 0x46
   d7d36:	6003      	str	r3, [r0, #0]
   d7d38:	6043      	str	r3, [r0, #4]
   d7d3a:	6083      	str	r3, [r0, #8]
   d7d3c:	60c3      	str	r3, [r0, #12]
   d7d3e:	6103      	str	r3, [r0, #16]
   d7d40:	6143      	str	r3, [r0, #20]
   d7d42:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7d44:	9102      	str	r1, [sp, #8]
   d7d46:	f8da 1004 	ldr.w	r1, [sl, #4]
   d7d4a:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7d4c:	4299      	cmp	r1, r3
   d7d4e:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7d50:	9309      	str	r3, [sp, #36]	; 0x24
   d7d52:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7d54:	f340 809d 	ble.w	d7e92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7d58:	a808      	add	r0, sp, #32
   d7d5a:	f7ff ffcd 	bl	d7cf8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7d5e:	2800      	cmp	r0, #0
   d7d60:	f040 8097 	bne.w	d7e92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7d64:	e08e      	b.n	d7e84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d7d66:	4621      	mov	r1, r4
   d7d68:	a80b      	add	r0, sp, #44	; 0x2c
   d7d6a:	f000 fd3c 	bl	d87e6 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7d6e:	a90b      	add	r1, sp, #44	; 0x2c
   d7d70:	a80f      	add	r0, sp, #60	; 0x3c
   d7d72:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7d74:	f000 fd37 	bl	d87e6 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7d78:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7d7c:	4299      	cmp	r1, r3
   d7d7e:	f2c0 80ce 	blt.w	d7f1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d7d82:	3101      	adds	r1, #1
   d7d84:	a808      	add	r0, sp, #32
   d7d86:	f7ff ffb7 	bl	d7cf8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7d8a:	2800      	cmp	r0, #0
   d7d8c:	f040 80c7 	bne.w	d7f1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7d90:	a80f      	add	r0, sp, #60	; 0x3c
   d7d92:	f000 fd38 	bl	d8806 <_ZN6StringD1Ev>
   d7d96:	a80b      	add	r0, sp, #44	; 0x2c
   d7d98:	f000 fd35 	bl	d8806 <_ZN6StringD1Ev>
   d7d9c:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d7d9e:	42a7      	cmp	r7, r4
   d7da0:	d1e1      	bne.n	d7d66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7da2:	2600      	movs	r6, #0
   d7da4:	960b      	str	r6, [sp, #44]	; 0x2c
   d7da6:	960c      	str	r6, [sp, #48]	; 0x30
   d7da8:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7daa:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7dae:	429e      	cmp	r6, r3
   d7db0:	f280 80a8 	bge.w	d7f04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d7db4:	0133      	lsls	r3, r6, #4
   d7db6:	9a08      	ldr	r2, [sp, #32]
   d7db8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d7dba:	9306      	str	r3, [sp, #24]
        if (!category) {
   d7dbc:	2b00      	cmp	r3, #0
   d7dbe:	f000 809f 	beq.w	d7f00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d7dc2:	2314      	movs	r3, #20
   d7dc4:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7dc6:	f8cd 901c 	str.w	r9, [sp, #28]
   d7dca:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7dcc:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7dce:	a907      	add	r1, sp, #28
   d7dd0:	a806      	add	r0, sp, #24
   d7dd2:	f7ff fb2c 	bl	d742e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7dd6:	4607      	mov	r7, r0
   d7dd8:	2800      	cmp	r0, #0
   d7dda:	f000 8091 	beq.w	d7f00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d7dde:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d7de0:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7de2:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d7de6:	9a07      	ldr	r2, [sp, #28]
   d7de8:	4620      	mov	r0, r4
   d7dea:	f7ff fb8d 	bl	d7508 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7dee:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d7df2:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7df4:	f1b8 0f00 	cmp.w	r8, #0
   d7df8:	d153      	bne.n	d7ea2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d7dfa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d7dfe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d7e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7e06:	970f      	str	r7, [sp, #60]	; 0x3c
   d7e08:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d7e0c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d7e10:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d7e14:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7e18:	6867      	ldr	r7, [r4, #4]
   d7e1a:	68a3      	ldr	r3, [r4, #8]
   d7e1c:	429f      	cmp	r7, r3
   d7e1e:	da4f      	bge.n	d7ec0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d7e20:	9b00      	ldr	r3, [sp, #0]
   d7e22:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d7e26:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7e28:	2214      	movs	r2, #20
   d7e2a:	4353      	muls	r3, r2
   d7e2c:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d7e30:	fb02 b201 	mla	r2, r2, r1, fp
   d7e34:	f107 0014 	add.w	r0, r7, #20
   d7e38:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7e3a:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d7e3c:	f7ff fe94 	bl	d7b68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7e40:	b1a7      	cbz	r7, d7e6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7e42:	9b03      	ldr	r3, [sp, #12]
   d7e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7e46:	f84b 2003 	str.w	r2, [fp, r3]
   d7e4a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d7e4e:	80bb      	strh	r3, [r7, #4]
   d7e50:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d7e54:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7e56:	f8c7 9008 	str.w	r9, [r7, #8]
   d7e5a:	f8c7 900c 	str.w	r9, [r7, #12]
   d7e5e:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7e62:	a911      	add	r1, sp, #68	; 0x44
   d7e64:	f107 0008 	add.w	r0, r7, #8
   d7e68:	f7ff fe67 	bl	d7b3a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d7e6c:	6863      	ldr	r3, [r4, #4]
   d7e6e:	3301      	adds	r3, #1
   d7e70:	6063      	str	r3, [r4, #4]
   d7e72:	a811      	add	r0, sp, #68	; 0x44
   d7e74:	f7ff fcd2 	bl	d781c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7e78:	f1b8 0f00 	cmp.w	r8, #0
   d7e7c:	d011      	beq.n	d7ea2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d7e7e:	a80b      	add	r0, sp, #44	; 0x2c
   d7e80:	f7ff fccc 	bl	d781c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7e84:	a808      	add	r0, sp, #32
   d7e86:	f7ff fcdd 	bl	d7844 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d7e8a:	4628      	mov	r0, r5
   d7e8c:	b015      	add	sp, #84	; 0x54
   d7e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e92:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7e96:	f8da 3004 	ldr.w	r3, [sl, #4]
   d7e9a:	2714      	movs	r7, #20
   d7e9c:	fb07 4703 	mla	r7, r7, r3, r4
   d7ea0:	e77d      	b.n	d7d9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d7ea2:	6823      	ldr	r3, [r4, #0]
   d7ea4:	9a00      	ldr	r2, [sp, #0]
   d7ea6:	2414      	movs	r4, #20
   d7ea8:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d7eac:	9b06      	ldr	r3, [sp, #24]
   d7eae:	781b      	ldrb	r3, [r3, #0]
   d7eb0:	bb23      	cbnz	r3, d7efc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d7eb2:	f8da 3000 	ldr.w	r3, [sl]
   d7eb6:	9a01      	ldr	r2, [sp, #4]
   d7eb8:	4413      	add	r3, r2
   d7eba:	7c1b      	ldrb	r3, [r3, #16]
   d7ebc:	80e3      	strh	r3, [r4, #6]
   d7ebe:	e01d      	b.n	d7efc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7ec0:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7ec2:	2f00      	cmp	r7, #0
   d7ec4:	dd0f      	ble.n	d7ee6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7ec6:	2314      	movs	r3, #20
   d7ec8:	fb03 f007 	mul.w	r0, r3, r7
   d7ecc:	9303      	str	r3, [sp, #12]
   d7ece:	f7fd fbd9 	bl	d5684 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7ed2:	4683      	mov	fp, r0
   d7ed4:	b178      	cbz	r0, d7ef6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d7ed6:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7eda:	9b03      	ldr	r3, [sp, #12]
   d7edc:	fb03 1202 	mla	r2, r3, r2, r1
   d7ee0:	f7ff fe42 	bl	d7b68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7ee4:	e000      	b.n	d7ee8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7ee6:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7ee8:	6820      	ldr	r0, [r4, #0]
   d7eea:	f7fd fbd3 	bl	d5694 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7eee:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d7ef2:	60a7      	str	r7, [r4, #8]
   d7ef4:	e794      	b.n	d7e20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7ef6:	f04f 0801 	mov.w	r8, #1
   d7efa:	e7ba      	b.n	d7e72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d7efc:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7efe:	e766      	b.n	d7dce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7f00:	3601      	adds	r6, #1
   d7f02:	e753      	b.n	d7dac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d7f04:	a908      	add	r1, sp, #32
   d7f06:	4628      	mov	r0, r5
   d7f08:	f7ff fe17 	bl	d7b3a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d7f0c:	a90b      	add	r1, sp, #44	; 0x2c
   d7f0e:	f105 000c 	add.w	r0, r5, #12
   d7f12:	f7ff fe12 	bl	d7b3a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d7f16:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7f1a:	762b      	strb	r3, [r5, #24]
   d7f1c:	e7af      	b.n	d7e7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7f1e:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7f22:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7f26:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7f2a:	4631      	mov	r1, r6
   d7f2c:	f106 0010 	add.w	r0, r6, #16
   d7f30:	f7ff feb8 	bl	d7ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7f34:	b11e      	cbz	r6, d7f3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d7f36:	a90f      	add	r1, sp, #60	; 0x3c
   d7f38:	4630      	mov	r0, r6
   d7f3a:	f000 fc54 	bl	d87e6 <_ZN6StringC1EOS_>
    ++size_;
   d7f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7f40:	3301      	adds	r3, #1
   d7f42:	9309      	str	r3, [sp, #36]	; 0x24
   d7f44:	e724      	b.n	d7d90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d7f48 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7f48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7f4a:	4604      	mov	r4, r0
   d7f4c:	4b09      	ldr	r3, [pc, #36]	; (d7f74 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7f4e:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7f52:	4605      	mov	r5, r0
   d7f54:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7f56:	a801      	add	r0, sp, #4
   d7f58:	4611      	mov	r1, r2
   d7f5a:	f7fc fe07 	bl	d4b6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7f5e:	aa01      	add	r2, sp, #4
   d7f60:	4631      	mov	r1, r6
   d7f62:	4620      	mov	r0, r4
   d7f64:	f7ff fee1 	bl	d7d2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7f68:	a801      	add	r0, sp, #4
   d7f6a:	f7fc fbfb 	bl	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d7f6e:	4628      	mov	r0, r5
   d7f70:	b004      	add	sp, #16
   d7f72:	bd70      	pop	{r4, r5, r6, pc}
   d7f74:	000d9d1c 	.word	0x000d9d1c

000d7f78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f7a:	460f      	mov	r7, r1
   d7f7c:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7f7e:	492b      	ldr	r1, [pc, #172]	; (d802c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7f80:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7f82:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7f84:	4616      	mov	r6, r2
   d7f86:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7f88:	f001 fdbe 	bl	d9b08 <strcmp>
   d7f8c:	bb28      	cbnz	r0, d7fda <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d7f8e:	2c00      	cmp	r4, #0
   d7f90:	d049      	beq.n	d8026 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7f92:	4629      	mov	r1, r5
   d7f94:	a801      	add	r0, sp, #4
   d7f96:	f7ff fddd 	bl	d7b54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7f9a:	4925      	ldr	r1, [pc, #148]	; (d8030 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7f9c:	2024      	movs	r0, #36	; 0x24
   d7f9e:	f000 ff89 	bl	d8eb4 <_ZnwjRKSt9nothrow_t>
   d7fa2:	4605      	mov	r5, r0
   d7fa4:	b1b8      	cbz	r0, d7fd6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7fa6:	a901      	add	r1, sp, #4
   d7fa8:	a804      	add	r0, sp, #16
   d7faa:	f7ff fdd3 	bl	d7b54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7fae:	a904      	add	r1, sp, #16
   d7fb0:	a807      	add	r0, sp, #28
   d7fb2:	f7fc fddb 	bl	d4b6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7fb6:	aa07      	add	r2, sp, #28
   d7fb8:	4631      	mov	r1, r6
   d7fba:	4628      	mov	r0, r5
   d7fbc:	f7ff ffc4 	bl	d7f48 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7fc0:	a807      	add	r0, sp, #28
   d7fc2:	f7fc fbcf 	bl	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7fc6:	4b1b      	ldr	r3, [pc, #108]	; (d8034 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7fc8:	602b      	str	r3, [r5, #0]
   d7fca:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7fcc:	a804      	add	r0, sp, #16
   d7fce:	f7fc fbc9 	bl	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7fd2:	4b19      	ldr	r3, [pc, #100]	; (d8038 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d7fd4:	602b      	str	r3, [r5, #0]
   d7fd6:	a801      	add	r0, sp, #4
   d7fd8:	e01f      	b.n	d801a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7fda:	4918      	ldr	r1, [pc, #96]	; (d803c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d7fdc:	4638      	mov	r0, r7
   d7fde:	f001 fd93 	bl	d9b08 <strcmp>
   d7fe2:	b9f0      	cbnz	r0, d8022 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d7fe4:	b1fc      	cbz	r4, d8026 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7fe6:	4629      	mov	r1, r5
   d7fe8:	a804      	add	r0, sp, #16
   d7fea:	f7ff fdb3 	bl	d7b54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7fee:	4910      	ldr	r1, [pc, #64]	; (d8030 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7ff0:	2024      	movs	r0, #36	; 0x24
   d7ff2:	f000 ff5f 	bl	d8eb4 <_ZnwjRKSt9nothrow_t>
   d7ff6:	4605      	mov	r5, r0
   d7ff8:	b170      	cbz	r0, d8018 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7ffa:	a904      	add	r1, sp, #16
   d7ffc:	a807      	add	r0, sp, #28
   d7ffe:	f7fc fdb5 	bl	d4b6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d8002:	aa07      	add	r2, sp, #28
   d8004:	4631      	mov	r1, r6
   d8006:	4628      	mov	r0, r5
   d8008:	f7ff ff9e 	bl	d7f48 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d800c:	a807      	add	r0, sp, #28
   d800e:	f7fc fba9 	bl	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d8012:	4b08      	ldr	r3, [pc, #32]	; (d8034 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d8014:	602b      	str	r3, [r5, #0]
   d8016:	622c      	str	r4, [r5, #32]
   d8018:	a804      	add	r0, sp, #16
   d801a:	f7fc fba3 	bl	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d801e:	4628      	mov	r0, r5
   d8020:	e002      	b.n	d8028 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d8022:	2000      	movs	r0, #0
   d8024:	e000      	b.n	d8028 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d8026:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d8028:	b00b      	add	sp, #44	; 0x2c
   d802a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d802c:	000da266 	.word	0x000da266
   d8030:	000da420 	.word	0x000da420
   d8034:	000da2ec 	.word	0x000da2ec
   d8038:	000da1fc 	.word	0x000da1fc
   d803c:	000da26a 	.word	0x000da26a

000d8040 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8040:	4b01      	ldr	r3, [pc, #4]	; (d8048 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8042:	4a02      	ldr	r2, [pc, #8]	; (d804c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8044:	601a      	str	r2, [r3, #0]
   d8046:	4770      	bx	lr
   d8048:	2003e3dc 	.word	0x2003e3dc
   d804c:	000da27b 	.word	0x000da27b

000d8050 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d8050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8054:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d8056:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d805a:	4604      	mov	r4, r0
   d805c:	460e      	mov	r6, r1
   d805e:	4617      	mov	r7, r2
   d8060:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d8062:	f000 fd95 	bl	d8b90 <_Z16_fetch_usbserialv>
   d8066:	4581      	cmp	r9, r0
   d8068:	d105      	bne.n	d8076 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d806a:	485a      	ldr	r0, [pc, #360]	; (d81d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d806c:	f000 fa73 	bl	d8556 <_ZN5spark12NetworkClass9listeningEv>
   d8070:	2800      	cmp	r0, #0
   d8072:	f040 80ac 	bne.w	d81ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d8076:	792b      	ldrb	r3, [r5, #4]
   d8078:	071b      	lsls	r3, r3, #28
   d807a:	d505      	bpl.n	d8088 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d807c:	696b      	ldr	r3, [r5, #20]
   d807e:	4a56      	ldr	r2, [pc, #344]	; (d81d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d8080:	6a20      	ldr	r0, [r4, #32]
   d8082:	2100      	movs	r1, #0
   d8084:	f000 fb31 	bl	d86ea <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d8088:	f1b8 0f00 	cmp.w	r8, #0
   d808c:	d00d      	beq.n	d80aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d808e:	215b      	movs	r1, #91	; 0x5b
   d8090:	4620      	mov	r0, r4
   d8092:	f7ff fa2e 	bl	d74f2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d8096:	4641      	mov	r1, r8
   d8098:	4620      	mov	r0, r4
   d809a:	f7ff fa1c 	bl	d74d6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d809e:	6823      	ldr	r3, [r4, #0]
   d80a0:	494e      	ldr	r1, [pc, #312]	; (d81dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d80a2:	68db      	ldr	r3, [r3, #12]
   d80a4:	2202      	movs	r2, #2
   d80a6:	4620      	mov	r0, r4
   d80a8:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d80aa:	792b      	ldrb	r3, [r5, #4]
   d80ac:	07d9      	lsls	r1, r3, #31
   d80ae:	d525      	bpl.n	d80fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d80b0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d80b4:	212f      	movs	r1, #47	; 0x2f
   d80b6:	4640      	mov	r0, r8
   d80b8:	f001 fd74 	bl	d9ba4 <strrchr>
    if (s1) {
   d80bc:	b108      	cbz	r0, d80c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d80be:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d80c2:	4641      	mov	r1, r8
   d80c4:	4620      	mov	r0, r4
   d80c6:	f7ff fa06 	bl	d74d6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d80ca:	792b      	ldrb	r3, [r5, #4]
   d80cc:	079a      	lsls	r2, r3, #30
   d80ce:	d509      	bpl.n	d80e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d80d0:	213a      	movs	r1, #58	; 0x3a
   d80d2:	4620      	mov	r0, r4
   d80d4:	f7ff fa0d 	bl	d74f2 <_ZN5spark16StreamLogHandler5writeEc>
   d80d8:	68eb      	ldr	r3, [r5, #12]
   d80da:	4a41      	ldr	r2, [pc, #260]	; (d81e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d80dc:	6a20      	ldr	r0, [r4, #32]
   d80de:	2100      	movs	r1, #0
   d80e0:	f000 fb03 	bl	d86ea <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d80e4:	792b      	ldrb	r3, [r5, #4]
   d80e6:	f013 0f04 	tst.w	r3, #4
   d80ea:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d80ec:	bf18      	it	ne
   d80ee:	493d      	ldrne	r1, [pc, #244]	; (d81e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d80f0:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d80f2:	bf08      	it	eq
   d80f4:	493c      	ldreq	r1, [pc, #240]	; (d81e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d80f6:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d80f8:	4620      	mov	r0, r4
   d80fa:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d80fc:	792b      	ldrb	r3, [r5, #4]
   d80fe:	075b      	lsls	r3, r3, #29
   d8100:	d518      	bpl.n	d8134 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d8102:	6929      	ldr	r1, [r5, #16]
   d8104:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d8106:	4613      	mov	r3, r2
   d8108:	f813 0b01 	ldrb.w	r0, [r3], #1
   d810c:	b138      	cbz	r0, d811e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d810e:	2820      	cmp	r0, #32
   d8110:	d101      	bne.n	d8116 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d8112:	4619      	mov	r1, r3
   d8114:	e001      	b.n	d811a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d8116:	2828      	cmp	r0, #40	; 0x28
   d8118:	d001      	beq.n	d811e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d811a:	461a      	mov	r2, r3
   d811c:	e7f3      	b.n	d8106 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d811e:	6823      	ldr	r3, [r4, #0]
   d8120:	1a52      	subs	r2, r2, r1
   d8122:	68db      	ldr	r3, [r3, #12]
   d8124:	4620      	mov	r0, r4
   d8126:	4798      	blx	r3
        write("(): ", 4);
   d8128:	6823      	ldr	r3, [r4, #0]
   d812a:	4930      	ldr	r1, [pc, #192]	; (d81ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d812c:	68db      	ldr	r3, [r3, #12]
   d812e:	2204      	movs	r2, #4
   d8130:	4620      	mov	r0, r4
   d8132:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d8134:	2100      	movs	r1, #0
   d8136:	4638      	mov	r0, r7
   d8138:	f7fd f9f0 	bl	d551c <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d813c:	4601      	mov	r1, r0
   d813e:	4620      	mov	r0, r4
   d8140:	f7ff f9c9 	bl	d74d6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d8144:	6823      	ldr	r3, [r4, #0]
   d8146:	4928      	ldr	r1, [pc, #160]	; (d81e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d8148:	68db      	ldr	r3, [r3, #12]
   d814a:	2202      	movs	r2, #2
   d814c:	4620      	mov	r0, r4
   d814e:	4798      	blx	r3
    // Message
    if (msg) {
   d8150:	b11e      	cbz	r6, d815a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d8152:	4631      	mov	r1, r6
   d8154:	4620      	mov	r0, r4
   d8156:	f7ff f9be 	bl	d74d6 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d815a:	792b      	ldrb	r3, [r5, #4]
   d815c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d8160:	d02d      	beq.n	d81be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d8162:	6823      	ldr	r3, [r4, #0]
   d8164:	4922      	ldr	r1, [pc, #136]	; (d81f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d8166:	68db      	ldr	r3, [r3, #12]
   d8168:	4620      	mov	r0, r4
   d816a:	2202      	movs	r2, #2
   d816c:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d816e:	792b      	ldrb	r3, [r5, #4]
   d8170:	06d8      	lsls	r0, r3, #27
   d8172:	d50b      	bpl.n	d818c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d8174:	6823      	ldr	r3, [r4, #0]
   d8176:	491f      	ldr	r1, [pc, #124]	; (d81f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d8178:	68db      	ldr	r3, [r3, #12]
   d817a:	2207      	movs	r2, #7
   d817c:	4620      	mov	r0, r4
   d817e:	4798      	blx	r3
   d8180:	69ab      	ldr	r3, [r5, #24]
   d8182:	4a1d      	ldr	r2, [pc, #116]	; (d81f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d8184:	6a20      	ldr	r0, [r4, #32]
   d8186:	2100      	movs	r1, #0
   d8188:	f000 faaf 	bl	d86ea <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d818c:	792b      	ldrb	r3, [r5, #4]
   d818e:	0699      	lsls	r1, r3, #26
   d8190:	d511      	bpl.n	d81b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d8192:	06da      	lsls	r2, r3, #27
   d8194:	d505      	bpl.n	d81a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d8196:	6823      	ldr	r3, [r4, #0]
   d8198:	4912      	ldr	r1, [pc, #72]	; (d81e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d819a:	68db      	ldr	r3, [r3, #12]
   d819c:	2202      	movs	r2, #2
   d819e:	4620      	mov	r0, r4
   d81a0:	4798      	blx	r3
            }
            write("details = ", 10);
   d81a2:	6823      	ldr	r3, [r4, #0]
   d81a4:	4915      	ldr	r1, [pc, #84]	; (d81fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d81a6:	68db      	ldr	r3, [r3, #12]
   d81a8:	4620      	mov	r0, r4
   d81aa:	220a      	movs	r2, #10
   d81ac:	4798      	blx	r3
            write(attr.details);
   d81ae:	69e9      	ldr	r1, [r5, #28]
   d81b0:	4620      	mov	r0, r4
   d81b2:	f7ff f990 	bl	d74d6 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d81b6:	215d      	movs	r1, #93	; 0x5d
   d81b8:	4620      	mov	r0, r4
   d81ba:	f7ff f99a 	bl	d74f2 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d81be:	6823      	ldr	r3, [r4, #0]
   d81c0:	490f      	ldr	r1, [pc, #60]	; (d8200 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d81c2:	68db      	ldr	r3, [r3, #12]
   d81c4:	4620      	mov	r0, r4
   d81c6:	2202      	movs	r2, #2
}
   d81c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d81cc:	4718      	bx	r3
   d81ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d81d2:	bf00      	nop
   d81d4:	2003e5b4 	.word	0x2003e5b4
   d81d8:	000da27f 	.word	0x000da27f
   d81dc:	000da286 	.word	0x000da286
   d81e0:	000d9d49 	.word	0x000d9d49
   d81e4:	000da289 	.word	0x000da289
   d81e8:	000da28e 	.word	0x000da28e
   d81ec:	000da28c 	.word	0x000da28c
   d81f0:	000da291 	.word	0x000da291
   d81f4:	000da294 	.word	0x000da294
   d81f8:	000da29c 	.word	0x000da29c
   d81fc:	000da29f 	.word	0x000da29f
   d8200:	000da2aa 	.word	0x000da2aa

000d8204 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d8204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8208:	b085      	sub	sp, #20
   d820a:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d820e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d8210:	4606      	mov	r6, r0
   d8212:	460f      	mov	r7, r1
   d8214:	4691      	mov	r9, r2
   d8216:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d8218:	f000 fcba 	bl	d8b90 <_Z16_fetch_usbserialv>
   d821c:	4580      	cmp	r8, r0
   d821e:	d105      	bne.n	d822c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d8220:	484a      	ldr	r0, [pc, #296]	; (d834c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d8222:	f000 f998 	bl	d8556 <_ZN5spark12NetworkClass9listeningEv>
   d8226:	2800      	cmp	r0, #0
   d8228:	f040 808c 	bne.w	d8344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d822c:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d822e:	4a48      	ldr	r2, [pc, #288]	; (d8350 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d8230:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d8232:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d8236:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d8238:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d823a:	f88d 8008 	strb.w	r8, [sp, #8]
   d823e:	f7fe ffec 	bl	d721a <_ZN5spark10JSONWriter11beginObjectEv>
   d8242:	4641      	mov	r1, r8
   d8244:	4648      	mov	r0, r9
   d8246:	f7fd f969 	bl	d551c <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d824a:	4942      	ldr	r1, [pc, #264]	; (d8354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d824c:	4680      	mov	r8, r0
   d824e:	2201      	movs	r2, #1
   d8250:	a801      	add	r0, sp, #4
   d8252:	f7ff f867 	bl	d7324 <_ZN5spark10JSONWriter4nameEPKcj>
   d8256:	4641      	mov	r1, r8
   d8258:	f7ff f92d 	bl	d74b6 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d825c:	b13f      	cbz	r7, d826e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d825e:	493e      	ldr	r1, [pc, #248]	; (d8358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d8260:	2201      	movs	r2, #1
   d8262:	a801      	add	r0, sp, #4
   d8264:	f7ff f85e 	bl	d7324 <_ZN5spark10JSONWriter4nameEPKcj>
   d8268:	4639      	mov	r1, r7
   d826a:	f7ff f924 	bl	d74b6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d826e:	b13d      	cbz	r5, d8280 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d8270:	493a      	ldr	r1, [pc, #232]	; (d835c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d8272:	2201      	movs	r2, #1
   d8274:	a801      	add	r0, sp, #4
   d8276:	f7ff f855 	bl	d7324 <_ZN5spark10JSONWriter4nameEPKcj>
   d827a:	4629      	mov	r1, r5
   d827c:	f7ff f91b 	bl	d74b6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d8280:	7923      	ldrb	r3, [r4, #4]
   d8282:	07df      	lsls	r7, r3, #31
   d8284:	d50e      	bpl.n	d82a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d8286:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d8288:	212f      	movs	r1, #47	; 0x2f
   d828a:	4628      	mov	r0, r5
   d828c:	f001 fc8a 	bl	d9ba4 <strrchr>
    if (s1) {
   d8290:	b100      	cbz	r0, d8294 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d8292:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d8294:	4932      	ldr	r1, [pc, #200]	; (d8360 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d8296:	2201      	movs	r2, #1
   d8298:	a801      	add	r0, sp, #4
   d829a:	f7ff f843 	bl	d7324 <_ZN5spark10JSONWriter4nameEPKcj>
   d829e:	4629      	mov	r1, r5
   d82a0:	f7ff f909 	bl	d74b6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d82a4:	7923      	ldrb	r3, [r4, #4]
   d82a6:	079d      	lsls	r5, r3, #30
   d82a8:	d507      	bpl.n	d82ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d82aa:	492e      	ldr	r1, [pc, #184]	; (d8364 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d82ac:	2202      	movs	r2, #2
   d82ae:	a801      	add	r0, sp, #4
   d82b0:	f7ff f838 	bl	d7324 <_ZN5spark10JSONWriter4nameEPKcj>
   d82b4:	68e1      	ldr	r1, [r4, #12]
   d82b6:	f7fe ffbd 	bl	d7234 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d82ba:	7923      	ldrb	r3, [r4, #4]
   d82bc:	0758      	lsls	r0, r3, #29
   d82be:	d516      	bpl.n	d82ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d82c0:	6925      	ldr	r5, [r4, #16]
   d82c2:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d82c4:	463b      	mov	r3, r7
   d82c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d82ca:	b13a      	cbz	r2, d82dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d82cc:	2a20      	cmp	r2, #32
   d82ce:	d101      	bne.n	d82d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d82d0:	461d      	mov	r5, r3
   d82d2:	e001      	b.n	d82d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d82d4:	2a28      	cmp	r2, #40	; 0x28
   d82d6:	d001      	beq.n	d82dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d82d8:	461f      	mov	r7, r3
   d82da:	e7f3      	b.n	d82c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d82dc:	2202      	movs	r2, #2
   d82de:	4922      	ldr	r1, [pc, #136]	; (d8368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d82e0:	a801      	add	r0, sp, #4
   d82e2:	f7ff f81f 	bl	d7324 <_ZN5spark10JSONWriter4nameEPKcj>
   d82e6:	1b7a      	subs	r2, r7, r5
   d82e8:	4629      	mov	r1, r5
   d82ea:	f7ff f82a 	bl	d7342 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d82ee:	7923      	ldrb	r3, [r4, #4]
   d82f0:	0719      	lsls	r1, r3, #28
   d82f2:	d507      	bpl.n	d8304 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d82f4:	491d      	ldr	r1, [pc, #116]	; (d836c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d82f6:	2201      	movs	r2, #1
   d82f8:	a801      	add	r0, sp, #4
   d82fa:	f7ff f813 	bl	d7324 <_ZN5spark10JSONWriter4nameEPKcj>
   d82fe:	6961      	ldr	r1, [r4, #20]
   d8300:	f7fe ffaa 	bl	d7258 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d8304:	7923      	ldrb	r3, [r4, #4]
   d8306:	06da      	lsls	r2, r3, #27
   d8308:	d508      	bpl.n	d831c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d830a:	2204      	movs	r2, #4
   d830c:	4918      	ldr	r1, [pc, #96]	; (d8370 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d830e:	eb0d 0002 	add.w	r0, sp, r2
   d8312:	f7ff f807 	bl	d7324 <_ZN5spark10JSONWriter4nameEPKcj>
   d8316:	69a1      	ldr	r1, [r4, #24]
   d8318:	f7fe ff8c 	bl	d7234 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d831c:	7923      	ldrb	r3, [r4, #4]
   d831e:	069b      	lsls	r3, r3, #26
   d8320:	d507      	bpl.n	d8332 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d8322:	4914      	ldr	r1, [pc, #80]	; (d8374 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d8324:	2206      	movs	r2, #6
   d8326:	a801      	add	r0, sp, #4
   d8328:	f7fe fffc 	bl	d7324 <_ZN5spark10JSONWriter4nameEPKcj>
   d832c:	69e1      	ldr	r1, [r4, #28]
   d832e:	f7ff f8c2 	bl	d74b6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d8332:	a801      	add	r0, sp, #4
   d8334:	f7fe ff5b 	bl	d71ee <_ZN5spark10JSONWriter9endObjectEv>
   d8338:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d833a:	490f      	ldr	r1, [pc, #60]	; (d8378 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d833c:	6803      	ldr	r3, [r0, #0]
   d833e:	2202      	movs	r2, #2
   d8340:	68db      	ldr	r3, [r3, #12]
   d8342:	4798      	blx	r3
}
   d8344:	b005      	add	sp, #20
   d8346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d834a:	bf00      	nop
   d834c:	2003e5b4 	.word	0x2003e5b4
   d8350:	000da1e4 	.word	0x000da1e4
   d8354:	000da216 	.word	0x000da216
   d8358:	000da229 	.word	0x000da229
   d835c:	000da2de 	.word	0x000da2de
   d8360:	000da1ca 	.word	0x000da1ca
   d8364:	000da2ad 	.word	0x000da2ad
   d8368:	000da2b0 	.word	0x000da2b0
   d836c:	000da23e 	.word	0x000da23e
   d8370:	000da2b3 	.word	0x000da2b3
   d8374:	000da2b8 	.word	0x000da2b8
   d8378:	000da2aa 	.word	0x000da2aa

000d837c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d837c:	2200      	movs	r2, #0
   d837e:	4611      	mov	r1, r2
   d8380:	6840      	ldr	r0, [r0, #4]
   d8382:	f7fd b967 	b.w	d5654 <network_listening>

000d8386 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8386:	2200      	movs	r2, #0
   d8388:	4611      	mov	r1, r2
   d838a:	6840      	ldr	r0, [r0, #4]
   d838c:	f7fd b972 	b.w	d5674 <network_get_listen_timeout>

000d8390 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8390:	2200      	movs	r2, #0
   d8392:	6840      	ldr	r0, [r0, #4]
   d8394:	f7fd b966 	b.w	d5664 <network_set_listen_timeout>

000d8398 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8398:	2200      	movs	r2, #0
   d839a:	f081 0101 	eor.w	r1, r1, #1
   d839e:	6840      	ldr	r0, [r0, #4]
   d83a0:	f7fd b950 	b.w	d5644 <network_listen>

000d83a4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d83a4:	2300      	movs	r3, #0
   d83a6:	461a      	mov	r2, r3
   d83a8:	2101      	movs	r1, #1
   d83aa:	6840      	ldr	r0, [r0, #4]
   d83ac:	f7fd b942 	b.w	d5634 <network_off>

000d83b0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d83b0:	2300      	movs	r3, #0
   d83b2:	461a      	mov	r2, r3
   d83b4:	4619      	mov	r1, r3
   d83b6:	6840      	ldr	r0, [r0, #4]
   d83b8:	f7fd b934 	b.w	d5624 <network_on>

000d83bc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d83bc:	2200      	movs	r2, #0
   d83be:	4611      	mov	r1, r2
   d83c0:	6840      	ldr	r0, [r0, #4]
   d83c2:	f7fd b927 	b.w	d5614 <network_ready>

000d83c6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d83c6:	2200      	movs	r2, #0
   d83c8:	4611      	mov	r1, r2
   d83ca:	6840      	ldr	r0, [r0, #4]
   d83cc:	f7fd b912 	b.w	d55f4 <network_connecting>

000d83d0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d83d0:	2200      	movs	r2, #0
   d83d2:	2102      	movs	r1, #2
   d83d4:	6840      	ldr	r0, [r0, #4]
   d83d6:	f7fd b915 	b.w	d5604 <network_disconnect>

000d83da <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d83da:	2300      	movs	r3, #0
   d83dc:	461a      	mov	r2, r3
   d83de:	6840      	ldr	r0, [r0, #4]
   d83e0:	f7fd b900 	b.w	d55e4 <network_connect>

000d83e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d83e4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d83e6:	4605      	mov	r5, r0
   d83e8:	b188      	cbz	r0, d840e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d83ea:	6804      	ldr	r4, [r0, #0]
   d83ec:	b14c      	cbz	r4, d8402 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d83ee:	68a3      	ldr	r3, [r4, #8]
   d83f0:	b11b      	cbz	r3, d83fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d83f2:	2203      	movs	r2, #3
   d83f4:	4621      	mov	r1, r4
   d83f6:	4620      	mov	r0, r4
   d83f8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d83fa:	2110      	movs	r1, #16
   d83fc:	4620      	mov	r0, r4
   d83fe:	f000 fd4e 	bl	d8e9e <_ZdlPvj>
   d8402:	4628      	mov	r0, r5
   d8404:	2114      	movs	r1, #20
      }
   d8406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d840a:	f000 bd48 	b.w	d8e9e <_ZdlPvj>
   d840e:	bd38      	pop	{r3, r4, r5, pc}

000d8410 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8410:	b110      	cbz	r0, d8418 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8412:	6803      	ldr	r3, [r0, #0]
   d8414:	685b      	ldr	r3, [r3, #4]
   d8416:	4718      	bx	r3
   d8418:	4770      	bx	lr

000d841a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d841a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d841c:	6803      	ldr	r3, [r0, #0]
   d841e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8420:	b1bb      	cbz	r3, d8452 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8422:	6858      	ldr	r0, [r3, #4]
   d8424:	f7fc fe62 	bl	d50ec <os_thread_is_current>
   d8428:	b978      	cbnz	r0, d844a <_ZN6ThreadD1Ev+0x30>
   d842a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d842c:	7c5a      	ldrb	r2, [r3, #17]
   d842e:	b912      	cbnz	r2, d8436 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8430:	6858      	ldr	r0, [r3, #4]
   d8432:	f7fc fe6b 	bl	d510c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8436:	6823      	ldr	r3, [r4, #0]
   d8438:	6858      	ldr	r0, [r3, #4]
   d843a:	f7fc fe6f 	bl	d511c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d843e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8440:	2300      	movs	r3, #0
   d8442:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8444:	b128      	cbz	r0, d8452 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8446:	f7ff ffcd 	bl	d83e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d844a:	6820      	ldr	r0, [r4, #0]
   d844c:	b108      	cbz	r0, d8452 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d844e:	f7ff ffc9 	bl	d83e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8452:	4620      	mov	r0, r4
   d8454:	bd10      	pop	{r4, pc}

000d8456 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8456:	b538      	push	{r3, r4, r5, lr}
   d8458:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d845a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d845e:	b108      	cbz	r0, d8464 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8460:	f7fb fe1f 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8464:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8468:	b108      	cbz	r0, d846e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d846a:	f7fc fe8f 	bl	d518c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d846e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8472:	b135      	cbz	r5, d8482 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8474:	4628      	mov	r0, r5
   d8476:	f7ff ffd0 	bl	d841a <_ZN6ThreadD1Ev>
   d847a:	2104      	movs	r1, #4
   d847c:	4628      	mov	r0, r5
   d847e:	f000 fd0e 	bl	d8e9e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8482:	6820      	ldr	r0, [r4, #0]
   d8484:	b108      	cbz	r0, d848a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8486:	f7ff ffc3 	bl	d8410 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d848a:	4620      	mov	r0, r4
   d848c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8490 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8490:	b510      	push	{r4, lr}
   d8492:	4b04      	ldr	r3, [pc, #16]	; (d84a4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d8494:	4604      	mov	r4, r0
   d8496:	f840 3b08 	str.w	r3, [r0], #8
   d849a:	f7ff ffdc 	bl	d8456 <_ZN5spark11MeshPublishD1Ev>
   d849e:	4620      	mov	r0, r4
   d84a0:	bd10      	pop	{r4, pc}
   d84a2:	bf00      	nop
   d84a4:	000da334 	.word	0x000da334

000d84a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d84a8:	b538      	push	{r3, r4, r5, lr}
   d84aa:	4c0e      	ldr	r4, [pc, #56]	; (d84e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d84ac:	4b0e      	ldr	r3, [pc, #56]	; (d84e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d84ae:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d84b0:	2500      	movs	r5, #0
   d84b2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d84b4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d84b8:	6063      	str	r3, [r4, #4]
   d84ba:	60a5      	str	r5, [r4, #8]
   d84bc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d84c0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d84c4:	f7fc fe5a 	bl	d517c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d84c8:	4b08      	ldr	r3, [pc, #32]	; (d84ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d84ca:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d84ce:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d84d2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d84d4:	4620      	mov	r0, r4
   d84d6:	4a06      	ldr	r2, [pc, #24]	; (d84f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d84d8:	4906      	ldr	r1, [pc, #24]	; (d84f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d84da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d84de:	f000 bcd9 	b.w	d8e94 <__aeabi_atexit>
   d84e2:	bf00      	nop
   d84e4:	2003e3e0 	.word	0x2003e3e0
   d84e8:	000da368 	.word	0x000da368
   d84ec:	000da334 	.word	0x000da334
   d84f0:	2003e284 	.word	0x2003e284
   d84f4:	000d8491 	.word	0x000d8491

000d84f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d84f8:	2300      	movs	r3, #0
   d84fa:	461a      	mov	r2, r3
   d84fc:	6840      	ldr	r0, [r0, #4]
   d84fe:	f7fd b871 	b.w	d55e4 <network_connect>

000d8502 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8502:	2200      	movs	r2, #0
   d8504:	2102      	movs	r1, #2
   d8506:	6840      	ldr	r0, [r0, #4]
   d8508:	f7fd b87c 	b.w	d5604 <network_disconnect>

000d850c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d850c:	2200      	movs	r2, #0
   d850e:	4611      	mov	r1, r2
   d8510:	6840      	ldr	r0, [r0, #4]
   d8512:	f7fd b86f 	b.w	d55f4 <network_connecting>

000d8516 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8516:	2200      	movs	r2, #0
   d8518:	4611      	mov	r1, r2
   d851a:	6840      	ldr	r0, [r0, #4]
   d851c:	f7fd b87a 	b.w	d5614 <network_ready>

000d8520 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8520:	2300      	movs	r3, #0
   d8522:	461a      	mov	r2, r3
   d8524:	4619      	mov	r1, r3
   d8526:	6840      	ldr	r0, [r0, #4]
   d8528:	f7fd b87c 	b.w	d5624 <network_on>

000d852c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d852c:	2300      	movs	r3, #0
   d852e:	461a      	mov	r2, r3
   d8530:	4619      	mov	r1, r3
   d8532:	6840      	ldr	r0, [r0, #4]
   d8534:	f7fd b87e 	b.w	d5634 <network_off>

000d8538 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8538:	2200      	movs	r2, #0
   d853a:	f081 0101 	eor.w	r1, r1, #1
   d853e:	6840      	ldr	r0, [r0, #4]
   d8540:	f7fd b880 	b.w	d5644 <network_listen>

000d8544 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8544:	2200      	movs	r2, #0
   d8546:	6840      	ldr	r0, [r0, #4]
   d8548:	f7fd b88c 	b.w	d5664 <network_set_listen_timeout>

000d854c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d854c:	2200      	movs	r2, #0
   d854e:	4611      	mov	r1, r2
   d8550:	6840      	ldr	r0, [r0, #4]
   d8552:	f7fd b88f 	b.w	d5674 <network_get_listen_timeout>

000d8556 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8556:	2200      	movs	r2, #0
   d8558:	4611      	mov	r1, r2
   d855a:	6840      	ldr	r0, [r0, #4]
   d855c:	f7fd b87a 	b.w	d5654 <network_listening>

000d8560 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8564:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8566:	b095      	sub	sp, #84	; 0x54
   d8568:	4616      	mov	r6, r2
   d856a:	460d      	mov	r5, r1
   d856c:	4607      	mov	r7, r0
    IPAddress addr;
   d856e:	f7fe fd4d 	bl	d700c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8572:	4621      	mov	r1, r4
   d8574:	2220      	movs	r2, #32
   d8576:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8578:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d857a:	f001 fa7c 	bl	d9a76 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d857e:	2340      	movs	r3, #64	; 0x40
   d8580:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8582:	4621      	mov	r1, r4
   d8584:	466b      	mov	r3, sp
   d8586:	aa0c      	add	r2, sp, #48	; 0x30
   d8588:	4630      	mov	r0, r6
   d858a:	f7fc fee7 	bl	d535c <netdb_getaddrinfo>
    if (!r) {
   d858e:	4604      	mov	r4, r0
   d8590:	2800      	cmp	r0, #0
   d8592:	d144      	bne.n	d861e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8594:	4602      	mov	r2, r0
   d8596:	2101      	movs	r1, #1
   d8598:	6868      	ldr	r0, [r5, #4]
   d859a:	f7fd f83b 	bl	d5614 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d859e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d85a0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d85a2:	4622      	mov	r2, r4
   d85a4:	6868      	ldr	r0, [r5, #4]
   d85a6:	f7fd f835 	bl	d5614 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d85aa:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d85ac:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d85ae:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d85b0:	2e00      	cmp	r6, #0
   d85b2:	d034      	beq.n	d861e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d85b4:	2900      	cmp	r1, #0
   d85b6:	d132      	bne.n	d861e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d85b8:	6873      	ldr	r3, [r6, #4]
   d85ba:	2b02      	cmp	r3, #2
   d85bc:	d002      	beq.n	d85c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d85be:	2b0a      	cmp	r3, #10
   d85c0:	d009      	beq.n	d85d6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d85c2:	e02a      	b.n	d861a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d85c4:	f1b8 0f00 	cmp.w	r8, #0
   d85c8:	d027      	beq.n	d861a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d85ca:	6971      	ldr	r1, [r6, #20]
   d85cc:	4638      	mov	r0, r7
   d85ce:	3104      	adds	r1, #4
   d85d0:	f7fe fd49 	bl	d7066 <_ZN9IPAddressaSEPKh>
   d85d4:	e020      	b.n	d8618 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d85d6:	f1b9 0f00 	cmp.w	r9, #0
   d85da:	d01e      	beq.n	d861a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d85dc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d85de:	2211      	movs	r2, #17
   d85e0:	a801      	add	r0, sp, #4
   d85e2:	f001 fa48 	bl	d9a76 <memset>
                    a.v = 6;
   d85e6:	2306      	movs	r3, #6
   d85e8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d85ec:	ad01      	add	r5, sp, #4
   d85ee:	f104 0308 	add.w	r3, r4, #8
   d85f2:	3418      	adds	r4, #24
   d85f4:	6818      	ldr	r0, [r3, #0]
   d85f6:	6859      	ldr	r1, [r3, #4]
   d85f8:	462a      	mov	r2, r5
   d85fa:	c203      	stmia	r2!, {r0, r1}
   d85fc:	3308      	adds	r3, #8
   d85fe:	42a3      	cmp	r3, r4
   d8600:	4615      	mov	r5, r2
   d8602:	d1f7      	bne.n	d85f4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8604:	a901      	add	r1, sp, #4
   d8606:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8608:	ad07      	add	r5, sp, #28
   d860a:	f7fe fd0d 	bl	d7028 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d860e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8610:	1d3c      	adds	r4, r7, #4
   d8612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8614:	682b      	ldr	r3, [r5, #0]
   d8616:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8618:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d861a:	69f6      	ldr	r6, [r6, #28]
   d861c:	e7c8      	b.n	d85b0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d861e:	9800      	ldr	r0, [sp, #0]
   d8620:	f7fc fe94 	bl	d534c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8624:	4638      	mov	r0, r7
   d8626:	b015      	add	sp, #84	; 0x54
   d8628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d862c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d862c:	4b02      	ldr	r3, [pc, #8]	; (d8638 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d862e:	4a03      	ldr	r2, [pc, #12]	; (d863c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8630:	601a      	str	r2, [r3, #0]
   d8632:	2200      	movs	r2, #0
   d8634:	605a      	str	r2, [r3, #4]
   d8636:	4770      	bx	lr
   d8638:	2003e5b4 	.word	0x2003e5b4
   d863c:	000da368 	.word	0x000da368

000d8640 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8642:	4606      	mov	r6, r0
   d8644:	460d      	mov	r5, r1
   d8646:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d8648:	2400      	movs	r4, #0
  while (size--) {
   d864a:	42bd      	cmp	r5, r7
   d864c:	d00c      	beq.n	d8668 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d864e:	6833      	ldr	r3, [r6, #0]
   d8650:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8654:	689b      	ldr	r3, [r3, #8]
   d8656:	4630      	mov	r0, r6
   d8658:	4798      	blx	r3
     if (chunk>=0)
   d865a:	2800      	cmp	r0, #0
   d865c:	db01      	blt.n	d8662 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d865e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d8660:	e7f3      	b.n	d864a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8662:	2c00      	cmp	r4, #0
   d8664:	bf08      	it	eq
   d8666:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d8668:	4620      	mov	r0, r4
   d866a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d866c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d866c:	b570      	push	{r4, r5, r6, lr}
   d866e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d8670:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d8672:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d8674:	b149      	cbz	r1, d868a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d8676:	f001 fa6c 	bl	d9b52 <strlen>
   d867a:	682b      	ldr	r3, [r5, #0]
   d867c:	4602      	mov	r2, r0
   d867e:	4621      	mov	r1, r4
   d8680:	4628      	mov	r0, r5
   d8682:	68db      	ldr	r3, [r3, #12]
    }
   d8684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8688:	4718      	bx	r3
    }
   d868a:	bd70      	pop	{r4, r5, r6, pc}

000d868c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d868c:	6803      	ldr	r3, [r0, #0]
   d868e:	689b      	ldr	r3, [r3, #8]
   d8690:	4718      	bx	r3

000d8692 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8692:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8694:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8696:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8698:	f7ff fff8 	bl	d868c <_ZN5Print5printEc>
  n += print('\n');
   d869c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d869e:	4604      	mov	r4, r0
  n += print('\n');
   d86a0:	4628      	mov	r0, r5
   d86a2:	f7ff fff3 	bl	d868c <_ZN5Print5printEc>
  return n;
}
   d86a6:	4420      	add	r0, r4
   d86a8:	bd38      	pop	{r3, r4, r5, pc}

000d86aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d86aa:	b530      	push	{r4, r5, lr}
   d86ac:	b08b      	sub	sp, #44	; 0x2c
   d86ae:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d86b0:	2100      	movs	r1, #0
   d86b2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d86b6:	2a01      	cmp	r2, #1
   d86b8:	bf98      	it	ls
   d86ba:	220a      	movls	r2, #10
   d86bc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d86c0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d86c4:	fb05 3312 	mls	r3, r5, r2, r3
   d86c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d86cc:	2b09      	cmp	r3, #9
   d86ce:	bf94      	ite	ls
   d86d0:	3330      	addls	r3, #48	; 0x30
   d86d2:	3337      	addhi	r3, #55	; 0x37
   d86d4:	b2db      	uxtb	r3, r3
   d86d6:	4621      	mov	r1, r4
   d86d8:	f804 3901 	strb.w	r3, [r4], #-1
   d86dc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d86de:	2d00      	cmp	r5, #0
   d86e0:	d1ee      	bne.n	d86c0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d86e2:	f7ff ffc3 	bl	d866c <_ZN5Print5writeEPKc>
}
   d86e6:	b00b      	add	sp, #44	; 0x2c
   d86e8:	bd30      	pop	{r4, r5, pc}

000d86ea <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d86ea:	b40c      	push	{r2, r3}
   d86ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d86f0:	b087      	sub	sp, #28
   d86f2:	af00      	add	r7, sp, #0
   d86f4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d86f8:	4605      	mov	r5, r0
   d86fa:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d86fe:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8700:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d8702:	4623      	mov	r3, r4
   d8704:	464a      	mov	r2, r9
   d8706:	2114      	movs	r1, #20
   d8708:	1d38      	adds	r0, r7, #4
   d870a:	f7fc ffd3 	bl	d56b4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d870e:	2813      	cmp	r0, #19
   d8710:	d805      	bhi.n	d871e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8712:	1d39      	adds	r1, r7, #4
   d8714:	4628      	mov	r0, r5
   d8716:	f7ff ffa9 	bl	d866c <_ZN5Print5writeEPKc>
   d871a:	4604      	mov	r4, r0
   d871c:	e013      	b.n	d8746 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d871e:	f100 0308 	add.w	r3, r0, #8
   d8722:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d8726:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8728:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d872c:	1c41      	adds	r1, r0, #1
   d872e:	4623      	mov	r3, r4
   d8730:	464a      	mov	r2, r9
   d8732:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d8734:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d8736:	f7fc ffbd 	bl	d56b4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d873a:	4669      	mov	r1, sp
   d873c:	4628      	mov	r0, r5
   d873e:	f7ff ff95 	bl	d866c <_ZN5Print5writeEPKc>
   d8742:	4604      	mov	r4, r0
   d8744:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8746:	b11e      	cbz	r6, d8750 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d8748:	4628      	mov	r0, r5
   d874a:	f7ff ffa2 	bl	d8692 <_ZN5Print7printlnEv>
   d874e:	4404      	add	r4, r0
    return n;
}
   d8750:	4620      	mov	r0, r4
   d8752:	371c      	adds	r7, #28
   d8754:	46bd      	mov	sp, r7
   d8756:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d875a:	b002      	add	sp, #8
   d875c:	4770      	bx	lr

000d875e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d875e:	b510      	push	{r4, lr}
   d8760:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8762:	f7fb fd81 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
   d8766:	4620      	mov	r0, r4
   d8768:	bd10      	pop	{r4, pc}

000d876a <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d876a:	b510      	push	{r4, lr}
   d876c:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d876e:	f7fc feb5 	bl	d54dc <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d8772:	4284      	cmp	r4, r0
   d8774:	d008      	beq.n	d8788 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d8776:	b11c      	cbz	r4, d8780 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d8778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d877c:	f7fc be9e 	b.w	d54bc <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d8780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d8784:	f7fc bea2 	b.w	d54cc <LED_Signaling_Stop>
   d8788:	bd10      	pop	{r4, pc}

000d878a <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d878a:	b570      	push	{r4, r5, r6, lr}
   d878c:	4605      	mov	r5, r0
   d878e:	460e      	mov	r6, r1
   d8790:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d8792:	f7fc fea3 	bl	d54dc <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d8796:	b150      	cbz	r0, d87ae <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d8798:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d879c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d87a0:	f7fc fe84 	bl	d54ac <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d87a4:	20e7      	movs	r0, #231	; 0xe7
}
   d87a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d87aa:	f7fc be9f 	b.w	d54ec <LED_On>
   d87ae:	bd70      	pop	{r4, r5, r6, pc}

000d87b0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d87b0:	4803      	ldr	r0, [pc, #12]	; (d87c0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d87b2:	4a04      	ldr	r2, [pc, #16]	; (d87c4 <_GLOBAL__sub_I_RGB+0x14>)
   d87b4:	4904      	ldr	r1, [pc, #16]	; (d87c8 <_GLOBAL__sub_I_RGB+0x18>)
   d87b6:	2300      	movs	r3, #0
   d87b8:	6083      	str	r3, [r0, #8]
   d87ba:	f000 bb6b 	b.w	d8e94 <__aeabi_atexit>
   d87be:	bf00      	nop
   d87c0:	2003e5bc 	.word	0x2003e5bc
   d87c4:	2003e284 	.word	0x2003e284
   d87c8:	000d875f 	.word	0x000d875f

000d87cc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d87cc:	b510      	push	{r4, lr}
   d87ce:	4604      	mov	r4, r0
{
    _spi = spi;
   d87d0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d87d2:	4608      	mov	r0, r1
   d87d4:	f7fc fdca 	bl	d536c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d87d8:	2300      	movs	r3, #0
   d87da:	6063      	str	r3, [r4, #4]
}
   d87dc:	4620      	mov	r0, r4
   d87de:	bd10      	pop	{r4, pc}

000d87e0 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d87e0:	7800      	ldrb	r0, [r0, #0]
   d87e2:	f7fc bdcb 	b.w	d537c <HAL_SPI_Is_Enabled>

000d87e6 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d87e6:	2300      	movs	r3, #0
   d87e8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d87ea:	6043      	str	r3, [r0, #4]
	len = 0;
   d87ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   d87ee:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d87f0:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d87f2:	680c      	ldr	r4, [r1, #0]
   d87f4:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d87f6:	684c      	ldr	r4, [r1, #4]
   d87f8:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d87fa:	688c      	ldr	r4, [r1, #8]
   d87fc:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d87fe:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d8800:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d8802:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d8804:	bd10      	pop	{r4, pc}

000d8806 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8806:	b510      	push	{r4, lr}
   d8808:	4604      	mov	r4, r0
{
	free(buffer);
   d880a:	6800      	ldr	r0, [r0, #0]
   d880c:	f7fc ff42 	bl	d5694 <free>
}
   d8810:	4620      	mov	r0, r4
   d8812:	bd10      	pop	{r4, pc}

000d8814 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8814:	b510      	push	{r4, lr}
   d8816:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8818:	6800      	ldr	r0, [r0, #0]
   d881a:	b108      	cbz	r0, d8820 <_ZN6String10invalidateEv+0xc>
   d881c:	f7fc ff3a 	bl	d5694 <free>
	buffer = NULL;
   d8820:	2300      	movs	r3, #0
   d8822:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d8824:	60a3      	str	r3, [r4, #8]
   d8826:	6063      	str	r3, [r4, #4]
   d8828:	bd10      	pop	{r4, pc}

000d882a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d882a:	b538      	push	{r3, r4, r5, lr}
   d882c:	4604      	mov	r4, r0
   d882e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8830:	6800      	ldr	r0, [r0, #0]
   d8832:	3101      	adds	r1, #1
   d8834:	f7fc ff36 	bl	d56a4 <realloc>
	if (newbuffer) {
   d8838:	b110      	cbz	r0, d8840 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d883a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d883e:	2001      	movs	r0, #1
	}
	return 0;
}
   d8840:	bd38      	pop	{r3, r4, r5, pc}

000d8842 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8842:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8844:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8846:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8848:	b113      	cbz	r3, d8850 <_ZN6String7reserveEj+0xe>
   d884a:	6843      	ldr	r3, [r0, #4]
   d884c:	428b      	cmp	r3, r1
   d884e:	d207      	bcs.n	d8860 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d8850:	4620      	mov	r0, r4
   d8852:	f7ff ffea 	bl	d882a <_ZN6String12changeBufferEj>
   d8856:	b120      	cbz	r0, d8862 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8858:	68a3      	ldr	r3, [r4, #8]
   d885a:	b90b      	cbnz	r3, d8860 <_ZN6String7reserveEj+0x1e>
   d885c:	6822      	ldr	r2, [r4, #0]
   d885e:	7013      	strb	r3, [r2, #0]
   d8860:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d8862:	bd10      	pop	{r4, pc}

000d8864 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8864:	b570      	push	{r4, r5, r6, lr}
   d8866:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8868:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d886a:	4604      	mov	r4, r0
   d886c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d886e:	f7ff ffe8 	bl	d8842 <_ZN6String7reserveEj>
   d8872:	b918      	cbnz	r0, d887c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8874:	4620      	mov	r0, r4
   d8876:	f7ff ffcd 	bl	d8814 <_ZN6String10invalidateEv>
		return *this;
   d887a:	e009      	b.n	d8890 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d887c:	462a      	mov	r2, r5
   d887e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8880:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d8882:	6820      	ldr	r0, [r4, #0]
   d8884:	f001 f8d1 	bl	d9a2a <memcpy>
	buffer[len] = 0;
   d8888:	6822      	ldr	r2, [r4, #0]
   d888a:	68a3      	ldr	r3, [r4, #8]
   d888c:	2100      	movs	r1, #0
   d888e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8890:	4620      	mov	r0, r4
   d8892:	bd70      	pop	{r4, r5, r6, pc}

000d8894 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8894:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8896:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8898:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d889a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d889c:	6043      	str	r3, [r0, #4]
	len = 0;
   d889e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d88a0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d88a2:	460d      	mov	r5, r1
   d88a4:	b139      	cbz	r1, d88b6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d88a6:	4608      	mov	r0, r1
   d88a8:	f001 f953 	bl	d9b52 <strlen>
   d88ac:	4629      	mov	r1, r5
   d88ae:	4602      	mov	r2, r0
   d88b0:	4620      	mov	r0, r4
   d88b2:	f7ff ffd7 	bl	d8864 <_ZN6String4copyEPKcj>
}
   d88b6:	4620      	mov	r0, r4
   d88b8:	bd38      	pop	{r3, r4, r5, pc}

000d88ba <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d88ba:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d88bc:	b510      	push	{r4, lr}
   d88be:	460b      	mov	r3, r1
   d88c0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d88c2:	d007      	beq.n	d88d4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d88c4:	6809      	ldr	r1, [r1, #0]
   d88c6:	b119      	cbz	r1, d88d0 <_ZN6StringaSERKS_+0x16>
   d88c8:	689a      	ldr	r2, [r3, #8]
   d88ca:	f7ff ffcb 	bl	d8864 <_ZN6String4copyEPKcj>
   d88ce:	e001      	b.n	d88d4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d88d0:	f7ff ffa0 	bl	d8814 <_ZN6String10invalidateEv>

	return *this;
}
   d88d4:	4620      	mov	r0, r4
   d88d6:	bd10      	pop	{r4, pc}

000d88d8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d88d8:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d88da:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d88dc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d88de:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d88e0:	6043      	str	r3, [r0, #4]
	len = 0;
   d88e2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d88e4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d88e6:	f7ff ffe8 	bl	d88ba <_ZN6StringaSERKS_>
}
   d88ea:	4620      	mov	r0, r4
   d88ec:	bd10      	pop	{r4, pc}

000d88ee <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d88ee:	b538      	push	{r3, r4, r5, lr}
   d88f0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d88f2:	460c      	mov	r4, r1
   d88f4:	b141      	cbz	r1, d8908 <_ZN6StringaSEPKc+0x1a>
   d88f6:	4608      	mov	r0, r1
   d88f8:	f001 f92b 	bl	d9b52 <strlen>
   d88fc:	4621      	mov	r1, r4
   d88fe:	4602      	mov	r2, r0
   d8900:	4628      	mov	r0, r5
   d8902:	f7ff ffaf 	bl	d8864 <_ZN6String4copyEPKcj>
   d8906:	e001      	b.n	d890c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d8908:	f7ff ff84 	bl	d8814 <_ZN6String10invalidateEv>

	return *this;
}
   d890c:	4628      	mov	r0, r5
   d890e:	bd38      	pop	{r3, r4, r5, pc}

000d8910 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d8910:	b40e      	push	{r1, r2, r3}
   d8912:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d8914:	ac09      	add	r4, sp, #36	; 0x24
   d8916:	4605      	mov	r5, r0
   d8918:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d891c:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d891e:	4623      	mov	r3, r4
   d8920:	463a      	mov	r2, r7
   d8922:	2105      	movs	r1, #5
   d8924:	a802      	add	r0, sp, #8
   d8926:	f7fc fec5 	bl	d56b4 <vsnprintf>
    va_end(marker);

    String result;
   d892a:	490c      	ldr	r1, [pc, #48]	; (d895c <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d892c:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d892e:	4628      	mov	r0, r5
   d8930:	f7ff ffb0 	bl	d8894 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d8934:	4631      	mov	r1, r6
   d8936:	4628      	mov	r0, r5
   d8938:	f7ff ff83 	bl	d8842 <_ZN6String7reserveEj>
    if (result.buffer) {
   d893c:	6828      	ldr	r0, [r5, #0]
   d893e:	b130      	cbz	r0, d894e <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d8940:	4623      	mov	r3, r4
   d8942:	463a      	mov	r2, r7
   d8944:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d8946:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d8948:	f7fc feb4 	bl	d56b4 <vsnprintf>
        va_end(marker);
        result.len = n;
   d894c:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d894e:	4628      	mov	r0, r5
   d8950:	b004      	add	sp, #16
   d8952:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8956:	b003      	add	sp, #12
   d8958:	4770      	bx	lr
   d895a:	bf00      	nop
   d895c:	000da2ac 	.word	0x000da2ac

000d8960 <_ZN11SystemClass3dfuEb>:
void SystemClass::dfu(bool persist)
{
    // true  - DFU mode persist if firmware upgrade is not completed
    // false - Briefly enter DFU bootloader mode (works with latest bootloader only )
    //         Subsequent reset or power off-on will execute normal firmware
    HAL_Core_Enter_Bootloader(persist);
   d8960:	f7fc bc34 	b.w	d51cc <HAL_Core_Enter_Bootloader>

000d8964 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8964:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8966:	4c09      	ldr	r4, [pc, #36]	; (d898c <_GLOBAL__sub_I_System+0x28>)
   d8968:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d896a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d896e:	6020      	str	r0, [r4, #0]
   d8970:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8972:	71a0      	strb	r0, [r4, #6]
   d8974:	8120      	strh	r0, [r4, #8]
   d8976:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8978:	f7fc fde0 	bl	d553c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d897c:	4620      	mov	r0, r4
   d897e:	4a04      	ldr	r2, [pc, #16]	; (d8990 <_GLOBAL__sub_I_System+0x2c>)
   d8980:	4904      	ldr	r1, [pc, #16]	; (d8994 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8986:	f000 ba85 	b.w	d8e94 <__aeabi_atexit>
   d898a:	bf00      	nop
   d898c:	2003e5cc 	.word	0x2003e5cc
   d8990:	2003e284 	.word	0x2003e284
   d8994:	000d4195 	.word	0x000d4195

000d8998 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8998:	4b02      	ldr	r3, [pc, #8]	; (d89a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d899a:	681a      	ldr	r2, [r3, #0]
   d899c:	4b02      	ldr	r3, [pc, #8]	; (d89a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d899e:	601a      	str	r2, [r3, #0]
   d89a0:	4770      	bx	lr
   d89a2:	bf00      	nop
   d89a4:	2003e218 	.word	0x2003e218
   d89a8:	2003e5d8 	.word	0x2003e5d8

000d89ac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d89ac:	4770      	bx	lr

000d89ae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d89ae:	7441      	strb	r1, [r0, #17]
   d89b0:	4770      	bx	lr

000d89b2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d89b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d89b4:	7c00      	ldrb	r0, [r0, #16]
   d89b6:	f7fc fd29 	bl	d540c <HAL_USART_Available_Data_For_Write>
}
   d89ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d89be:	bd08      	pop	{r3, pc}

000d89c0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d89c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d89c2:	7c00      	ldrb	r0, [r0, #16]
   d89c4:	f7fc fcfa 	bl	d53bc <HAL_USART_Available_Data>
}
   d89c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d89cc:	bd08      	pop	{r3, pc}

000d89ce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d89ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d89d0:	7c00      	ldrb	r0, [r0, #16]
   d89d2:	f7fc fd03 	bl	d53dc <HAL_USART_Peek_Data>
}
   d89d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d89da:	bf28      	it	cs
   d89dc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d89e0:	bd08      	pop	{r3, pc}

000d89e2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d89e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d89e4:	7c00      	ldrb	r0, [r0, #16]
   d89e6:	f7fc fcf1 	bl	d53cc <HAL_USART_Read_Data>
}
   d89ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d89ee:	bf28      	it	cs
   d89f0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d89f4:	bd08      	pop	{r3, pc}

000d89f6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d89f6:	7c00      	ldrb	r0, [r0, #16]
   d89f8:	f7fc bcf8 	b.w	d53ec <HAL_USART_Flush_Data>

000d89fc <_ZN11USARTSerialD0Ev>:
   d89fc:	b510      	push	{r4, lr}
   d89fe:	2114      	movs	r1, #20
   d8a00:	4604      	mov	r4, r0
   d8a02:	f000 fa4c 	bl	d8e9e <_ZdlPvj>
   d8a06:	4620      	mov	r0, r4
   d8a08:	bd10      	pop	{r4, pc}

000d8a0a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8a0a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8a0c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8a0e:	4604      	mov	r4, r0
   d8a10:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8a12:	b925      	cbnz	r5, d8a1e <_ZN11USARTSerial5writeEh+0x14>
   d8a14:	7c00      	ldrb	r0, [r0, #16]
   d8a16:	f7fc fcf9 	bl	d540c <HAL_USART_Available_Data_For_Write>
   d8a1a:	2800      	cmp	r0, #0
   d8a1c:	dd05      	ble.n	d8a2a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8a1e:	4631      	mov	r1, r6
   d8a20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8a26:	f7fc bcc1 	b.w	d53ac <HAL_USART_Write_Data>
  }
  return 0;
}
   d8a2a:	4628      	mov	r0, r5
   d8a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8a30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8a30:	b510      	push	{r4, lr}
   d8a32:	4604      	mov	r4, r0
   d8a34:	4608      	mov	r0, r1
   d8a36:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8a38:	2200      	movs	r2, #0
   d8a3a:	6062      	str	r2, [r4, #4]
   d8a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8a40:	60a2      	str	r2, [r4, #8]
   d8a42:	4a05      	ldr	r2, [pc, #20]	; (d8a58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8a44:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8a46:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8a48:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8a4a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8a4c:	461a      	mov	r2, r3
   d8a4e:	f7fc fc9d 	bl	d538c <HAL_USART_Init>
}
   d8a52:	4620      	mov	r0, r4
   d8a54:	bd10      	pop	{r4, pc}
   d8a56:	bf00      	nop
   d8a58:	000da3c8 	.word	0x000da3c8

000d8a5c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d8a5c:	2300      	movs	r3, #0
   d8a5e:	7c00      	ldrb	r0, [r0, #16]
   d8a60:	f7fc bcdc 	b.w	d541c <HAL_USART_BeginConfig>

000d8a64 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d8a64:	2200      	movs	r2, #0
   d8a66:	f7ff bff9 	b.w	d8a5c <_ZN11USARTSerial5beginEmm>

000d8a6a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d8a6a:	7c00      	ldrb	r0, [r0, #16]
   d8a6c:	f7fc bc96 	b.w	d539c <HAL_USART_End>

000d8a70 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8a70:	7c00      	ldrb	r0, [r0, #16]
   d8a72:	f7fc bcc3 	b.w	d53fc <HAL_USART_Is_Enabled>
	...

000d8a78 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8a78:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8a7a:	4d0c      	ldr	r5, [pc, #48]	; (d8aac <_Z22__fetch_global_Serial1v+0x34>)
   d8a7c:	6829      	ldr	r1, [r5, #0]
   d8a7e:	f011 0401 	ands.w	r4, r1, #1
   d8a82:	d111      	bne.n	d8aa8 <_Z22__fetch_global_Serial1v+0x30>
   d8a84:	4628      	mov	r0, r5
   d8a86:	f7fb fb19 	bl	d40bc <__cxa_guard_acquire>
   d8a8a:	b168      	cbz	r0, d8aa8 <_Z22__fetch_global_Serial1v+0x30>
   d8a8c:	4a08      	ldr	r2, [pc, #32]	; (d8ab0 <_Z22__fetch_global_Serial1v+0x38>)
   d8a8e:	4b09      	ldr	r3, [pc, #36]	; (d8ab4 <_Z22__fetch_global_Serial1v+0x3c>)
   d8a90:	4809      	ldr	r0, [pc, #36]	; (d8ab8 <_Z22__fetch_global_Serial1v+0x40>)
   d8a92:	4621      	mov	r1, r4
   d8a94:	f7ff ffcc 	bl	d8a30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8a98:	4628      	mov	r0, r5
   d8a9a:	f7fb fb14 	bl	d40c6 <__cxa_guard_release>
   d8a9e:	4a07      	ldr	r2, [pc, #28]	; (d8abc <_Z22__fetch_global_Serial1v+0x44>)
   d8aa0:	4907      	ldr	r1, [pc, #28]	; (d8ac0 <_Z22__fetch_global_Serial1v+0x48>)
   d8aa2:	4805      	ldr	r0, [pc, #20]	; (d8ab8 <_Z22__fetch_global_Serial1v+0x40>)
   d8aa4:	f000 f9f6 	bl	d8e94 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8aa8:	4803      	ldr	r0, [pc, #12]	; (d8ab8 <_Z22__fetch_global_Serial1v+0x40>)
   d8aaa:	bd38      	pop	{r3, r4, r5, pc}
   d8aac:	2003e674 	.word	0x2003e674
   d8ab0:	2003e678 	.word	0x2003e678
   d8ab4:	2003e5f0 	.word	0x2003e5f0
   d8ab8:	2003e5dc 	.word	0x2003e5dc
   d8abc:	2003e284 	.word	0x2003e284
   d8ac0:	000d89ad 	.word	0x000d89ad

000d8ac4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8ac4:	7441      	strb	r1, [r0, #17]
   d8ac6:	4770      	bx	lr

000d8ac8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8ac8:	4770      	bx	lr

000d8aca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d8aca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8acc:	2100      	movs	r1, #0
   d8ace:	7c00      	ldrb	r0, [r0, #16]
   d8ad0:	f7fc fcd4 	bl	d547c <HAL_USB_USART_Receive_Data>
}
   d8ad4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8ad8:	bf28      	it	cs
   d8ada:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8ade:	bd08      	pop	{r3, pc}

000d8ae0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8ae0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8ae2:	2101      	movs	r1, #1
   d8ae4:	7c00      	ldrb	r0, [r0, #16]
   d8ae6:	f7fc fcc9 	bl	d547c <HAL_USB_USART_Receive_Data>
}
   d8aea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8aee:	bf28      	it	cs
   d8af0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8af4:	bd08      	pop	{r3, pc}

000d8af6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d8af6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8af8:	7c00      	ldrb	r0, [r0, #16]
   d8afa:	f7fc fcb7 	bl	d546c <HAL_USB_USART_Available_Data_For_Write>
}
   d8afe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8b02:	bd08      	pop	{r3, pc}

000d8b04 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8b04:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8b06:	7c00      	ldrb	r0, [r0, #16]
   d8b08:	f7fc fca8 	bl	d545c <HAL_USB_USART_Available_Data>
}
   d8b0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8b10:	bd08      	pop	{r3, pc}

000d8b12 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d8b12:	7c00      	ldrb	r0, [r0, #16]
   d8b14:	f7fc bcc2 	b.w	d549c <HAL_USB_USART_Flush_Data>

000d8b18 <_ZN9USBSerialD0Ev>:
   d8b18:	b510      	push	{r4, lr}
   d8b1a:	2114      	movs	r1, #20
   d8b1c:	4604      	mov	r4, r0
   d8b1e:	f000 f9be 	bl	d8e9e <_ZdlPvj>
   d8b22:	4620      	mov	r0, r4
   d8b24:	bd10      	pop	{r4, pc}

000d8b26 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8b26:	b538      	push	{r3, r4, r5, lr}
   d8b28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8b2a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8b2c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8b2e:	f7fc fc9d 	bl	d546c <HAL_USB_USART_Available_Data_For_Write>
   d8b32:	2800      	cmp	r0, #0
   d8b34:	dc01      	bgt.n	d8b3a <_ZN9USBSerial5writeEh+0x14>
   d8b36:	7c60      	ldrb	r0, [r4, #17]
   d8b38:	b128      	cbz	r0, d8b46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8b3a:	4629      	mov	r1, r5
   d8b3c:	7c20      	ldrb	r0, [r4, #16]
   d8b3e:	f7fc fca5 	bl	d548c <HAL_USB_USART_Send_Data>
   d8b42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8b46:	bd38      	pop	{r3, r4, r5, pc}

000d8b48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8b48:	b510      	push	{r4, lr}
   d8b4a:	4604      	mov	r4, r0
   d8b4c:	2300      	movs	r3, #0
   d8b4e:	6063      	str	r3, [r4, #4]
   d8b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8b54:	60a3      	str	r3, [r4, #8]
   d8b56:	4b05      	ldr	r3, [pc, #20]	; (d8b6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8b58:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8b5a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8b5c:	4608      	mov	r0, r1
{
  _serial = serial;
   d8b5e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8b60:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8b62:	4611      	mov	r1, r2
   d8b64:	f7fc fc62 	bl	d542c <HAL_USB_USART_Init>
}
   d8b68:	4620      	mov	r0, r4
   d8b6a:	bd10      	pop	{r4, pc}
   d8b6c:	000da3f8 	.word	0x000da3f8

000d8b70 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8b70:	2200      	movs	r2, #0
   d8b72:	7c00      	ldrb	r0, [r0, #16]
   d8b74:	f7fc bc62 	b.w	d543c <HAL_USB_USART_Begin>

000d8b78 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d8b78:	7c00      	ldrb	r0, [r0, #16]
   d8b7a:	f7fc bc67 	b.w	d544c <HAL_USB_USART_End>

000d8b7e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8b7e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8b80:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8b82:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8b84:	2100      	movs	r1, #0
   d8b86:	f000 ff76 	bl	d9a76 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8b8a:	4620      	mov	r0, r4
   d8b8c:	bd10      	pop	{r4, pc}
	...

000d8b90 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8b90:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8b92:	4d0e      	ldr	r5, [pc, #56]	; (d8bcc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8b94:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8b96:	a801      	add	r0, sp, #4
   d8b98:	f7ff fff1 	bl	d8b7e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8b9c:	6829      	ldr	r1, [r5, #0]
   d8b9e:	f011 0401 	ands.w	r4, r1, #1
   d8ba2:	d110      	bne.n	d8bc6 <_Z16_fetch_usbserialv+0x36>
   d8ba4:	4628      	mov	r0, r5
   d8ba6:	f7fb fa89 	bl	d40bc <__cxa_guard_acquire>
   d8baa:	b160      	cbz	r0, d8bc6 <_Z16_fetch_usbserialv+0x36>
   d8bac:	aa01      	add	r2, sp, #4
   d8bae:	4621      	mov	r1, r4
   d8bb0:	4807      	ldr	r0, [pc, #28]	; (d8bd0 <_Z16_fetch_usbserialv+0x40>)
   d8bb2:	f7ff ffc9 	bl	d8b48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8bb6:	4628      	mov	r0, r5
   d8bb8:	f7fb fa85 	bl	d40c6 <__cxa_guard_release>
   d8bbc:	4a05      	ldr	r2, [pc, #20]	; (d8bd4 <_Z16_fetch_usbserialv+0x44>)
   d8bbe:	4906      	ldr	r1, [pc, #24]	; (d8bd8 <_Z16_fetch_usbserialv+0x48>)
   d8bc0:	4803      	ldr	r0, [pc, #12]	; (d8bd0 <_Z16_fetch_usbserialv+0x40>)
   d8bc2:	f000 f967 	bl	d8e94 <__aeabi_atexit>
	return _usbserial;
}
   d8bc6:	4802      	ldr	r0, [pc, #8]	; (d8bd0 <_Z16_fetch_usbserialv+0x40>)
   d8bc8:	b007      	add	sp, #28
   d8bca:	bd30      	pop	{r4, r5, pc}
   d8bcc:	2003e6fc 	.word	0x2003e6fc
   d8bd0:	2003e700 	.word	0x2003e700
   d8bd4:	2003e284 	.word	0x2003e284
   d8bd8:	000d8ac9 	.word	0x000d8ac9

000d8bdc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8bdc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8bde:	4b0f      	ldr	r3, [pc, #60]	; (d8c1c <serialEventRun+0x40>)
   d8be0:	b133      	cbz	r3, d8bf0 <serialEventRun+0x14>
   d8be2:	f7ff ffd5 	bl	d8b90 <_Z16_fetch_usbserialv>
   d8be6:	6803      	ldr	r3, [r0, #0]
   d8be8:	691b      	ldr	r3, [r3, #16]
   d8bea:	4798      	blx	r3
   d8bec:	2800      	cmp	r0, #0
   d8bee:	dc0d      	bgt.n	d8c0c <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8bf0:	4b0b      	ldr	r3, [pc, #44]	; (d8c20 <serialEventRun+0x44>)
   d8bf2:	b133      	cbz	r3, d8c02 <serialEventRun+0x26>
   d8bf4:	f7ff ff40 	bl	d8a78 <_Z22__fetch_global_Serial1v>
   d8bf8:	6803      	ldr	r3, [r0, #0]
   d8bfa:	691b      	ldr	r3, [r3, #16]
   d8bfc:	4798      	blx	r3
   d8bfe:	2800      	cmp	r0, #0
   d8c00:	dc07      	bgt.n	d8c12 <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d8c02:	4b08      	ldr	r3, [pc, #32]	; (d8c24 <serialEventRun+0x48>)
   d8c04:	b143      	cbz	r3, d8c18 <serialEventRun+0x3c>
   d8c06:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d8c0a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8c0c:	f3af 8000 	nop.w
   d8c10:	e7ee      	b.n	d8bf0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8c12:	f3af 8000 	nop.w
   d8c16:	e7f4      	b.n	d8c02 <serialEventRun+0x26>
   d8c18:	bd08      	pop	{r3, pc}
   d8c1a:	bf00      	nop
	...

000d8c28 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8c28:	b508      	push	{r3, lr}
	serialEventRun();
   d8c2a:	f7ff ffd7 	bl	d8bdc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8c2e:	f7fc fae5 	bl	d51fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8c32:	4b01      	ldr	r3, [pc, #4]	; (d8c38 <_post_loop+0x10>)
   d8c34:	6018      	str	r0, [r3, #0]
   d8c36:	bd08      	pop	{r3, pc}
   d8c38:	2003e728 	.word	0x2003e728

000d8c3c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8c3c:	4802      	ldr	r0, [pc, #8]	; (d8c48 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8c3e:	4a03      	ldr	r2, [pc, #12]	; (d8c4c <_Z33system_initialize_user_backup_ramv+0x10>)
   d8c40:	4903      	ldr	r1, [pc, #12]	; (d8c50 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8c42:	1a12      	subs	r2, r2, r0
   d8c44:	f000 bef1 	b.w	d9a2a <memcpy>
   d8c48:	2003f400 	.word	0x2003f400
   d8c4c:	2003f404 	.word	0x2003f404
   d8c50:	000da5c0 	.word	0x000da5c0

000d8c54 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8c54:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8c56:	2300      	movs	r3, #0
   d8c58:	9300      	str	r3, [sp, #0]
   d8c5a:	461a      	mov	r2, r3
   d8c5c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8c60:	f7fc fc96 	bl	d5590 <system_ctrl_set_result>
}
   d8c64:	b003      	add	sp, #12
   d8c66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8c6c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8c6c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8c6e:	8843      	ldrh	r3, [r0, #2]
   d8c70:	2b0a      	cmp	r3, #10
   d8c72:	d008      	beq.n	d8c86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8c74:	2b50      	cmp	r3, #80	; 0x50
   d8c76:	d109      	bne.n	d8c8c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8c78:	4b09      	ldr	r3, [pc, #36]	; (d8ca0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8c7a:	681b      	ldr	r3, [r3, #0]
   d8c7c:	b13b      	cbz	r3, d8c8e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8c7e:	b003      	add	sp, #12
   d8c80:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8c84:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8c86:	f7ff ffe5 	bl	d8c54 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8c8a:	e006      	b.n	d8c9a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8c8c:	2300      	movs	r3, #0
   d8c8e:	9300      	str	r3, [sp, #0]
   d8c90:	461a      	mov	r2, r3
   d8c92:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8c96:	f7fc fc7b 	bl	d5590 <system_ctrl_set_result>
        break;
    }
}
   d8c9a:	b003      	add	sp, #12
   d8c9c:	f85d fb04 	ldr.w	pc, [sp], #4
   d8ca0:	2003e714 	.word	0x2003e714

000d8ca4 <module_user_init_hook>:

void module_user_init_hook()
{
   d8ca4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8ca6:	4c10      	ldr	r4, [pc, #64]	; (d8ce8 <module_user_init_hook+0x44>)
   d8ca8:	4d10      	ldr	r5, [pc, #64]	; (d8cec <module_user_init_hook+0x48>)
   d8caa:	6823      	ldr	r3, [r4, #0]
   d8cac:	42ab      	cmp	r3, r5
   d8cae:	4b10      	ldr	r3, [pc, #64]	; (d8cf0 <module_user_init_hook+0x4c>)
   d8cb0:	bf0c      	ite	eq
   d8cb2:	2201      	moveq	r2, #1
   d8cb4:	2200      	movne	r2, #0
   d8cb6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8cb8:	d002      	beq.n	d8cc0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d8cba:	f7ff ffbf 	bl	d8c3c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8cbe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8cc0:	f7fc fa8c 	bl	d51dc <HAL_RNG_GetRandomNumber>
   d8cc4:	4604      	mov	r4, r0
    srand(seed);
   d8cc6:	f000 fedf 	bl	d9a88 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8cca:	4b0a      	ldr	r3, [pc, #40]	; (d8cf4 <module_user_init_hook+0x50>)
   d8ccc:	b113      	cbz	r3, d8cd4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d8cce:	4620      	mov	r0, r4
   d8cd0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8cd4:	2100      	movs	r1, #0
   d8cd6:	4807      	ldr	r0, [pc, #28]	; (d8cf4 <module_user_init_hook+0x50>)
   d8cd8:	f7fc fc7c 	bl	d55d4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8cdc:	2100      	movs	r1, #0
   d8cde:	4806      	ldr	r0, [pc, #24]	; (d8cf8 <module_user_init_hook+0x54>)
}
   d8ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8ce4:	f7fc bc4a 	b.w	d557c <system_ctrl_set_app_request_handler>
   d8ce8:	2003f400 	.word	0x2003f400
   d8cec:	9a271c1e 	.word	0x9a271c1e
   d8cf0:	2003e718 	.word	0x2003e718
   d8cf4:	00000000 	.word	0x00000000
   d8cf8:	000d8c6d 	.word	0x000d8c6d

000d8cfc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8cfc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8cfe:	4e18      	ldr	r6, [pc, #96]	; (d8d60 <pinAvailable+0x64>)
   d8d00:	6831      	ldr	r1, [r6, #0]
   d8d02:	f011 0501 	ands.w	r5, r1, #1
   d8d06:	4604      	mov	r4, r0
   d8d08:	d10a      	bne.n	d8d20 <pinAvailable+0x24>
   d8d0a:	4630      	mov	r0, r6
   d8d0c:	f7fb f9d6 	bl	d40bc <__cxa_guard_acquire>
   d8d10:	b130      	cbz	r0, d8d20 <pinAvailable+0x24>
   d8d12:	4629      	mov	r1, r5
   d8d14:	4813      	ldr	r0, [pc, #76]	; (d8d64 <pinAvailable+0x68>)
   d8d16:	f7ff fd59 	bl	d87cc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8d1a:	4630      	mov	r0, r6
   d8d1c:	f7fb f9d3 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8d20:	4810      	ldr	r0, [pc, #64]	; (d8d64 <pinAvailable+0x68>)
   d8d22:	f7ff fd5d 	bl	d87e0 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8d26:	b128      	cbz	r0, d8d34 <pinAvailable+0x38>
   d8d28:	f1a4 030b 	sub.w	r3, r4, #11
   d8d2c:	2b02      	cmp	r3, #2
   d8d2e:	d801      	bhi.n	d8d34 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8d30:	2000      	movs	r0, #0
   d8d32:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8d34:	f000 f888 	bl	d8e48 <_Z19__fetch_global_Wirev>
   d8d38:	f7fe f900 	bl	d6f3c <_ZN7TwoWire9isEnabledEv>
   d8d3c:	b108      	cbz	r0, d8d42 <pinAvailable+0x46>
   d8d3e:	2c01      	cmp	r4, #1
   d8d40:	d9f6      	bls.n	d8d30 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8d42:	f7ff fe99 	bl	d8a78 <_Z22__fetch_global_Serial1v>
   d8d46:	f7ff fe93 	bl	d8a70 <_ZN11USARTSerial9isEnabledEv>
   d8d4a:	b118      	cbz	r0, d8d54 <pinAvailable+0x58>
   d8d4c:	f1a4 0309 	sub.w	r3, r4, #9
   d8d50:	2b01      	cmp	r3, #1
   d8d52:	d9ed      	bls.n	d8d30 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8d54:	2c1e      	cmp	r4, #30
   d8d56:	bf8c      	ite	hi
   d8d58:	2000      	movhi	r0, #0
   d8d5a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8d5c:	bd70      	pop	{r4, r5, r6, pc}
   d8d5e:	bf00      	nop
   d8d60:	2003e71c 	.word	0x2003e71c
   d8d64:	2003e720 	.word	0x2003e720

000d8d68 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8d68:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8d6a:	b538      	push	{r3, r4, r5, lr}
   d8d6c:	4604      	mov	r4, r0
   d8d6e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8d70:	d80a      	bhi.n	d8d88 <pinMode+0x20>
   d8d72:	29ff      	cmp	r1, #255	; 0xff
   d8d74:	d008      	beq.n	d8d88 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8d76:	f7ff ffc1 	bl	d8cfc <pinAvailable>
   d8d7a:	b128      	cbz	r0, d8d88 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8d7c:	4629      	mov	r1, r5
   d8d7e:	4620      	mov	r0, r4
}
   d8d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8d84:	f7fc ba72 	b.w	d526c <HAL_Pin_Mode>
   d8d88:	bd38      	pop	{r3, r4, r5, pc}

000d8d8a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8d8a:	b538      	push	{r3, r4, r5, lr}
   d8d8c:	4604      	mov	r4, r0
   d8d8e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8d90:	f7fc fa74 	bl	d527c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8d94:	28ff      	cmp	r0, #255	; 0xff
   d8d96:	d010      	beq.n	d8dba <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8d98:	2806      	cmp	r0, #6
   d8d9a:	d804      	bhi.n	d8da6 <digitalWrite+0x1c>
   d8d9c:	234d      	movs	r3, #77	; 0x4d
   d8d9e:	fa23 f000 	lsr.w	r0, r3, r0
   d8da2:	07c3      	lsls	r3, r0, #31
   d8da4:	d409      	bmi.n	d8dba <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8da6:	4620      	mov	r0, r4
   d8da8:	f7ff ffa8 	bl	d8cfc <pinAvailable>
   d8dac:	b128      	cbz	r0, d8dba <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8dae:	4629      	mov	r1, r5
   d8db0:	4620      	mov	r0, r4
}
   d8db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8db6:	f7fc ba69 	b.w	d528c <HAL_GPIO_Write>
   d8dba:	bd38      	pop	{r3, r4, r5, pc}

000d8dbc <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8dbc:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8dbe:	b510      	push	{r4, lr}
   d8dc0:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8dc2:	bf9c      	itt	ls
   d8dc4:	340e      	addls	r4, #14
   d8dc6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8dc8:	4620      	mov	r0, r4
   d8dca:	f7ff ff97 	bl	d8cfc <pinAvailable>
   d8dce:	b150      	cbz	r0, d8de6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8dd0:	2103      	movs	r1, #3
   d8dd2:	4620      	mov	r0, r4
   d8dd4:	f7fc fa42 	bl	d525c <HAL_Validate_Pin_Function>
   d8dd8:	2803      	cmp	r0, #3
   d8dda:	d104      	bne.n	d8de6 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8ddc:	4620      	mov	r0, r4
}
   d8dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8de2:	f7fc ba6b 	b.w	d52bc <HAL_ADC_Read>
}
   d8de6:	2000      	movs	r0, #0
   d8de8:	bd10      	pop	{r4, pc}
	...

000d8dec <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d8dec:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d8dee:	4c07      	ldr	r4, [pc, #28]	; (d8e0c <_Z21__fetch_global_EEPROMv+0x20>)
   d8df0:	6823      	ldr	r3, [r4, #0]
   d8df2:	07db      	lsls	r3, r3, #31
   d8df4:	d408      	bmi.n	d8e08 <_Z21__fetch_global_EEPROMv+0x1c>
   d8df6:	4620      	mov	r0, r4
   d8df8:	f7fb f960 	bl	d40bc <__cxa_guard_acquire>
   d8dfc:	b120      	cbz	r0, d8e08 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d8dfe:	f7fc fa05 	bl	d520c <HAL_EEPROM_Init>
   d8e02:	4620      	mov	r0, r4
   d8e04:	f7fb f95f 	bl	d40c6 <__cxa_guard_release>
	return eeprom;
}
   d8e08:	4801      	ldr	r0, [pc, #4]	; (d8e10 <_Z21__fetch_global_EEPROMv+0x24>)
   d8e0a:	bd10      	pop	{r4, pc}
   d8e0c:	2003e72c 	.word	0x2003e72c
   d8e10:	2003e730 	.word	0x2003e730

000d8e14 <_Z17acquireWireBufferv>:
   d8e14:	b570      	push	{r4, r5, r6, lr}
   d8e16:	4604      	mov	r4, r0
   d8e18:	2514      	movs	r5, #20
   d8e1a:	462a      	mov	r2, r5
   d8e1c:	4e09      	ldr	r6, [pc, #36]	; (d8e44 <_Z17acquireWireBufferv+0x30>)
   d8e1e:	2100      	movs	r1, #0
   d8e20:	f000 fe29 	bl	d9a76 <memset>
   d8e24:	8025      	strh	r5, [r4, #0]
   d8e26:	2520      	movs	r5, #32
   d8e28:	4631      	mov	r1, r6
   d8e2a:	60a5      	str	r5, [r4, #8]
   d8e2c:	6125      	str	r5, [r4, #16]
   d8e2e:	4628      	mov	r0, r5
   d8e30:	f000 f84f 	bl	d8ed2 <_ZnajRKSt9nothrow_t>
   d8e34:	4631      	mov	r1, r6
   d8e36:	6060      	str	r0, [r4, #4]
   d8e38:	4628      	mov	r0, r5
   d8e3a:	f000 f84a 	bl	d8ed2 <_ZnajRKSt9nothrow_t>
   d8e3e:	60e0      	str	r0, [r4, #12]
   d8e40:	4620      	mov	r0, r4
   d8e42:	bd70      	pop	{r4, r5, r6, pc}
   d8e44:	000da420 	.word	0x000da420

000d8e48 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8e48:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8e4a:	4d0e      	ldr	r5, [pc, #56]	; (d8e84 <_Z19__fetch_global_Wirev+0x3c>)
   d8e4c:	6829      	ldr	r1, [r5, #0]
   d8e4e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8e52:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8e54:	d113      	bne.n	d8e7e <_Z19__fetch_global_Wirev+0x36>
   d8e56:	4628      	mov	r0, r5
   d8e58:	f7fb f930 	bl	d40bc <__cxa_guard_acquire>
   d8e5c:	b178      	cbz	r0, d8e7e <_Z19__fetch_global_Wirev+0x36>
   d8e5e:	a801      	add	r0, sp, #4
   d8e60:	f7ff ffd8 	bl	d8e14 <_Z17acquireWireBufferv>
   d8e64:	aa01      	add	r2, sp, #4
   d8e66:	4621      	mov	r1, r4
   d8e68:	4807      	ldr	r0, [pc, #28]	; (d8e88 <_Z19__fetch_global_Wirev+0x40>)
   d8e6a:	f7fe f855 	bl	d6f18 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8e6e:	4628      	mov	r0, r5
   d8e70:	f7fb f929 	bl	d40c6 <__cxa_guard_release>
   d8e74:	4a05      	ldr	r2, [pc, #20]	; (d8e8c <_Z19__fetch_global_Wirev+0x44>)
   d8e76:	4906      	ldr	r1, [pc, #24]	; (d8e90 <_Z19__fetch_global_Wirev+0x48>)
   d8e78:	4803      	ldr	r0, [pc, #12]	; (d8e88 <_Z19__fetch_global_Wirev+0x40>)
   d8e7a:	f000 f80b 	bl	d8e94 <__aeabi_atexit>
	return wire;
}
   d8e7e:	4802      	ldr	r0, [pc, #8]	; (d8e88 <_Z19__fetch_global_Wirev+0x40>)
   d8e80:	b007      	add	sp, #28
   d8e82:	bd30      	pop	{r4, r5, pc}
   d8e84:	2003e734 	.word	0x2003e734
   d8e88:	2003e738 	.word	0x2003e738
   d8e8c:	2003e284 	.word	0x2003e284
   d8e90:	000d6ec1 	.word	0x000d6ec1

000d8e94 <__aeabi_atexit>:
   d8e94:	460b      	mov	r3, r1
   d8e96:	4601      	mov	r1, r0
   d8e98:	4618      	mov	r0, r3
   d8e9a:	f000 bda9 	b.w	d99f0 <__cxa_atexit>

000d8e9e <_ZdlPvj>:
   d8e9e:	f7fb b8fe 	b.w	d409e <_ZdlPv>
	...

000d8ea4 <_ZSt15get_new_handlerv>:
   d8ea4:	4b02      	ldr	r3, [pc, #8]	; (d8eb0 <_ZSt15get_new_handlerv+0xc>)
   d8ea6:	6818      	ldr	r0, [r3, #0]
   d8ea8:	f3bf 8f5f 	dmb	sy
   d8eac:	4770      	bx	lr
   d8eae:	bf00      	nop
   d8eb0:	2003e74c 	.word	0x2003e74c

000d8eb4 <_ZnwjRKSt9nothrow_t>:
   d8eb4:	b510      	push	{r4, lr}
   d8eb6:	2800      	cmp	r0, #0
   d8eb8:	bf14      	ite	ne
   d8eba:	4604      	movne	r4, r0
   d8ebc:	2401      	moveq	r4, #1
   d8ebe:	4620      	mov	r0, r4
   d8ec0:	f7fc fbe0 	bl	d5684 <malloc>
   d8ec4:	b920      	cbnz	r0, d8ed0 <_ZnwjRKSt9nothrow_t+0x1c>
   d8ec6:	f7ff ffed 	bl	d8ea4 <_ZSt15get_new_handlerv>
   d8eca:	b108      	cbz	r0, d8ed0 <_ZnwjRKSt9nothrow_t+0x1c>
   d8ecc:	4780      	blx	r0
   d8ece:	e7f6      	b.n	d8ebe <_ZnwjRKSt9nothrow_t+0xa>
   d8ed0:	bd10      	pop	{r4, pc}

000d8ed2 <_ZnajRKSt9nothrow_t>:
   d8ed2:	f7ff bfef 	b.w	d8eb4 <_ZnwjRKSt9nothrow_t>

000d8ed6 <_ZSt25__throw_bad_function_callv>:
   d8ed6:	b508      	push	{r3, lr}
   d8ed8:	f7fc fbf4 	bl	d56c4 <abort>

000d8edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8edc:	4b24      	ldr	r3, [pc, #144]	; (d8f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8ede:	681a      	ldr	r2, [r3, #0]
   d8ee0:	07d0      	lsls	r0, r2, #31
   d8ee2:	bf5c      	itt	pl
   d8ee4:	2201      	movpl	r2, #1
   d8ee6:	601a      	strpl	r2, [r3, #0]
   d8ee8:	4b22      	ldr	r3, [pc, #136]	; (d8f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8eea:	681a      	ldr	r2, [r3, #0]
   d8eec:	07d1      	lsls	r1, r2, #31
   d8eee:	bf5c      	itt	pl
   d8ef0:	2201      	movpl	r2, #1
   d8ef2:	601a      	strpl	r2, [r3, #0]
   d8ef4:	4b20      	ldr	r3, [pc, #128]	; (d8f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8ef6:	681a      	ldr	r2, [r3, #0]
   d8ef8:	07d2      	lsls	r2, r2, #31
   d8efa:	bf5c      	itt	pl
   d8efc:	2201      	movpl	r2, #1
   d8efe:	601a      	strpl	r2, [r3, #0]
   d8f00:	4b1e      	ldr	r3, [pc, #120]	; (d8f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8f02:	681a      	ldr	r2, [r3, #0]
   d8f04:	07d0      	lsls	r0, r2, #31
   d8f06:	bf5c      	itt	pl
   d8f08:	2201      	movpl	r2, #1
   d8f0a:	601a      	strpl	r2, [r3, #0]
   d8f0c:	4b1c      	ldr	r3, [pc, #112]	; (d8f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8f0e:	681a      	ldr	r2, [r3, #0]
   d8f10:	07d1      	lsls	r1, r2, #31
   d8f12:	bf5c      	itt	pl
   d8f14:	2201      	movpl	r2, #1
   d8f16:	601a      	strpl	r2, [r3, #0]
   d8f18:	4b1a      	ldr	r3, [pc, #104]	; (d8f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8f1a:	681a      	ldr	r2, [r3, #0]
   d8f1c:	07d2      	lsls	r2, r2, #31
   d8f1e:	bf5c      	itt	pl
   d8f20:	2201      	movpl	r2, #1
   d8f22:	601a      	strpl	r2, [r3, #0]
   d8f24:	4b18      	ldr	r3, [pc, #96]	; (d8f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8f26:	681a      	ldr	r2, [r3, #0]
   d8f28:	07d0      	lsls	r0, r2, #31
   d8f2a:	bf5c      	itt	pl
   d8f2c:	2201      	movpl	r2, #1
   d8f2e:	601a      	strpl	r2, [r3, #0]
   d8f30:	4b16      	ldr	r3, [pc, #88]	; (d8f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8f32:	681a      	ldr	r2, [r3, #0]
   d8f34:	07d1      	lsls	r1, r2, #31
   d8f36:	bf5c      	itt	pl
   d8f38:	2201      	movpl	r2, #1
   d8f3a:	601a      	strpl	r2, [r3, #0]
   d8f3c:	4b14      	ldr	r3, [pc, #80]	; (d8f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8f3e:	681a      	ldr	r2, [r3, #0]
   d8f40:	07d2      	lsls	r2, r2, #31
   d8f42:	bf5c      	itt	pl
   d8f44:	2201      	movpl	r2, #1
   d8f46:	601a      	strpl	r2, [r3, #0]
   d8f48:	4b12      	ldr	r3, [pc, #72]	; (d8f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8f4a:	681a      	ldr	r2, [r3, #0]
   d8f4c:	07d0      	lsls	r0, r2, #31
   d8f4e:	bf5c      	itt	pl
   d8f50:	2201      	movpl	r2, #1
   d8f52:	601a      	strpl	r2, [r3, #0]
   d8f54:	4b10      	ldr	r3, [pc, #64]	; (d8f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8f56:	681a      	ldr	r2, [r3, #0]
   d8f58:	07d1      	lsls	r1, r2, #31
   d8f5a:	bf5c      	itt	pl
   d8f5c:	2201      	movpl	r2, #1
   d8f5e:	601a      	strpl	r2, [r3, #0]
   d8f60:	4b0e      	ldr	r3, [pc, #56]	; (d8f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8f62:	681a      	ldr	r2, [r3, #0]
   d8f64:	07d2      	lsls	r2, r2, #31
   d8f66:	bf5c      	itt	pl
   d8f68:	2201      	movpl	r2, #1
   d8f6a:	601a      	strpl	r2, [r3, #0]
   d8f6c:	4770      	bx	lr
   d8f6e:	bf00      	nop
   d8f70:	2003e77c 	.word	0x2003e77c
   d8f74:	2003e778 	.word	0x2003e778
   d8f78:	2003e774 	.word	0x2003e774
   d8f7c:	2003e770 	.word	0x2003e770
   d8f80:	2003e76c 	.word	0x2003e76c
   d8f84:	2003e768 	.word	0x2003e768
   d8f88:	2003e764 	.word	0x2003e764
   d8f8c:	2003e760 	.word	0x2003e760
   d8f90:	2003e75c 	.word	0x2003e75c
   d8f94:	2003e758 	.word	0x2003e758
   d8f98:	2003e754 	.word	0x2003e754
   d8f9c:	2003e750 	.word	0x2003e750

000d8fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8fa0:	4b18      	ldr	r3, [pc, #96]	; (d9004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8fa2:	681a      	ldr	r2, [r3, #0]
   d8fa4:	07d1      	lsls	r1, r2, #31
   d8fa6:	bf5c      	itt	pl
   d8fa8:	2201      	movpl	r2, #1
   d8faa:	601a      	strpl	r2, [r3, #0]
   d8fac:	4b16      	ldr	r3, [pc, #88]	; (d9008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8fae:	681a      	ldr	r2, [r3, #0]
   d8fb0:	07d2      	lsls	r2, r2, #31
   d8fb2:	bf5c      	itt	pl
   d8fb4:	2201      	movpl	r2, #1
   d8fb6:	601a      	strpl	r2, [r3, #0]
   d8fb8:	4b14      	ldr	r3, [pc, #80]	; (d900c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8fba:	681a      	ldr	r2, [r3, #0]
   d8fbc:	07d0      	lsls	r0, r2, #31
   d8fbe:	bf5c      	itt	pl
   d8fc0:	2201      	movpl	r2, #1
   d8fc2:	601a      	strpl	r2, [r3, #0]
   d8fc4:	4b12      	ldr	r3, [pc, #72]	; (d9010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8fc6:	681a      	ldr	r2, [r3, #0]
   d8fc8:	07d1      	lsls	r1, r2, #31
   d8fca:	bf5c      	itt	pl
   d8fcc:	2201      	movpl	r2, #1
   d8fce:	601a      	strpl	r2, [r3, #0]
   d8fd0:	4b10      	ldr	r3, [pc, #64]	; (d9014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8fd2:	681a      	ldr	r2, [r3, #0]
   d8fd4:	07d2      	lsls	r2, r2, #31
   d8fd6:	bf5c      	itt	pl
   d8fd8:	2201      	movpl	r2, #1
   d8fda:	601a      	strpl	r2, [r3, #0]
   d8fdc:	4b0e      	ldr	r3, [pc, #56]	; (d9018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8fde:	681a      	ldr	r2, [r3, #0]
   d8fe0:	07d0      	lsls	r0, r2, #31
   d8fe2:	bf5c      	itt	pl
   d8fe4:	2201      	movpl	r2, #1
   d8fe6:	601a      	strpl	r2, [r3, #0]
   d8fe8:	4b0c      	ldr	r3, [pc, #48]	; (d901c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8fea:	681a      	ldr	r2, [r3, #0]
   d8fec:	07d1      	lsls	r1, r2, #31
   d8fee:	bf5c      	itt	pl
   d8ff0:	2201      	movpl	r2, #1
   d8ff2:	601a      	strpl	r2, [r3, #0]
   d8ff4:	4b0a      	ldr	r3, [pc, #40]	; (d9020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8ff6:	681a      	ldr	r2, [r3, #0]
   d8ff8:	07d2      	lsls	r2, r2, #31
   d8ffa:	bf5c      	itt	pl
   d8ffc:	2201      	movpl	r2, #1
   d8ffe:	601a      	strpl	r2, [r3, #0]
   d9000:	4770      	bx	lr
   d9002:	bf00      	nop
   d9004:	2003e79c 	.word	0x2003e79c
   d9008:	2003e798 	.word	0x2003e798
   d900c:	2003e794 	.word	0x2003e794
   d9010:	2003e790 	.word	0x2003e790
   d9014:	2003e78c 	.word	0x2003e78c
   d9018:	2003e788 	.word	0x2003e788
   d901c:	2003e784 	.word	0x2003e784
   d9020:	2003e780 	.word	0x2003e780

000d9024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9024:	4b18      	ldr	r3, [pc, #96]	; (d9088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9026:	681a      	ldr	r2, [r3, #0]
   d9028:	07d1      	lsls	r1, r2, #31
   d902a:	bf5c      	itt	pl
   d902c:	2201      	movpl	r2, #1
   d902e:	601a      	strpl	r2, [r3, #0]
   d9030:	4b16      	ldr	r3, [pc, #88]	; (d908c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9032:	681a      	ldr	r2, [r3, #0]
   d9034:	07d2      	lsls	r2, r2, #31
   d9036:	bf5c      	itt	pl
   d9038:	2201      	movpl	r2, #1
   d903a:	601a      	strpl	r2, [r3, #0]
   d903c:	4b14      	ldr	r3, [pc, #80]	; (d9090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d903e:	681a      	ldr	r2, [r3, #0]
   d9040:	07d0      	lsls	r0, r2, #31
   d9042:	bf5c      	itt	pl
   d9044:	2201      	movpl	r2, #1
   d9046:	601a      	strpl	r2, [r3, #0]
   d9048:	4b12      	ldr	r3, [pc, #72]	; (d9094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d904a:	681a      	ldr	r2, [r3, #0]
   d904c:	07d1      	lsls	r1, r2, #31
   d904e:	bf5c      	itt	pl
   d9050:	2201      	movpl	r2, #1
   d9052:	601a      	strpl	r2, [r3, #0]
   d9054:	4b10      	ldr	r3, [pc, #64]	; (d9098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9056:	681a      	ldr	r2, [r3, #0]
   d9058:	07d2      	lsls	r2, r2, #31
   d905a:	bf5c      	itt	pl
   d905c:	2201      	movpl	r2, #1
   d905e:	601a      	strpl	r2, [r3, #0]
   d9060:	4b0e      	ldr	r3, [pc, #56]	; (d909c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9062:	681a      	ldr	r2, [r3, #0]
   d9064:	07d0      	lsls	r0, r2, #31
   d9066:	bf5c      	itt	pl
   d9068:	2201      	movpl	r2, #1
   d906a:	601a      	strpl	r2, [r3, #0]
   d906c:	4b0c      	ldr	r3, [pc, #48]	; (d90a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d906e:	681a      	ldr	r2, [r3, #0]
   d9070:	07d1      	lsls	r1, r2, #31
   d9072:	bf5c      	itt	pl
   d9074:	2201      	movpl	r2, #1
   d9076:	601a      	strpl	r2, [r3, #0]
   d9078:	4b0a      	ldr	r3, [pc, #40]	; (d90a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d907a:	681a      	ldr	r2, [r3, #0]
   d907c:	07d2      	lsls	r2, r2, #31
   d907e:	bf5c      	itt	pl
   d9080:	2201      	movpl	r2, #1
   d9082:	601a      	strpl	r2, [r3, #0]
   d9084:	4770      	bx	lr
   d9086:	bf00      	nop
   d9088:	2003e7bc 	.word	0x2003e7bc
   d908c:	2003e7b8 	.word	0x2003e7b8
   d9090:	2003e7b4 	.word	0x2003e7b4
   d9094:	2003e7b0 	.word	0x2003e7b0
   d9098:	2003e7ac 	.word	0x2003e7ac
   d909c:	2003e7a8 	.word	0x2003e7a8
   d90a0:	2003e7a4 	.word	0x2003e7a4
   d90a4:	2003e7a0 	.word	0x2003e7a0

000d90a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d90a8:	4b24      	ldr	r3, [pc, #144]	; (d913c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d90aa:	681a      	ldr	r2, [r3, #0]
   d90ac:	07d0      	lsls	r0, r2, #31
   d90ae:	bf5c      	itt	pl
   d90b0:	2201      	movpl	r2, #1
   d90b2:	601a      	strpl	r2, [r3, #0]
   d90b4:	4b22      	ldr	r3, [pc, #136]	; (d9140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d90b6:	681a      	ldr	r2, [r3, #0]
   d90b8:	07d1      	lsls	r1, r2, #31
   d90ba:	bf5c      	itt	pl
   d90bc:	2201      	movpl	r2, #1
   d90be:	601a      	strpl	r2, [r3, #0]
   d90c0:	4b20      	ldr	r3, [pc, #128]	; (d9144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d90c2:	681a      	ldr	r2, [r3, #0]
   d90c4:	07d2      	lsls	r2, r2, #31
   d90c6:	bf5c      	itt	pl
   d90c8:	2201      	movpl	r2, #1
   d90ca:	601a      	strpl	r2, [r3, #0]
   d90cc:	4b1e      	ldr	r3, [pc, #120]	; (d9148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d90ce:	681a      	ldr	r2, [r3, #0]
   d90d0:	07d0      	lsls	r0, r2, #31
   d90d2:	bf5c      	itt	pl
   d90d4:	2201      	movpl	r2, #1
   d90d6:	601a      	strpl	r2, [r3, #0]
   d90d8:	4b1c      	ldr	r3, [pc, #112]	; (d914c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d90da:	681a      	ldr	r2, [r3, #0]
   d90dc:	07d1      	lsls	r1, r2, #31
   d90de:	bf5c      	itt	pl
   d90e0:	2201      	movpl	r2, #1
   d90e2:	601a      	strpl	r2, [r3, #0]
   d90e4:	4b1a      	ldr	r3, [pc, #104]	; (d9150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d90e6:	681a      	ldr	r2, [r3, #0]
   d90e8:	07d2      	lsls	r2, r2, #31
   d90ea:	bf5c      	itt	pl
   d90ec:	2201      	movpl	r2, #1
   d90ee:	601a      	strpl	r2, [r3, #0]
   d90f0:	4b18      	ldr	r3, [pc, #96]	; (d9154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d90f2:	681a      	ldr	r2, [r3, #0]
   d90f4:	07d0      	lsls	r0, r2, #31
   d90f6:	bf5c      	itt	pl
   d90f8:	2201      	movpl	r2, #1
   d90fa:	601a      	strpl	r2, [r3, #0]
   d90fc:	4b16      	ldr	r3, [pc, #88]	; (d9158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d90fe:	681a      	ldr	r2, [r3, #0]
   d9100:	07d1      	lsls	r1, r2, #31
   d9102:	bf5c      	itt	pl
   d9104:	2201      	movpl	r2, #1
   d9106:	601a      	strpl	r2, [r3, #0]
   d9108:	4b14      	ldr	r3, [pc, #80]	; (d915c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d910a:	681a      	ldr	r2, [r3, #0]
   d910c:	07d2      	lsls	r2, r2, #31
   d910e:	bf5c      	itt	pl
   d9110:	2201      	movpl	r2, #1
   d9112:	601a      	strpl	r2, [r3, #0]
   d9114:	4b12      	ldr	r3, [pc, #72]	; (d9160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d9116:	681a      	ldr	r2, [r3, #0]
   d9118:	07d0      	lsls	r0, r2, #31
   d911a:	bf5c      	itt	pl
   d911c:	2201      	movpl	r2, #1
   d911e:	601a      	strpl	r2, [r3, #0]
   d9120:	4b10      	ldr	r3, [pc, #64]	; (d9164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d9122:	681a      	ldr	r2, [r3, #0]
   d9124:	07d1      	lsls	r1, r2, #31
   d9126:	bf5c      	itt	pl
   d9128:	2201      	movpl	r2, #1
   d912a:	601a      	strpl	r2, [r3, #0]
   d912c:	4b0e      	ldr	r3, [pc, #56]	; (d9168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d912e:	681a      	ldr	r2, [r3, #0]
   d9130:	07d2      	lsls	r2, r2, #31
   d9132:	bf5c      	itt	pl
   d9134:	2201      	movpl	r2, #1
   d9136:	601a      	strpl	r2, [r3, #0]
   d9138:	4770      	bx	lr
   d913a:	bf00      	nop
   d913c:	2003e7ec 	.word	0x2003e7ec
   d9140:	2003e7e8 	.word	0x2003e7e8
   d9144:	2003e7e4 	.word	0x2003e7e4
   d9148:	2003e7e0 	.word	0x2003e7e0
   d914c:	2003e7dc 	.word	0x2003e7dc
   d9150:	2003e7d8 	.word	0x2003e7d8
   d9154:	2003e7d4 	.word	0x2003e7d4
   d9158:	2003e7d0 	.word	0x2003e7d0
   d915c:	2003e7cc 	.word	0x2003e7cc
   d9160:	2003e7c8 	.word	0x2003e7c8
   d9164:	2003e7c4 	.word	0x2003e7c4
   d9168:	2003e7c0 	.word	0x2003e7c0

000d916c <__aeabi_drsub>:
   d916c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9170:	e002      	b.n	d9178 <__adddf3>
   d9172:	bf00      	nop

000d9174 <__aeabi_dsub>:
   d9174:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9178 <__adddf3>:
   d9178:	b530      	push	{r4, r5, lr}
   d917a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d917e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9182:	ea94 0f05 	teq	r4, r5
   d9186:	bf08      	it	eq
   d9188:	ea90 0f02 	teqeq	r0, r2
   d918c:	bf1f      	itttt	ne
   d918e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9192:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9196:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d919a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d919e:	f000 80e2 	beq.w	d9366 <__adddf3+0x1ee>
   d91a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d91a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d91aa:	bfb8      	it	lt
   d91ac:	426d      	neglt	r5, r5
   d91ae:	dd0c      	ble.n	d91ca <__adddf3+0x52>
   d91b0:	442c      	add	r4, r5
   d91b2:	ea80 0202 	eor.w	r2, r0, r2
   d91b6:	ea81 0303 	eor.w	r3, r1, r3
   d91ba:	ea82 0000 	eor.w	r0, r2, r0
   d91be:	ea83 0101 	eor.w	r1, r3, r1
   d91c2:	ea80 0202 	eor.w	r2, r0, r2
   d91c6:	ea81 0303 	eor.w	r3, r1, r3
   d91ca:	2d36      	cmp	r5, #54	; 0x36
   d91cc:	bf88      	it	hi
   d91ce:	bd30      	pophi	{r4, r5, pc}
   d91d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d91d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d91d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d91dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d91e0:	d002      	beq.n	d91e8 <__adddf3+0x70>
   d91e2:	4240      	negs	r0, r0
   d91e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d91e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d91ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d91f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d91f4:	d002      	beq.n	d91fc <__adddf3+0x84>
   d91f6:	4252      	negs	r2, r2
   d91f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d91fc:	ea94 0f05 	teq	r4, r5
   d9200:	f000 80a7 	beq.w	d9352 <__adddf3+0x1da>
   d9204:	f1a4 0401 	sub.w	r4, r4, #1
   d9208:	f1d5 0e20 	rsbs	lr, r5, #32
   d920c:	db0d      	blt.n	d922a <__adddf3+0xb2>
   d920e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9212:	fa22 f205 	lsr.w	r2, r2, r5
   d9216:	1880      	adds	r0, r0, r2
   d9218:	f141 0100 	adc.w	r1, r1, #0
   d921c:	fa03 f20e 	lsl.w	r2, r3, lr
   d9220:	1880      	adds	r0, r0, r2
   d9222:	fa43 f305 	asr.w	r3, r3, r5
   d9226:	4159      	adcs	r1, r3
   d9228:	e00e      	b.n	d9248 <__adddf3+0xd0>
   d922a:	f1a5 0520 	sub.w	r5, r5, #32
   d922e:	f10e 0e20 	add.w	lr, lr, #32
   d9232:	2a01      	cmp	r2, #1
   d9234:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9238:	bf28      	it	cs
   d923a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d923e:	fa43 f305 	asr.w	r3, r3, r5
   d9242:	18c0      	adds	r0, r0, r3
   d9244:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9248:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d924c:	d507      	bpl.n	d925e <__adddf3+0xe6>
   d924e:	f04f 0e00 	mov.w	lr, #0
   d9252:	f1dc 0c00 	rsbs	ip, ip, #0
   d9256:	eb7e 0000 	sbcs.w	r0, lr, r0
   d925a:	eb6e 0101 	sbc.w	r1, lr, r1
   d925e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9262:	d31b      	bcc.n	d929c <__adddf3+0x124>
   d9264:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9268:	d30c      	bcc.n	d9284 <__adddf3+0x10c>
   d926a:	0849      	lsrs	r1, r1, #1
   d926c:	ea5f 0030 	movs.w	r0, r0, rrx
   d9270:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9274:	f104 0401 	add.w	r4, r4, #1
   d9278:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d927c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9280:	f080 809a 	bcs.w	d93b8 <__adddf3+0x240>
   d9284:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9288:	bf08      	it	eq
   d928a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d928e:	f150 0000 	adcs.w	r0, r0, #0
   d9292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9296:	ea41 0105 	orr.w	r1, r1, r5
   d929a:	bd30      	pop	{r4, r5, pc}
   d929c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d92a0:	4140      	adcs	r0, r0
   d92a2:	eb41 0101 	adc.w	r1, r1, r1
   d92a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d92aa:	f1a4 0401 	sub.w	r4, r4, #1
   d92ae:	d1e9      	bne.n	d9284 <__adddf3+0x10c>
   d92b0:	f091 0f00 	teq	r1, #0
   d92b4:	bf04      	itt	eq
   d92b6:	4601      	moveq	r1, r0
   d92b8:	2000      	moveq	r0, #0
   d92ba:	fab1 f381 	clz	r3, r1
   d92be:	bf08      	it	eq
   d92c0:	3320      	addeq	r3, #32
   d92c2:	f1a3 030b 	sub.w	r3, r3, #11
   d92c6:	f1b3 0220 	subs.w	r2, r3, #32
   d92ca:	da0c      	bge.n	d92e6 <__adddf3+0x16e>
   d92cc:	320c      	adds	r2, #12
   d92ce:	dd08      	ble.n	d92e2 <__adddf3+0x16a>
   d92d0:	f102 0c14 	add.w	ip, r2, #20
   d92d4:	f1c2 020c 	rsb	r2, r2, #12
   d92d8:	fa01 f00c 	lsl.w	r0, r1, ip
   d92dc:	fa21 f102 	lsr.w	r1, r1, r2
   d92e0:	e00c      	b.n	d92fc <__adddf3+0x184>
   d92e2:	f102 0214 	add.w	r2, r2, #20
   d92e6:	bfd8      	it	le
   d92e8:	f1c2 0c20 	rsble	ip, r2, #32
   d92ec:	fa01 f102 	lsl.w	r1, r1, r2
   d92f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d92f4:	bfdc      	itt	le
   d92f6:	ea41 010c 	orrle.w	r1, r1, ip
   d92fa:	4090      	lslle	r0, r2
   d92fc:	1ae4      	subs	r4, r4, r3
   d92fe:	bfa2      	ittt	ge
   d9300:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9304:	4329      	orrge	r1, r5
   d9306:	bd30      	popge	{r4, r5, pc}
   d9308:	ea6f 0404 	mvn.w	r4, r4
   d930c:	3c1f      	subs	r4, #31
   d930e:	da1c      	bge.n	d934a <__adddf3+0x1d2>
   d9310:	340c      	adds	r4, #12
   d9312:	dc0e      	bgt.n	d9332 <__adddf3+0x1ba>
   d9314:	f104 0414 	add.w	r4, r4, #20
   d9318:	f1c4 0220 	rsb	r2, r4, #32
   d931c:	fa20 f004 	lsr.w	r0, r0, r4
   d9320:	fa01 f302 	lsl.w	r3, r1, r2
   d9324:	ea40 0003 	orr.w	r0, r0, r3
   d9328:	fa21 f304 	lsr.w	r3, r1, r4
   d932c:	ea45 0103 	orr.w	r1, r5, r3
   d9330:	bd30      	pop	{r4, r5, pc}
   d9332:	f1c4 040c 	rsb	r4, r4, #12
   d9336:	f1c4 0220 	rsb	r2, r4, #32
   d933a:	fa20 f002 	lsr.w	r0, r0, r2
   d933e:	fa01 f304 	lsl.w	r3, r1, r4
   d9342:	ea40 0003 	orr.w	r0, r0, r3
   d9346:	4629      	mov	r1, r5
   d9348:	bd30      	pop	{r4, r5, pc}
   d934a:	fa21 f004 	lsr.w	r0, r1, r4
   d934e:	4629      	mov	r1, r5
   d9350:	bd30      	pop	{r4, r5, pc}
   d9352:	f094 0f00 	teq	r4, #0
   d9356:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d935a:	bf06      	itte	eq
   d935c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9360:	3401      	addeq	r4, #1
   d9362:	3d01      	subne	r5, #1
   d9364:	e74e      	b.n	d9204 <__adddf3+0x8c>
   d9366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d936a:	bf18      	it	ne
   d936c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9370:	d029      	beq.n	d93c6 <__adddf3+0x24e>
   d9372:	ea94 0f05 	teq	r4, r5
   d9376:	bf08      	it	eq
   d9378:	ea90 0f02 	teqeq	r0, r2
   d937c:	d005      	beq.n	d938a <__adddf3+0x212>
   d937e:	ea54 0c00 	orrs.w	ip, r4, r0
   d9382:	bf04      	itt	eq
   d9384:	4619      	moveq	r1, r3
   d9386:	4610      	moveq	r0, r2
   d9388:	bd30      	pop	{r4, r5, pc}
   d938a:	ea91 0f03 	teq	r1, r3
   d938e:	bf1e      	ittt	ne
   d9390:	2100      	movne	r1, #0
   d9392:	2000      	movne	r0, #0
   d9394:	bd30      	popne	{r4, r5, pc}
   d9396:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d939a:	d105      	bne.n	d93a8 <__adddf3+0x230>
   d939c:	0040      	lsls	r0, r0, #1
   d939e:	4149      	adcs	r1, r1
   d93a0:	bf28      	it	cs
   d93a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d93a6:	bd30      	pop	{r4, r5, pc}
   d93a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d93ac:	bf3c      	itt	cc
   d93ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d93b2:	bd30      	popcc	{r4, r5, pc}
   d93b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d93b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d93bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d93c0:	f04f 0000 	mov.w	r0, #0
   d93c4:	bd30      	pop	{r4, r5, pc}
   d93c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d93ca:	bf1a      	itte	ne
   d93cc:	4619      	movne	r1, r3
   d93ce:	4610      	movne	r0, r2
   d93d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d93d4:	bf1c      	itt	ne
   d93d6:	460b      	movne	r3, r1
   d93d8:	4602      	movne	r2, r0
   d93da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d93de:	bf06      	itte	eq
   d93e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d93e4:	ea91 0f03 	teqeq	r1, r3
   d93e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d93ec:	bd30      	pop	{r4, r5, pc}
   d93ee:	bf00      	nop

000d93f0 <__aeabi_ui2d>:
   d93f0:	f090 0f00 	teq	r0, #0
   d93f4:	bf04      	itt	eq
   d93f6:	2100      	moveq	r1, #0
   d93f8:	4770      	bxeq	lr
   d93fa:	b530      	push	{r4, r5, lr}
   d93fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9400:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9404:	f04f 0500 	mov.w	r5, #0
   d9408:	f04f 0100 	mov.w	r1, #0
   d940c:	e750      	b.n	d92b0 <__adddf3+0x138>
   d940e:	bf00      	nop

000d9410 <__aeabi_i2d>:
   d9410:	f090 0f00 	teq	r0, #0
   d9414:	bf04      	itt	eq
   d9416:	2100      	moveq	r1, #0
   d9418:	4770      	bxeq	lr
   d941a:	b530      	push	{r4, r5, lr}
   d941c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9420:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9424:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9428:	bf48      	it	mi
   d942a:	4240      	negmi	r0, r0
   d942c:	f04f 0100 	mov.w	r1, #0
   d9430:	e73e      	b.n	d92b0 <__adddf3+0x138>
   d9432:	bf00      	nop

000d9434 <__aeabi_f2d>:
   d9434:	0042      	lsls	r2, r0, #1
   d9436:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d943a:	ea4f 0131 	mov.w	r1, r1, rrx
   d943e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9442:	bf1f      	itttt	ne
   d9444:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9448:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d944c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9450:	4770      	bxne	lr
   d9452:	f092 0f00 	teq	r2, #0
   d9456:	bf14      	ite	ne
   d9458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d945c:	4770      	bxeq	lr
   d945e:	b530      	push	{r4, r5, lr}
   d9460:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d946c:	e720      	b.n	d92b0 <__adddf3+0x138>
   d946e:	bf00      	nop

000d9470 <__aeabi_ul2d>:
   d9470:	ea50 0201 	orrs.w	r2, r0, r1
   d9474:	bf08      	it	eq
   d9476:	4770      	bxeq	lr
   d9478:	b530      	push	{r4, r5, lr}
   d947a:	f04f 0500 	mov.w	r5, #0
   d947e:	e00a      	b.n	d9496 <__aeabi_l2d+0x16>

000d9480 <__aeabi_l2d>:
   d9480:	ea50 0201 	orrs.w	r2, r0, r1
   d9484:	bf08      	it	eq
   d9486:	4770      	bxeq	lr
   d9488:	b530      	push	{r4, r5, lr}
   d948a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d948e:	d502      	bpl.n	d9496 <__aeabi_l2d+0x16>
   d9490:	4240      	negs	r0, r0
   d9492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9496:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d949a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d949e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d94a2:	f43f aedc 	beq.w	d925e <__adddf3+0xe6>
   d94a6:	f04f 0203 	mov.w	r2, #3
   d94aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94ae:	bf18      	it	ne
   d94b0:	3203      	addne	r2, #3
   d94b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94b6:	bf18      	it	ne
   d94b8:	3203      	addne	r2, #3
   d94ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d94be:	f1c2 0320 	rsb	r3, r2, #32
   d94c2:	fa00 fc03 	lsl.w	ip, r0, r3
   d94c6:	fa20 f002 	lsr.w	r0, r0, r2
   d94ca:	fa01 fe03 	lsl.w	lr, r1, r3
   d94ce:	ea40 000e 	orr.w	r0, r0, lr
   d94d2:	fa21 f102 	lsr.w	r1, r1, r2
   d94d6:	4414      	add	r4, r2
   d94d8:	e6c1      	b.n	d925e <__adddf3+0xe6>
   d94da:	bf00      	nop

000d94dc <__aeabi_dmul>:
   d94dc:	b570      	push	{r4, r5, r6, lr}
   d94de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d94e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d94e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d94ea:	bf1d      	ittte	ne
   d94ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d94f0:	ea94 0f0c 	teqne	r4, ip
   d94f4:	ea95 0f0c 	teqne	r5, ip
   d94f8:	f000 f8de 	bleq	d96b8 <__aeabi_dmul+0x1dc>
   d94fc:	442c      	add	r4, r5
   d94fe:	ea81 0603 	eor.w	r6, r1, r3
   d9502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d950a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d950e:	bf18      	it	ne
   d9510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d951c:	d038      	beq.n	d9590 <__aeabi_dmul+0xb4>
   d951e:	fba0 ce02 	umull	ip, lr, r0, r2
   d9522:	f04f 0500 	mov.w	r5, #0
   d9526:	fbe1 e502 	umlal	lr, r5, r1, r2
   d952a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d952e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9532:	f04f 0600 	mov.w	r6, #0
   d9536:	fbe1 5603 	umlal	r5, r6, r1, r3
   d953a:	f09c 0f00 	teq	ip, #0
   d953e:	bf18      	it	ne
   d9540:	f04e 0e01 	orrne.w	lr, lr, #1
   d9544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d954c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9550:	d204      	bcs.n	d955c <__aeabi_dmul+0x80>
   d9552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9556:	416d      	adcs	r5, r5
   d9558:	eb46 0606 	adc.w	r6, r6, r6
   d955c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d956c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9574:	bf88      	it	hi
   d9576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d957a:	d81e      	bhi.n	d95ba <__aeabi_dmul+0xde>
   d957c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9580:	bf08      	it	eq
   d9582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9586:	f150 0000 	adcs.w	r0, r0, #0
   d958a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d958e:	bd70      	pop	{r4, r5, r6, pc}
   d9590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9594:	ea46 0101 	orr.w	r1, r6, r1
   d9598:	ea40 0002 	orr.w	r0, r0, r2
   d959c:	ea81 0103 	eor.w	r1, r1, r3
   d95a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d95a4:	bfc2      	ittt	gt
   d95a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d95aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d95ae:	bd70      	popgt	{r4, r5, r6, pc}
   d95b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95b4:	f04f 0e00 	mov.w	lr, #0
   d95b8:	3c01      	subs	r4, #1
   d95ba:	f300 80ab 	bgt.w	d9714 <__aeabi_dmul+0x238>
   d95be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d95c2:	bfde      	ittt	le
   d95c4:	2000      	movle	r0, #0
   d95c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d95ca:	bd70      	pople	{r4, r5, r6, pc}
   d95cc:	f1c4 0400 	rsb	r4, r4, #0
   d95d0:	3c20      	subs	r4, #32
   d95d2:	da35      	bge.n	d9640 <__aeabi_dmul+0x164>
   d95d4:	340c      	adds	r4, #12
   d95d6:	dc1b      	bgt.n	d9610 <__aeabi_dmul+0x134>
   d95d8:	f104 0414 	add.w	r4, r4, #20
   d95dc:	f1c4 0520 	rsb	r5, r4, #32
   d95e0:	fa00 f305 	lsl.w	r3, r0, r5
   d95e4:	fa20 f004 	lsr.w	r0, r0, r4
   d95e8:	fa01 f205 	lsl.w	r2, r1, r5
   d95ec:	ea40 0002 	orr.w	r0, r0, r2
   d95f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d95f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d95f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d95fc:	fa21 f604 	lsr.w	r6, r1, r4
   d9600:	eb42 0106 	adc.w	r1, r2, r6
   d9604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9608:	bf08      	it	eq
   d960a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d960e:	bd70      	pop	{r4, r5, r6, pc}
   d9610:	f1c4 040c 	rsb	r4, r4, #12
   d9614:	f1c4 0520 	rsb	r5, r4, #32
   d9618:	fa00 f304 	lsl.w	r3, r0, r4
   d961c:	fa20 f005 	lsr.w	r0, r0, r5
   d9620:	fa01 f204 	lsl.w	r2, r1, r4
   d9624:	ea40 0002 	orr.w	r0, r0, r2
   d9628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d962c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9630:	f141 0100 	adc.w	r1, r1, #0
   d9634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9638:	bf08      	it	eq
   d963a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d963e:	bd70      	pop	{r4, r5, r6, pc}
   d9640:	f1c4 0520 	rsb	r5, r4, #32
   d9644:	fa00 f205 	lsl.w	r2, r0, r5
   d9648:	ea4e 0e02 	orr.w	lr, lr, r2
   d964c:	fa20 f304 	lsr.w	r3, r0, r4
   d9650:	fa01 f205 	lsl.w	r2, r1, r5
   d9654:	ea43 0302 	orr.w	r3, r3, r2
   d9658:	fa21 f004 	lsr.w	r0, r1, r4
   d965c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9660:	fa21 f204 	lsr.w	r2, r1, r4
   d9664:	ea20 0002 	bic.w	r0, r0, r2
   d9668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d966c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9670:	bf08      	it	eq
   d9672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9676:	bd70      	pop	{r4, r5, r6, pc}
   d9678:	f094 0f00 	teq	r4, #0
   d967c:	d10f      	bne.n	d969e <__aeabi_dmul+0x1c2>
   d967e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9682:	0040      	lsls	r0, r0, #1
   d9684:	eb41 0101 	adc.w	r1, r1, r1
   d9688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d968c:	bf08      	it	eq
   d968e:	3c01      	subeq	r4, #1
   d9690:	d0f7      	beq.n	d9682 <__aeabi_dmul+0x1a6>
   d9692:	ea41 0106 	orr.w	r1, r1, r6
   d9696:	f095 0f00 	teq	r5, #0
   d969a:	bf18      	it	ne
   d969c:	4770      	bxne	lr
   d969e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d96a2:	0052      	lsls	r2, r2, #1
   d96a4:	eb43 0303 	adc.w	r3, r3, r3
   d96a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d96ac:	bf08      	it	eq
   d96ae:	3d01      	subeq	r5, #1
   d96b0:	d0f7      	beq.n	d96a2 <__aeabi_dmul+0x1c6>
   d96b2:	ea43 0306 	orr.w	r3, r3, r6
   d96b6:	4770      	bx	lr
   d96b8:	ea94 0f0c 	teq	r4, ip
   d96bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d96c0:	bf18      	it	ne
   d96c2:	ea95 0f0c 	teqne	r5, ip
   d96c6:	d00c      	beq.n	d96e2 <__aeabi_dmul+0x206>
   d96c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d96cc:	bf18      	it	ne
   d96ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d96d2:	d1d1      	bne.n	d9678 <__aeabi_dmul+0x19c>
   d96d4:	ea81 0103 	eor.w	r1, r1, r3
   d96d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d96dc:	f04f 0000 	mov.w	r0, #0
   d96e0:	bd70      	pop	{r4, r5, r6, pc}
   d96e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d96e6:	bf06      	itte	eq
   d96e8:	4610      	moveq	r0, r2
   d96ea:	4619      	moveq	r1, r3
   d96ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d96f0:	d019      	beq.n	d9726 <__aeabi_dmul+0x24a>
   d96f2:	ea94 0f0c 	teq	r4, ip
   d96f6:	d102      	bne.n	d96fe <__aeabi_dmul+0x222>
   d96f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d96fc:	d113      	bne.n	d9726 <__aeabi_dmul+0x24a>
   d96fe:	ea95 0f0c 	teq	r5, ip
   d9702:	d105      	bne.n	d9710 <__aeabi_dmul+0x234>
   d9704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9708:	bf1c      	itt	ne
   d970a:	4610      	movne	r0, r2
   d970c:	4619      	movne	r1, r3
   d970e:	d10a      	bne.n	d9726 <__aeabi_dmul+0x24a>
   d9710:	ea81 0103 	eor.w	r1, r1, r3
   d9714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d971c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9720:	f04f 0000 	mov.w	r0, #0
   d9724:	bd70      	pop	{r4, r5, r6, pc}
   d9726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d972a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d972e:	bd70      	pop	{r4, r5, r6, pc}

000d9730 <__aeabi_ddiv>:
   d9730:	b570      	push	{r4, r5, r6, lr}
   d9732:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d973a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d973e:	bf1d      	ittte	ne
   d9740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9744:	ea94 0f0c 	teqne	r4, ip
   d9748:	ea95 0f0c 	teqne	r5, ip
   d974c:	f000 f8a7 	bleq	d989e <__aeabi_ddiv+0x16e>
   d9750:	eba4 0405 	sub.w	r4, r4, r5
   d9754:	ea81 0e03 	eor.w	lr, r1, r3
   d9758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d975c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9760:	f000 8088 	beq.w	d9874 <__aeabi_ddiv+0x144>
   d9764:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d976c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9774:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d977c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9780:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9788:	429d      	cmp	r5, r3
   d978a:	bf08      	it	eq
   d978c:	4296      	cmpeq	r6, r2
   d978e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9792:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9796:	d202      	bcs.n	d979e <__aeabi_ddiv+0x6e>
   d9798:	085b      	lsrs	r3, r3, #1
   d979a:	ea4f 0232 	mov.w	r2, r2, rrx
   d979e:	1ab6      	subs	r6, r6, r2
   d97a0:	eb65 0503 	sbc.w	r5, r5, r3
   d97a4:	085b      	lsrs	r3, r3, #1
   d97a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d97aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d97ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d97b2:	ebb6 0e02 	subs.w	lr, r6, r2
   d97b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97ba:	bf22      	ittt	cs
   d97bc:	1ab6      	subcs	r6, r6, r2
   d97be:	4675      	movcs	r5, lr
   d97c0:	ea40 000c 	orrcs.w	r0, r0, ip
   d97c4:	085b      	lsrs	r3, r3, #1
   d97c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d97ca:	ebb6 0e02 	subs.w	lr, r6, r2
   d97ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97d2:	bf22      	ittt	cs
   d97d4:	1ab6      	subcs	r6, r6, r2
   d97d6:	4675      	movcs	r5, lr
   d97d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d97dc:	085b      	lsrs	r3, r3, #1
   d97de:	ea4f 0232 	mov.w	r2, r2, rrx
   d97e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d97e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97ea:	bf22      	ittt	cs
   d97ec:	1ab6      	subcs	r6, r6, r2
   d97ee:	4675      	movcs	r5, lr
   d97f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d97f4:	085b      	lsrs	r3, r3, #1
   d97f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d97fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d97fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9802:	bf22      	ittt	cs
   d9804:	1ab6      	subcs	r6, r6, r2
   d9806:	4675      	movcs	r5, lr
   d9808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d980c:	ea55 0e06 	orrs.w	lr, r5, r6
   d9810:	d018      	beq.n	d9844 <__aeabi_ddiv+0x114>
   d9812:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d981a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d981e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d982a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d982e:	d1c0      	bne.n	d97b2 <__aeabi_ddiv+0x82>
   d9830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9834:	d10b      	bne.n	d984e <__aeabi_ddiv+0x11e>
   d9836:	ea41 0100 	orr.w	r1, r1, r0
   d983a:	f04f 0000 	mov.w	r0, #0
   d983e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9842:	e7b6      	b.n	d97b2 <__aeabi_ddiv+0x82>
   d9844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9848:	bf04      	itt	eq
   d984a:	4301      	orreq	r1, r0
   d984c:	2000      	moveq	r0, #0
   d984e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9852:	bf88      	it	hi
   d9854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9858:	f63f aeaf 	bhi.w	d95ba <__aeabi_dmul+0xde>
   d985c:	ebb5 0c03 	subs.w	ip, r5, r3
   d9860:	bf04      	itt	eq
   d9862:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d986a:	f150 0000 	adcs.w	r0, r0, #0
   d986e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9872:	bd70      	pop	{r4, r5, r6, pc}
   d9874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d987c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9880:	bfc2      	ittt	gt
   d9882:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d988a:	bd70      	popgt	{r4, r5, r6, pc}
   d988c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9890:	f04f 0e00 	mov.w	lr, #0
   d9894:	3c01      	subs	r4, #1
   d9896:	e690      	b.n	d95ba <__aeabi_dmul+0xde>
   d9898:	ea45 0e06 	orr.w	lr, r5, r6
   d989c:	e68d      	b.n	d95ba <__aeabi_dmul+0xde>
   d989e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d98a2:	ea94 0f0c 	teq	r4, ip
   d98a6:	bf08      	it	eq
   d98a8:	ea95 0f0c 	teqeq	r5, ip
   d98ac:	f43f af3b 	beq.w	d9726 <__aeabi_dmul+0x24a>
   d98b0:	ea94 0f0c 	teq	r4, ip
   d98b4:	d10a      	bne.n	d98cc <__aeabi_ddiv+0x19c>
   d98b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d98ba:	f47f af34 	bne.w	d9726 <__aeabi_dmul+0x24a>
   d98be:	ea95 0f0c 	teq	r5, ip
   d98c2:	f47f af25 	bne.w	d9710 <__aeabi_dmul+0x234>
   d98c6:	4610      	mov	r0, r2
   d98c8:	4619      	mov	r1, r3
   d98ca:	e72c      	b.n	d9726 <__aeabi_dmul+0x24a>
   d98cc:	ea95 0f0c 	teq	r5, ip
   d98d0:	d106      	bne.n	d98e0 <__aeabi_ddiv+0x1b0>
   d98d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d98d6:	f43f aefd 	beq.w	d96d4 <__aeabi_dmul+0x1f8>
   d98da:	4610      	mov	r0, r2
   d98dc:	4619      	mov	r1, r3
   d98de:	e722      	b.n	d9726 <__aeabi_dmul+0x24a>
   d98e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d98e4:	bf18      	it	ne
   d98e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d98ea:	f47f aec5 	bne.w	d9678 <__aeabi_dmul+0x19c>
   d98ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d98f2:	f47f af0d 	bne.w	d9710 <__aeabi_dmul+0x234>
   d98f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d98fa:	f47f aeeb 	bne.w	d96d4 <__aeabi_dmul+0x1f8>
   d98fe:	e712      	b.n	d9726 <__aeabi_dmul+0x24a>

000d9900 <__aeabi_d2iz>:
   d9900:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9908:	d215      	bcs.n	d9936 <__aeabi_d2iz+0x36>
   d990a:	d511      	bpl.n	d9930 <__aeabi_d2iz+0x30>
   d990c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9914:	d912      	bls.n	d993c <__aeabi_d2iz+0x3c>
   d9916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d991a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d991e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9922:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9926:	fa23 f002 	lsr.w	r0, r3, r2
   d992a:	bf18      	it	ne
   d992c:	4240      	negne	r0, r0
   d992e:	4770      	bx	lr
   d9930:	f04f 0000 	mov.w	r0, #0
   d9934:	4770      	bx	lr
   d9936:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d993a:	d105      	bne.n	d9948 <__aeabi_d2iz+0x48>
   d993c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9940:	bf08      	it	eq
   d9942:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9946:	4770      	bx	lr
   d9948:	f04f 0000 	mov.w	r0, #0
   d994c:	4770      	bx	lr
   d994e:	bf00      	nop

000d9950 <__aeabi_d2f>:
   d9950:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9954:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9958:	bf24      	itt	cs
   d995a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d995e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9962:	d90d      	bls.n	d9980 <__aeabi_d2f+0x30>
   d9964:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9968:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d996c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9970:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9974:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9978:	bf08      	it	eq
   d997a:	f020 0001 	biceq.w	r0, r0, #1
   d997e:	4770      	bx	lr
   d9980:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9984:	d121      	bne.n	d99ca <__aeabi_d2f+0x7a>
   d9986:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d998a:	bfbc      	itt	lt
   d998c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9990:	4770      	bxlt	lr
   d9992:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9996:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d999a:	f1c2 0218 	rsb	r2, r2, #24
   d999e:	f1c2 0c20 	rsb	ip, r2, #32
   d99a2:	fa10 f30c 	lsls.w	r3, r0, ip
   d99a6:	fa20 f002 	lsr.w	r0, r0, r2
   d99aa:	bf18      	it	ne
   d99ac:	f040 0001 	orrne.w	r0, r0, #1
   d99b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d99b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d99b8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d99bc:	ea40 000c 	orr.w	r0, r0, ip
   d99c0:	fa23 f302 	lsr.w	r3, r3, r2
   d99c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d99c8:	e7cc      	b.n	d9964 <__aeabi_d2f+0x14>
   d99ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d99ce:	d107      	bne.n	d99e0 <__aeabi_d2f+0x90>
   d99d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d99d4:	bf1e      	ittt	ne
   d99d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d99da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d99de:	4770      	bxne	lr
   d99e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d99e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d99e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d99ec:	4770      	bx	lr
   d99ee:	bf00      	nop

000d99f0 <__cxa_atexit>:
   d99f0:	b510      	push	{r4, lr}
   d99f2:	4c05      	ldr	r4, [pc, #20]	; (d9a08 <__cxa_atexit+0x18>)
   d99f4:	4613      	mov	r3, r2
   d99f6:	b12c      	cbz	r4, d9a04 <__cxa_atexit+0x14>
   d99f8:	460a      	mov	r2, r1
   d99fa:	4601      	mov	r1, r0
   d99fc:	2002      	movs	r0, #2
   d99fe:	f3af 8000 	nop.w
   d9a02:	bd10      	pop	{r4, pc}
   d9a04:	4620      	mov	r0, r4
   d9a06:	bd10      	pop	{r4, pc}
   d9a08:	00000000 	.word	0x00000000

000d9a0c <memcmp>:
   d9a0c:	b510      	push	{r4, lr}
   d9a0e:	3901      	subs	r1, #1
   d9a10:	4402      	add	r2, r0
   d9a12:	4290      	cmp	r0, r2
   d9a14:	d007      	beq.n	d9a26 <memcmp+0x1a>
   d9a16:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9a1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9a1e:	42a3      	cmp	r3, r4
   d9a20:	d0f7      	beq.n	d9a12 <memcmp+0x6>
   d9a22:	1b18      	subs	r0, r3, r4
   d9a24:	bd10      	pop	{r4, pc}
   d9a26:	2000      	movs	r0, #0
   d9a28:	bd10      	pop	{r4, pc}

000d9a2a <memcpy>:
   d9a2a:	b510      	push	{r4, lr}
   d9a2c:	1e43      	subs	r3, r0, #1
   d9a2e:	440a      	add	r2, r1
   d9a30:	4291      	cmp	r1, r2
   d9a32:	d004      	beq.n	d9a3e <memcpy+0x14>
   d9a34:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9a38:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9a3c:	e7f8      	b.n	d9a30 <memcpy+0x6>
   d9a3e:	bd10      	pop	{r4, pc}

000d9a40 <memmove>:
   d9a40:	4288      	cmp	r0, r1
   d9a42:	b510      	push	{r4, lr}
   d9a44:	eb01 0302 	add.w	r3, r1, r2
   d9a48:	d801      	bhi.n	d9a4e <memmove+0xe>
   d9a4a:	1e42      	subs	r2, r0, #1
   d9a4c:	e00b      	b.n	d9a66 <memmove+0x26>
   d9a4e:	4298      	cmp	r0, r3
   d9a50:	d2fb      	bcs.n	d9a4a <memmove+0xa>
   d9a52:	1881      	adds	r1, r0, r2
   d9a54:	1ad2      	subs	r2, r2, r3
   d9a56:	42d3      	cmn	r3, r2
   d9a58:	d004      	beq.n	d9a64 <memmove+0x24>
   d9a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9a5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d9a62:	e7f8      	b.n	d9a56 <memmove+0x16>
   d9a64:	bd10      	pop	{r4, pc}
   d9a66:	4299      	cmp	r1, r3
   d9a68:	d004      	beq.n	d9a74 <memmove+0x34>
   d9a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9a6e:	f802 4f01 	strb.w	r4, [r2, #1]!
   d9a72:	e7f8      	b.n	d9a66 <memmove+0x26>
   d9a74:	bd10      	pop	{r4, pc}

000d9a76 <memset>:
   d9a76:	4402      	add	r2, r0
   d9a78:	4603      	mov	r3, r0
   d9a7a:	4293      	cmp	r3, r2
   d9a7c:	d002      	beq.n	d9a84 <memset+0xe>
   d9a7e:	f803 1b01 	strb.w	r1, [r3], #1
   d9a82:	e7fa      	b.n	d9a7a <memset+0x4>
   d9a84:	4770      	bx	lr
	...

000d9a88 <srand>:
   d9a88:	b538      	push	{r3, r4, r5, lr}
   d9a8a:	4b12      	ldr	r3, [pc, #72]	; (d9ad4 <srand+0x4c>)
   d9a8c:	681c      	ldr	r4, [r3, #0]
   d9a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9a90:	4605      	mov	r5, r0
   d9a92:	b9d3      	cbnz	r3, d9aca <srand+0x42>
   d9a94:	2018      	movs	r0, #24
   d9a96:	f7fb fdf5 	bl	d5684 <malloc>
   d9a9a:	f243 330e 	movw	r3, #13070	; 0x330e
   d9a9e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9aa0:	8003      	strh	r3, [r0, #0]
   d9aa2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9aa6:	8043      	strh	r3, [r0, #2]
   d9aa8:	f241 2334 	movw	r3, #4660	; 0x1234
   d9aac:	8083      	strh	r3, [r0, #4]
   d9aae:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9ab2:	80c3      	strh	r3, [r0, #6]
   d9ab4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9ab8:	8103      	strh	r3, [r0, #8]
   d9aba:	2305      	movs	r3, #5
   d9abc:	8143      	strh	r3, [r0, #10]
   d9abe:	230b      	movs	r3, #11
   d9ac0:	8183      	strh	r3, [r0, #12]
   d9ac2:	2201      	movs	r2, #1
   d9ac4:	2300      	movs	r3, #0
   d9ac6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9aca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9acc:	2200      	movs	r2, #0
   d9ace:	611d      	str	r5, [r3, #16]
   d9ad0:	615a      	str	r2, [r3, #20]
   d9ad2:	bd38      	pop	{r3, r4, r5, pc}
   d9ad4:	2003e280 	.word	0x2003e280

000d9ad8 <strchr>:
   d9ad8:	b2c9      	uxtb	r1, r1
   d9ada:	4603      	mov	r3, r0
   d9adc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9ae0:	b11a      	cbz	r2, d9aea <strchr+0x12>
   d9ae2:	4291      	cmp	r1, r2
   d9ae4:	d1f9      	bne.n	d9ada <strchr+0x2>
   d9ae6:	4618      	mov	r0, r3
   d9ae8:	4770      	bx	lr
   d9aea:	2900      	cmp	r1, #0
   d9aec:	bf0c      	ite	eq
   d9aee:	4618      	moveq	r0, r3
   d9af0:	2000      	movne	r0, #0
   d9af2:	4770      	bx	lr

000d9af4 <strchrnul>:
   d9af4:	b510      	push	{r4, lr}
   d9af6:	4604      	mov	r4, r0
   d9af8:	f7ff ffee 	bl	d9ad8 <strchr>
   d9afc:	b918      	cbnz	r0, d9b06 <strchrnul+0x12>
   d9afe:	4620      	mov	r0, r4
   d9b00:	f000 f827 	bl	d9b52 <strlen>
   d9b04:	4420      	add	r0, r4
   d9b06:	bd10      	pop	{r4, pc}

000d9b08 <strcmp>:
   d9b08:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9b10:	2a01      	cmp	r2, #1
   d9b12:	bf28      	it	cs
   d9b14:	429a      	cmpcs	r2, r3
   d9b16:	d0f7      	beq.n	d9b08 <strcmp>
   d9b18:	1ad0      	subs	r0, r2, r3
   d9b1a:	4770      	bx	lr

000d9b1c <strdup>:
   d9b1c:	4b02      	ldr	r3, [pc, #8]	; (d9b28 <strdup+0xc>)
   d9b1e:	4601      	mov	r1, r0
   d9b20:	6818      	ldr	r0, [r3, #0]
   d9b22:	f000 b803 	b.w	d9b2c <_strdup_r>
   d9b26:	bf00      	nop
   d9b28:	2003e280 	.word	0x2003e280

000d9b2c <_strdup_r>:
   d9b2c:	b570      	push	{r4, r5, r6, lr}
   d9b2e:	4606      	mov	r6, r0
   d9b30:	4608      	mov	r0, r1
   d9b32:	460c      	mov	r4, r1
   d9b34:	f000 f80d 	bl	d9b52 <strlen>
   d9b38:	1c45      	adds	r5, r0, #1
   d9b3a:	4629      	mov	r1, r5
   d9b3c:	4630      	mov	r0, r6
   d9b3e:	f7fb fdc9 	bl	d56d4 <_malloc_r>
   d9b42:	4606      	mov	r6, r0
   d9b44:	b118      	cbz	r0, d9b4e <_strdup_r+0x22>
   d9b46:	462a      	mov	r2, r5
   d9b48:	4621      	mov	r1, r4
   d9b4a:	f7ff ff6e 	bl	d9a2a <memcpy>
   d9b4e:	4630      	mov	r0, r6
   d9b50:	bd70      	pop	{r4, r5, r6, pc}

000d9b52 <strlen>:
   d9b52:	4603      	mov	r3, r0
   d9b54:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9b58:	2a00      	cmp	r2, #0
   d9b5a:	d1fb      	bne.n	d9b54 <strlen+0x2>
   d9b5c:	1a18      	subs	r0, r3, r0
   d9b5e:	3801      	subs	r0, #1
   d9b60:	4770      	bx	lr

000d9b62 <strncmp>:
   d9b62:	b530      	push	{r4, r5, lr}
   d9b64:	b182      	cbz	r2, d9b88 <strncmp+0x26>
   d9b66:	1e45      	subs	r5, r0, #1
   d9b68:	3901      	subs	r1, #1
   d9b6a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9b6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9b72:	42a3      	cmp	r3, r4
   d9b74:	d106      	bne.n	d9b84 <strncmp+0x22>
   d9b76:	43ec      	mvns	r4, r5
   d9b78:	4414      	add	r4, r2
   d9b7a:	42e0      	cmn	r0, r4
   d9b7c:	d001      	beq.n	d9b82 <strncmp+0x20>
   d9b7e:	2b00      	cmp	r3, #0
   d9b80:	d1f3      	bne.n	d9b6a <strncmp+0x8>
   d9b82:	461c      	mov	r4, r3
   d9b84:	1b18      	subs	r0, r3, r4
   d9b86:	bd30      	pop	{r4, r5, pc}
   d9b88:	4610      	mov	r0, r2
   d9b8a:	bd30      	pop	{r4, r5, pc}

000d9b8c <strnlen>:
   d9b8c:	b510      	push	{r4, lr}
   d9b8e:	4603      	mov	r3, r0
   d9b90:	4401      	add	r1, r0
   d9b92:	428b      	cmp	r3, r1
   d9b94:	d004      	beq.n	d9ba0 <strnlen+0x14>
   d9b96:	781a      	ldrb	r2, [r3, #0]
   d9b98:	1c5c      	adds	r4, r3, #1
   d9b9a:	b10a      	cbz	r2, d9ba0 <strnlen+0x14>
   d9b9c:	4623      	mov	r3, r4
   d9b9e:	e7f8      	b.n	d9b92 <strnlen+0x6>
   d9ba0:	1a18      	subs	r0, r3, r0
   d9ba2:	bd10      	pop	{r4, pc}

000d9ba4 <strrchr>:
   d9ba4:	b538      	push	{r3, r4, r5, lr}
   d9ba6:	4603      	mov	r3, r0
   d9ba8:	460d      	mov	r5, r1
   d9baa:	b141      	cbz	r1, d9bbe <strrchr+0x1a>
   d9bac:	2400      	movs	r4, #0
   d9bae:	4629      	mov	r1, r5
   d9bb0:	4618      	mov	r0, r3
   d9bb2:	f7ff ff91 	bl	d9ad8 <strchr>
   d9bb6:	b130      	cbz	r0, d9bc6 <strrchr+0x22>
   d9bb8:	1c43      	adds	r3, r0, #1
   d9bba:	4604      	mov	r4, r0
   d9bbc:	e7f7      	b.n	d9bae <strrchr+0xa>
   d9bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9bc2:	f7ff bf89 	b.w	d9ad8 <strchr>
   d9bc6:	4620      	mov	r0, r4
   d9bc8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9bcc <_strtol_r>:
   d9bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9bd0:	4680      	mov	r8, r0
   d9bd2:	4840      	ldr	r0, [pc, #256]	; (d9cd4 <_strtol_r+0x108>)
   d9bd4:	f8d0 9000 	ldr.w	r9, [r0]
   d9bd8:	460f      	mov	r7, r1
   d9bda:	463d      	mov	r5, r7
   d9bdc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9be0:	eb09 0004 	add.w	r0, r9, r4
   d9be4:	7840      	ldrb	r0, [r0, #1]
   d9be6:	f000 0008 	and.w	r0, r0, #8
   d9bea:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d9bee:	b108      	cbz	r0, d9bf4 <_strtol_r+0x28>
   d9bf0:	462f      	mov	r7, r5
   d9bf2:	e7f2      	b.n	d9bda <_strtol_r+0xe>
   d9bf4:	2c2d      	cmp	r4, #45	; 0x2d
   d9bf6:	d103      	bne.n	d9c00 <_strtol_r+0x34>
   d9bf8:	1cbd      	adds	r5, r7, #2
   d9bfa:	787c      	ldrb	r4, [r7, #1]
   d9bfc:	2601      	movs	r6, #1
   d9bfe:	e003      	b.n	d9c08 <_strtol_r+0x3c>
   d9c00:	2c2b      	cmp	r4, #43	; 0x2b
   d9c02:	bf04      	itt	eq
   d9c04:	787c      	ldrbeq	r4, [r7, #1]
   d9c06:	1cbd      	addeq	r5, r7, #2
   d9c08:	b113      	cbz	r3, d9c10 <_strtol_r+0x44>
   d9c0a:	2b10      	cmp	r3, #16
   d9c0c:	d10a      	bne.n	d9c24 <_strtol_r+0x58>
   d9c0e:	e05b      	b.n	d9cc8 <_strtol_r+0xfc>
   d9c10:	2c30      	cmp	r4, #48	; 0x30
   d9c12:	d157      	bne.n	d9cc4 <_strtol_r+0xf8>
   d9c14:	7828      	ldrb	r0, [r5, #0]
   d9c16:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9c1a:	2858      	cmp	r0, #88	; 0x58
   d9c1c:	d14d      	bne.n	d9cba <_strtol_r+0xee>
   d9c1e:	786c      	ldrb	r4, [r5, #1]
   d9c20:	2310      	movs	r3, #16
   d9c22:	3502      	adds	r5, #2
   d9c24:	2e00      	cmp	r6, #0
   d9c26:	bf14      	ite	ne
   d9c28:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9c2c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9c30:	2700      	movs	r7, #0
   d9c32:	fbbc faf3 	udiv	sl, ip, r3
   d9c36:	4638      	mov	r0, r7
   d9c38:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9c3c:	eb09 0e04 	add.w	lr, r9, r4
   d9c40:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9c44:	f01e 0f04 	tst.w	lr, #4
   d9c48:	d001      	beq.n	d9c4e <_strtol_r+0x82>
   d9c4a:	3c30      	subs	r4, #48	; 0x30
   d9c4c:	e00b      	b.n	d9c66 <_strtol_r+0x9a>
   d9c4e:	f01e 0e03 	ands.w	lr, lr, #3
   d9c52:	d01b      	beq.n	d9c8c <_strtol_r+0xc0>
   d9c54:	f1be 0f01 	cmp.w	lr, #1
   d9c58:	bf0c      	ite	eq
   d9c5a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9c5e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9c62:	ebce 0404 	rsb	r4, lr, r4
   d9c66:	42a3      	cmp	r3, r4
   d9c68:	dd10      	ble.n	d9c8c <_strtol_r+0xc0>
   d9c6a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d9c6e:	d00a      	beq.n	d9c86 <_strtol_r+0xba>
   d9c70:	4550      	cmp	r0, sl
   d9c72:	d806      	bhi.n	d9c82 <_strtol_r+0xb6>
   d9c74:	d101      	bne.n	d9c7a <_strtol_r+0xae>
   d9c76:	4564      	cmp	r4, ip
   d9c78:	dc03      	bgt.n	d9c82 <_strtol_r+0xb6>
   d9c7a:	fb03 4000 	mla	r0, r3, r0, r4
   d9c7e:	2701      	movs	r7, #1
   d9c80:	e001      	b.n	d9c86 <_strtol_r+0xba>
   d9c82:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d9c86:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9c8a:	e7d7      	b.n	d9c3c <_strtol_r+0x70>
   d9c8c:	1c7b      	adds	r3, r7, #1
   d9c8e:	d10c      	bne.n	d9caa <_strtol_r+0xde>
   d9c90:	2e00      	cmp	r6, #0
   d9c92:	f04f 0322 	mov.w	r3, #34	; 0x22
   d9c96:	bf14      	ite	ne
   d9c98:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9c9c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9ca0:	f8c8 3000 	str.w	r3, [r8]
   d9ca4:	b92a      	cbnz	r2, d9cb2 <_strtol_r+0xe6>
   d9ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9caa:	b106      	cbz	r6, d9cae <_strtol_r+0xe2>
   d9cac:	4240      	negs	r0, r0
   d9cae:	b172      	cbz	r2, d9cce <_strtol_r+0x102>
   d9cb0:	b107      	cbz	r7, d9cb4 <_strtol_r+0xe8>
   d9cb2:	1e69      	subs	r1, r5, #1
   d9cb4:	6011      	str	r1, [r2, #0]
   d9cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9cba:	2430      	movs	r4, #48	; 0x30
   d9cbc:	2b00      	cmp	r3, #0
   d9cbe:	d1b1      	bne.n	d9c24 <_strtol_r+0x58>
   d9cc0:	2308      	movs	r3, #8
   d9cc2:	e7af      	b.n	d9c24 <_strtol_r+0x58>
   d9cc4:	230a      	movs	r3, #10
   d9cc6:	e7ad      	b.n	d9c24 <_strtol_r+0x58>
   d9cc8:	2c30      	cmp	r4, #48	; 0x30
   d9cca:	d0a3      	beq.n	d9c14 <_strtol_r+0x48>
   d9ccc:	e7aa      	b.n	d9c24 <_strtol_r+0x58>
   d9cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9cd2:	bf00      	nop
   d9cd4:	2003e21c 	.word	0x2003e21c

000d9cd8 <strtol>:
   d9cd8:	4613      	mov	r3, r2
   d9cda:	460a      	mov	r2, r1
   d9cdc:	4601      	mov	r1, r0
   d9cde:	4802      	ldr	r0, [pc, #8]	; (d9ce8 <strtol+0x10>)
   d9ce0:	6800      	ldr	r0, [r0, #0]
   d9ce2:	f7ff bf73 	b.w	d9bcc <_strtol_r>
   d9ce6:	bf00      	nop
   d9ce8:	2003e280 	.word	0x2003e280

000d9cec <dynalib_user>:
   d9cec:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d9cfc:	00000000                                ....

000d9d00 <_ZTV5Timer>:
	...
   d9d08:	000d4299 000d42e1 000d414d              .B...B..MA..

000d9d14 <_ZTVN5spark10LogHandlerE>:
	...
   d9d24:	000d40a9 000d40cd                       .@...@..

000d9d2c <_ZTVN5spark16SerialLogHandlerE>:
	...
   d9d34:	000d4221 000d4255 000d8051 000d40cf     !B..UB..Q....@..
   d9d44:	31304b53 00642500 65656873 73655474     SK01.%d.sheetTes
   d9d54:	62003174 766c7474 7563006c 766c7272     t1.bttlvl.currlv
   d9d64:	7365006c 72657074 746e6563 636e6500     l.estpercent.enc
   d9d74:	00736e6f 706d6574 006c766c 6c6d7072     ons.templvl.rpml
   d9d84:	74006c76 6c706972 6f006c76 766c6f64     vl.triplvl.odolv
   d9d94:	6c63006c 6d64756f 0065646f 35323462     l.cloudmode.b425
   d9da4:	39303430 3462662d 37342d62 622d3634     0409-fb4b-4746-b
   d9db4:	2d306232 30663339 31313665 36633232     2b0-93f0e61122c6
   d9dc4:	32346200 30343035 62662d38 342d6234     .b4250408-fb4b-4
   d9dd4:	2d363437 30623262 6633392d 31366530     746-b2b0-93f0e61
   d9de4:	63323231 34620036 34303532 662d3730     122c6.b4250407-f
   d9df4:	2d623462 36343734 6232622d 33392d30     b4b-4746-b2b0-93
   d9e04:	36653066 32323131 62003663 30353234     f0e61122c6.b4250
   d9e14:	2d363034 62346266 3437342d 32622d36     406-fb4b-4746-b2
   d9e24:	392d3062 65306633 32313136 00366332     b0-93f0e61122c6.
   d9e34:	35323462 35303430 3462662d 37342d62     b4250405-fb4b-47
   d9e44:	622d3634 2d306232 30663339 31313665     46-b2b0-93f0e611
   d9e54:	36633232 32346200 30343035 62662d34     22c6.b4250404-fb
   d9e64:	342d6234 2d363437 30623262 6633392d     4b-4746-b2b0-93f
   d9e74:	31366530 63323231 34620036 34303532     0e61122c6.b42504
   d9e84:	662d3330 2d623462 36343734 6232622d     03-fb4b-4746-b2b
   d9e94:	33392d30 36653066 32323131 62003663     0-93f0e61122c6.b
   d9ea4:	30353234 2d323034 62346266 3437342d     4250402-fb4b-474
   d9eb4:	32622d36 392d3062 65306633 32313136     6-b2b0-93f0e6112
   d9ec4:	00366332 35323462 31303430 3462662d     2c6.b4250401-fb4
   d9ed4:	37342d62 622d3634 2d306232 30663339     b-4746-b2b0-93f0
   d9ee4:	31313665 36633232 32346200 30343035     e61122c6.b425040
   d9ef4:	62662d30 342d6234 2d363437 30623262     0-fb4b-4746-b2b0
   d9f04:	6633392d 31366530 63323231 00000036     -93f0e61122c6...

000d9f14 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9f1c:	000d571f 000d5725 000d64b9 000d574f     .W..%W...d..OW..
   d9f2c:	000d5721                                !W..

000d9f30 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9f38:	000d5719 000d5733 000d65c5 000d5753     .W..3W...e..SW..
   d9f48:	000d571b                                .W..

000d9f4c <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9f54:	000d5713 000d5741 000d5f77 000d5757     .W..AW..w_..WW..
   d9f64:	000d5715                                .W..

000d9f68 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d9f68:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.
   d9f78:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d9f88:	73696420 65766f63 676e6972 72657320      discovering ser
   d9f98:	65636976 53002e73 74726174 73696420     vices..Start dis
   d9fa8:	65766f63 676e6972 61686320 74636172     covering charact
   d9fb8:	73697265 73636974 6550002e 64207265     eristics..Peer d
   d9fc8:	63697665 73692065 73696d20 676e6973     evice is missing
   d9fd8:	61460021 64656c69 206f7420 65707061     !.Failed to appe
   d9fe8:	7020646e 20726565 746e6543 206c6172     nd peer Central 
   d9ff8:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
   da008:	79622064 6e654320 6c617274 76656420     d by Central dev
   da018:	2e656369 73694400 6e6e6f63 65746365     ice..Disconnecte
   da028:	79622064 6d657220 2065746f 69766564     d by remote devi
   da038:	002e6563 6e6e6143 6120746f 6e206464     ce..Cannot add n
   da048:	70207765 20726565 69766564 002e6563     ew peer device..
   da058:	2077654e 69726570 72656870 69206c61     New peripheral i
   da068:	6f632073 63656e6e 2e646574 69614600     s connected..Fai
   da078:	2064656c 61206f74 6e657070 69642064     led to append di
   da088:	766f6373 64657265 61686320 74636172     scovered charact
   da098:	73697265 2e636974 69614600 2064656c     eristic..Failed 
   da0a8:	61206f74 6e657070 69642064 766f6373     to append discov
   da0b8:	64657265 72657320 65636976 6146002e     ered service..Fa
   da0c8:	64656c69 206f7420 65707061 6c20646e     iled to append l
   da0d8:	6c61636f 61686320 74636172 73697265     ocal characteris
   da0e8:	2e636974 70754400 6163696c 20646574     tic..Duplicated 
   da0f8:	72616863 65746361 74736972 63206369     characteristic c
   da108:	6f6e6e61 65622074 64646120 002e6465     annot be added..

000da118 <_ZN8particle7BleUuid9BASE_UUIDE>:
   da118:	5f9b34fb 80000080 00001000 00000000     .4._............

000da128 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da130:	000d689d 000d68a3 000d68e7 000d68b1     .h...h...h...h..
   da140:	000d689f                                .h..

000da144 <_ZTVN5spark13EthernetClassE>:
	...
   da14c:	000d6ea3 000d6e99 000d6e8f 000d6e85     .n...n...n...n..
   da15c:	000d6e79 000d6e6d 000d6e61 000d6e59     yn..mn..an..Yn..
   da16c:	000d6e4f 000d6e45 000d8561              On..En..a...

000da178 <_ZTV7TwoWire>:
	...
   da180:	000d6ec1 000d6f0b 000d6ee3 000d6ec3     .n...o...n...n..
   da190:	000d6eeb 000d6ef3 000d6efb 000d6f03     .n...n...n...o..

000da1a0 <_ZTV9IPAddress>:
	...
   da1a8:	000d6fa9 000d6f99 000d6f9b 00302e30     .o...o...o..0.0.
   da1b8:	736c6166 72740065 25006575 2e250075     false.true.%u.%.
   da1c8:	00666c2a 6e006725 006c6c75 34302575     *lf.%g.null.u%04
   da1d8:	00000078                                x...

000da1dc <_ZTVN5spark16JSONStreamWriterE>:
	...
   da1e4:	000d742d 000d7453 000d7407 000d70ab     -t..St...t...p..

000da1f4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   da1fc:	000d78a9 000d78bd 000d8205 000d740f     .x...x.......t..
   da20c:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   da21c:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   da22c:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   da23c:	00746c69 48646461 6c646e61 72007265     ilt.addHandler.r
   da24c:	766f6d65 6e614865 72656c64 756e6500     emoveHandler.enu
   da25c:	6e61486d 72656c64 534a0073 74534e4f     mHandlers.JSONSt
   da26c:	6d616572 48676f4c 6c646e61 61007265     reamLogHandler.a
   da27c:	25007070 75303130 205d0020 00202c00     pp.%010u .] ., .
   da28c:	203a2928 005b2000 65646f63 00203d20     (): . [.code = .
   da29c:	64006925 69617465 3d20736c 0a0d0020     %i.details = ...
   da2ac:	006e6c00 63006e66 0065646f 61746564     .ln.fn.code.deta
   da2bc:	6e006c69 00656e6f 63617274 6e690065     il.none.trace.in
   da2cc:	77006f66 006e7261 6f727265 61700072     fo.warn.error.pa
   da2dc:	0063696e 006c6c61                       nic.all.

000da2e4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   da2ec:	000d787d 000d7895 000d8051 000d40cf     }x...x..Q....@..

000da2fc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   da304:	000d742b 000d7461 000d7f79 000d7411     +t..at..y....t..

000da314 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   da31c:	000d7429 000d746f 000d77c1 000d747d     )t..ot...w..}t..

000da32c <_ZTVN5spark9MeshClassE>:
	...
   da334:	000d83db 000d83d1 000d83c7 000d83bd     ................
   da344:	000d83b1 000d83a5 000d8399 000d8391     ................
   da354:	000d8387 000d837d 000d8561              ....}...a...

000da360 <_ZTVN5spark12NetworkClassE>:
	...
   da368:	000d84f9 000d8503 000d850d 000d8517     ................
   da378:	000d8521 000d852d 000d8539 000d8545     !...-...9...E...
   da388:	000d854d 000d8557 000d8561 2b25005a     M...W...a...Z.%+
   da398:	3a643330 75323025 2d592500 252d6d25     03d:%02u.%Y-%m-%
   da3a8:	48255464 3a4d253a 7a255325 63736100     dT%H:%M:%S%z.asc
   da3b8:	656d6974 00000000                       time....

000da3c0 <_ZTV11USARTSerial>:
	...
   da3c8:	000d89ad 000d89fd 000d8a0b 000d8641     ............A...
   da3d8:	000d89c1 000d89e3 000d89cf 000d89f7     ................
   da3e8:	000d89af 000d89b3                       ........

000da3f0 <_ZTV9USBSerial>:
	...
   da3f8:	000d8ac9 000d8b19 000d8b27 000d8641     ........'...A...
   da408:	000d8b05 000d8acb 000d8ae1 000d8b13     ................
   da418:	000d8af7 000d8ac5                       ........

000da420 <_ZSt7nothrow>:
	...

000da421 <_ctype_>:
   da421:	20202000 20202020 28282020 20282828     .         ((((( 
   da431:	20202020 20202020 20202020 20202020                     
   da441:	10108820 10101010 10101010 10101010      ...............
   da451:	04040410 04040404 10040404 10101010     ................
   da461:	41411010 41414141 01010101 01010101     ..AAAAAA........
   da471:	01010101 01010101 01010101 10101010     ................
   da481:	42421010 42424242 02020202 02020202     ..BBBBBB........
   da491:	02020202 02020202 02020202 10101010     ................
   da4a1:	00000020 00000000 00000000 00000000      ...............
	...

000da524 <__sf_fake_stdin>:
	...

000da544 <__sf_fake_stdout>:
	...

000da564 <__sf_fake_stderr>:
	...
   da584:	00000043                                         C.

000da586 <link_const_variable_data_end>:
	...

000da588 <link_constructors_location>:
   da588:	000d4bd5 	.word	0x000d4bd5
   da58c:	000d4fb5 	.word	0x000d4fb5
   da590:	000d6875 	.word	0x000d6875
   da594:	000d6ead 	.word	0x000d6ead
   da598:	000d8041 	.word	0x000d8041
   da59c:	000d84a9 	.word	0x000d84a9
   da5a0:	000d862d 	.word	0x000d862d
   da5a4:	000d87b1 	.word	0x000d87b1
   da5a8:	000d8965 	.word	0x000d8965
   da5ac:	000d8999 	.word	0x000d8999
   da5b0:	000d8edd 	.word	0x000d8edd
   da5b4:	000d8fa1 	.word	0x000d8fa1
   da5b8:	000d9025 	.word	0x000d9025
   da5bc:	000d90a9 	.word	0x000d90a9
